// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  // entities
  id         String    @id @default(uuid())
  nickname   String
  email      String    @unique
  password   String
  imageUrl   String    @map("image_url")
  birthDate  DateTime  @map("birth_date")
  isMale     Boolean
  score      Int       @default(500)
  isAttended Boolean   @default(false) @map("is_attended")
  createdAt  DateTime  @default(now()) @map("created_at")
  deletedAt  DateTime? @map("deleted_at")

  // relations
  wishlists           Wishlist[]
  reviews             Review[]
  reviewLikes         ReviewLike[]
  arenasAsCreator     Arena[]              @relation("ArenaCreator")
  arenasAsChallenger  Arena[]              @relation("ArenaChallenger")
  chattings           Chatting[]
  votes               Vote[]
  notificationRecords NotificationRecord[]
  scoreRecords        ScoreRecord[]
  preferredPlatforms  PreferredPlatform[]
  preferredGenres     PreferredGenre[]
  preferredThemes     PreferredTheme[]

  @@map("members")
}

model Game {
  // entities
  id          Int      @id @default(autoincrement())
  title       String
  developer   String?
  thumbnail   String?
  releaseDate DateTime @map("release_date")

  // relations
  wishlists     Wishlist[]
  reviews       Review[]
  gamePlatforms GamePlatform[]
  gameGenres    GameGenre[]
  gameThemes    GameTheme[]

  @@map("games")
}

model Wishlist {
  // entities
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  gameId   Int    @map("game_id")

  // relations
  member Member @relation(fields: [memberId], references: [id])
  game   Game   @relation(fields: [gameId], references: [id])

  @@map("wishlists")
}

model Review {
  // entities
  id        Int       @id @default(autoincrement())
  memberId  String    @map("member_id")
  gameId    Int       @map("game_id")
  content   String
  rating    Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  // relations
  member      Member       @relation(fields: [memberId], references: [id])
  game        Game         @relation(fields: [gameId], references: [id])
  reviewLikes ReviewLike[]

  @@map("reviews")
}

model ReviewLike {
  // entities
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  reviewId Int    @map("review_id")

  // relations
  member Member @relation(fields: [memberId], references: [id])
  review Review @relation(fields: [reviewId], references: [id])

  @@map("review_likes")
}

model Arena {
  // entities
  id           Int      @id @default(autoincrement())
  creatorId    String   @map("creator_id")
  challengerId String   @map("challenger_id")
  title        String
  description  String
  status       Int
  startDate    DateTime @map("start_date")

  // relations
  creator    Member     @relation("ArenaCreator", fields: [creatorId], references: [id])
  challenger Member     @relation("ArenaChallenger", fields: [challengerId], references: [id])
  chattings  Chatting[]
  votes      Vote[]

  @@map("arenas")
}

model Chatting {
  // entities
  id        Int      @id @default(autoincrement())
  memberId  String   @map("member_id")
  arenaId   Int      @map("arena_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  // relations
  member Member @relation(fields: [memberId], references: [id])
  arena  Arena  @relation(fields: [arenaId], references: [id])

  @@map("chattings")
}

model Vote {
  // entities
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  arenaId  Int    @map("arena_id")
  votedTo  String @map("voted_to")

  // relations
  member Member @relation(fields: [memberId], references: [id])
  arena  Arena  @relation(fields: [arenaId], references: [id])

  @@map("votes")
}

model NotificationType {
  // entities
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String @map("image_url")

  // relations
  notificationRecords NotificationRecord[]

  @@map("notification_types")
}

model NotificationRecord {
  // entities
  id          Int      @id @default(autoincrement())
  memberId    String   @map("member_id")
  typeId      Int      @map("type_id")
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  // relations
  member Member           @relation(fields: [memberId], references: [id])
  type   NotificationType @relation(fields: [typeId], references: [id])

  @@map("notification_records")
}

model ScorePolicy {
  // entities
  id          Int    @id @default(autoincrement())
  name        String
  description String
  score       Int
  imageUrl    String @map("image_url")

  // relations
  scoreRecords ScoreRecord[]

  @@map("score_policies")
}

model ScoreRecord {
  // entities
  id        Int      @id @default(autoincrement())
  memberId  String   @map("member_id")
  policyId  Int      @map("policy_id")
  createdAt DateTime @default(now()) @map("created_at")

  // relations
  member Member      @relation(fields: [memberId], references: [id])
  policy ScorePolicy @relation(fields: [policyId], references: [id])

  @@map("score_records")
}

model Platform {
  // entities
  id   Int    @id @default(autoincrement())
  name String @unique

  // relations
  preferredPlatforms PreferredPlatform[]
  gamePlatforms      GamePlatform[]

  @@map("platforms")
}

model Genre {
  // entities
  id   Int    @id @default(autoincrement())
  name String @unique

  // relations
  preferredGenres PreferredGenre[]
  gameGenres      GameGenre[]

  @@map("genres")
}

model Theme {
  // entities
  id   Int    @id @default(autoincrement())
  name String @unique

  // relations
  preferredThemes PreferredTheme[]
  gameThemes      GameTheme[]

  @@map("themes")
}

model PreferredPlatform {
  // entities
  id         Int    @id @default(autoincrement())
  memberId   String @map("member_id")
  platformId Int    @map("platform_id")

  // relations
  member   Member   @relation(fields: [memberId], references: [id])
  platform Platform @relation(fields: [platformId], references: [id])

  @@map("preferred_platforms")
}

model PreferredGenre {
  // entities
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  genreId  Int    @map("genre_id")

  // relations
  member Member @relation(fields: [memberId], references: [id])
  genre  Genre  @relation(fields: [genreId], references: [id])

  @@map("preferred_genres")
}

model PreferredTheme {
  // entities
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  themeId  Int    @map("theme_id")

  // relations
  member Member @relation(fields: [memberId], references: [id])
  theme  Theme  @relation(fields: [themeId], references: [id])

  @@map("preferred_themes")
}

model GamePlatform {
  // entities
  id         Int @id @default(autoincrement())
  gameId     Int @map("game_id")
  platformId Int @map("platform_id")

  // relations
  game     Game     @relation(fields: [gameId], references: [id])
  platform Platform @relation(fields: [platformId], references: [id])

  @@map("game_platforms")
}

model GameGenre {
  // entities
  id      Int @id @default(autoincrement())
  gameId  Int @map("game_id")
  genreId Int @map("genre_id")

  // relations
  game  Game  @relation(fields: [gameId], references: [id])
  genre Genre @relation(fields: [genreId], references: [id])

  @@map("game_genres")
}

model GameTheme {
  // entities
  id      Int @id @default(autoincrement())
  gameId  Int @map("game_id")
  themeId Int @map("theme_id")

  // relations
  game  Game  @relation(fields: [gameId], references: [id])
  theme Theme @relation(fields: [themeId], references: [id])

  @@map("game_themes")
}
