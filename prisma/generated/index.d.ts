
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model Wishlist
 * 
 */
export type Wishlist = $Result.DefaultSelection<Prisma.$WishlistPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model ReviewLike
 * 
 */
export type ReviewLike = $Result.DefaultSelection<Prisma.$ReviewLikePayload>
/**
 * Model Arena
 * 
 */
export type Arena = $Result.DefaultSelection<Prisma.$ArenaPayload>
/**
 * Model Chatting
 * 
 */
export type Chatting = $Result.DefaultSelection<Prisma.$ChattingPayload>
/**
 * Model Vote
 * 
 */
export type Vote = $Result.DefaultSelection<Prisma.$VotePayload>
/**
 * Model NotificationType
 * 
 */
export type NotificationType = $Result.DefaultSelection<Prisma.$NotificationTypePayload>
/**
 * Model NotificationRecord
 * 
 */
export type NotificationRecord = $Result.DefaultSelection<Prisma.$NotificationRecordPayload>
/**
 * Model ScorePolicy
 * 
 */
export type ScorePolicy = $Result.DefaultSelection<Prisma.$ScorePolicyPayload>
/**
 * Model ScoreRecord
 * 
 */
export type ScoreRecord = $Result.DefaultSelection<Prisma.$ScoreRecordPayload>
/**
 * Model Platform
 * 
 */
export type Platform = $Result.DefaultSelection<Prisma.$PlatformPayload>
/**
 * Model Genre
 * 
 */
export type Genre = $Result.DefaultSelection<Prisma.$GenrePayload>
/**
 * Model Theme
 * 
 */
export type Theme = $Result.DefaultSelection<Prisma.$ThemePayload>
/**
 * Model PreferredPlatform
 * 
 */
export type PreferredPlatform = $Result.DefaultSelection<Prisma.$PreferredPlatformPayload>
/**
 * Model PreferredGenre
 * 
 */
export type PreferredGenre = $Result.DefaultSelection<Prisma.$PreferredGenrePayload>
/**
 * Model PreferredTheme
 * 
 */
export type PreferredTheme = $Result.DefaultSelection<Prisma.$PreferredThemePayload>
/**
 * Model GamePlatform
 * 
 */
export type GamePlatform = $Result.DefaultSelection<Prisma.$GamePlatformPayload>
/**
 * Model GameGenre
 * 
 */
export type GameGenre = $Result.DefaultSelection<Prisma.$GameGenrePayload>
/**
 * Model GameTheme
 * 
 */
export type GameTheme = $Result.DefaultSelection<Prisma.$GameThemePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Members
 * const members = await prisma.member.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Members
   * const members = await prisma.member.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wishlist`: Exposes CRUD operations for the **Wishlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wishlists
    * const wishlists = await prisma.wishlist.findMany()
    * ```
    */
  get wishlist(): Prisma.WishlistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewLike`: Exposes CRUD operations for the **ReviewLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewLikes
    * const reviewLikes = await prisma.reviewLike.findMany()
    * ```
    */
  get reviewLike(): Prisma.ReviewLikeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.arena`: Exposes CRUD operations for the **Arena** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Arenas
    * const arenas = await prisma.arena.findMany()
    * ```
    */
  get arena(): Prisma.ArenaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatting`: Exposes CRUD operations for the **Chatting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chattings
    * const chattings = await prisma.chatting.findMany()
    * ```
    */
  get chatting(): Prisma.ChattingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationType`: Exposes CRUD operations for the **NotificationType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationTypes
    * const notificationTypes = await prisma.notificationType.findMany()
    * ```
    */
  get notificationType(): Prisma.NotificationTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationRecord`: Exposes CRUD operations for the **NotificationRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationRecords
    * const notificationRecords = await prisma.notificationRecord.findMany()
    * ```
    */
  get notificationRecord(): Prisma.NotificationRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scorePolicy`: Exposes CRUD operations for the **ScorePolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScorePolicies
    * const scorePolicies = await prisma.scorePolicy.findMany()
    * ```
    */
  get scorePolicy(): Prisma.ScorePolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scoreRecord`: Exposes CRUD operations for the **ScoreRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScoreRecords
    * const scoreRecords = await prisma.scoreRecord.findMany()
    * ```
    */
  get scoreRecord(): Prisma.ScoreRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.platform`: Exposes CRUD operations for the **Platform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platforms
    * const platforms = await prisma.platform.findMany()
    * ```
    */
  get platform(): Prisma.PlatformDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.theme`: Exposes CRUD operations for the **Theme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Themes
    * const themes = await prisma.theme.findMany()
    * ```
    */
  get theme(): Prisma.ThemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preferredPlatform`: Exposes CRUD operations for the **PreferredPlatform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreferredPlatforms
    * const preferredPlatforms = await prisma.preferredPlatform.findMany()
    * ```
    */
  get preferredPlatform(): Prisma.PreferredPlatformDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preferredGenre`: Exposes CRUD operations for the **PreferredGenre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreferredGenres
    * const preferredGenres = await prisma.preferredGenre.findMany()
    * ```
    */
  get preferredGenre(): Prisma.PreferredGenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.preferredTheme`: Exposes CRUD operations for the **PreferredTheme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PreferredThemes
    * const preferredThemes = await prisma.preferredTheme.findMany()
    * ```
    */
  get preferredTheme(): Prisma.PreferredThemeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gamePlatform`: Exposes CRUD operations for the **GamePlatform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GamePlatforms
    * const gamePlatforms = await prisma.gamePlatform.findMany()
    * ```
    */
  get gamePlatform(): Prisma.GamePlatformDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameGenre`: Exposes CRUD operations for the **GameGenre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameGenres
    * const gameGenres = await prisma.gameGenre.findMany()
    * ```
    */
  get gameGenre(): Prisma.GameGenreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gameTheme`: Exposes CRUD operations for the **GameTheme** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameThemes
    * const gameThemes = await prisma.gameTheme.findMany()
    * ```
    */
  get gameTheme(): Prisma.GameThemeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Member: 'Member',
    Game: 'Game',
    Wishlist: 'Wishlist',
    Review: 'Review',
    ReviewLike: 'ReviewLike',
    Arena: 'Arena',
    Chatting: 'Chatting',
    Vote: 'Vote',
    NotificationType: 'NotificationType',
    NotificationRecord: 'NotificationRecord',
    ScorePolicy: 'ScorePolicy',
    ScoreRecord: 'ScoreRecord',
    Platform: 'Platform',
    Genre: 'Genre',
    Theme: 'Theme',
    PreferredPlatform: 'PreferredPlatform',
    PreferredGenre: 'PreferredGenre',
    PreferredTheme: 'PreferredTheme',
    GamePlatform: 'GamePlatform',
    GameGenre: 'GameGenre',
    GameTheme: 'GameTheme'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "member" | "game" | "wishlist" | "review" | "reviewLike" | "arena" | "chatting" | "vote" | "notificationType" | "notificationRecord" | "scorePolicy" | "scoreRecord" | "platform" | "genre" | "theme" | "preferredPlatform" | "preferredGenre" | "preferredTheme" | "gamePlatform" | "gameGenre" | "gameTheme"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      Wishlist: {
        payload: Prisma.$WishlistPayload<ExtArgs>
        fields: Prisma.WishlistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WishlistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WishlistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          findFirst: {
            args: Prisma.WishlistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WishlistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          findMany: {
            args: Prisma.WishlistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>[]
          }
          create: {
            args: Prisma.WishlistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          createMany: {
            args: Prisma.WishlistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WishlistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>[]
          }
          delete: {
            args: Prisma.WishlistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          update: {
            args: Prisma.WishlistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          deleteMany: {
            args: Prisma.WishlistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WishlistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WishlistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>[]
          }
          upsert: {
            args: Prisma.WishlistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          aggregate: {
            args: Prisma.WishlistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWishlist>
          }
          groupBy: {
            args: Prisma.WishlistGroupByArgs<ExtArgs>
            result: $Utils.Optional<WishlistGroupByOutputType>[]
          }
          count: {
            args: Prisma.WishlistCountArgs<ExtArgs>
            result: $Utils.Optional<WishlistCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      ReviewLike: {
        payload: Prisma.$ReviewLikePayload<ExtArgs>
        fields: Prisma.ReviewLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewLikeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewLikeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          findFirst: {
            args: Prisma.ReviewLikeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewLikeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          findMany: {
            args: Prisma.ReviewLikeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>[]
          }
          create: {
            args: Prisma.ReviewLikeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          createMany: {
            args: Prisma.ReviewLikeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewLikeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>[]
          }
          delete: {
            args: Prisma.ReviewLikeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          update: {
            args: Prisma.ReviewLikeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          deleteMany: {
            args: Prisma.ReviewLikeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewLikeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewLikeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>[]
          }
          upsert: {
            args: Prisma.ReviewLikeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewLikePayload>
          }
          aggregate: {
            args: Prisma.ReviewLikeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewLike>
          }
          groupBy: {
            args: Prisma.ReviewLikeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewLikeCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewLikeCountAggregateOutputType> | number
          }
        }
      }
      Arena: {
        payload: Prisma.$ArenaPayload<ExtArgs>
        fields: Prisma.ArenaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArenaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArenaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          findFirst: {
            args: Prisma.ArenaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArenaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          findMany: {
            args: Prisma.ArenaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>[]
          }
          create: {
            args: Prisma.ArenaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          createMany: {
            args: Prisma.ArenaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArenaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>[]
          }
          delete: {
            args: Prisma.ArenaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          update: {
            args: Prisma.ArenaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          deleteMany: {
            args: Prisma.ArenaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArenaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ArenaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>[]
          }
          upsert: {
            args: Prisma.ArenaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArenaPayload>
          }
          aggregate: {
            args: Prisma.ArenaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArena>
          }
          groupBy: {
            args: Prisma.ArenaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArenaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArenaCountArgs<ExtArgs>
            result: $Utils.Optional<ArenaCountAggregateOutputType> | number
          }
        }
      }
      Chatting: {
        payload: Prisma.$ChattingPayload<ExtArgs>
        fields: Prisma.ChattingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChattingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChattingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>
          }
          findFirst: {
            args: Prisma.ChattingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChattingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>
          }
          findMany: {
            args: Prisma.ChattingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>[]
          }
          create: {
            args: Prisma.ChattingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>
          }
          createMany: {
            args: Prisma.ChattingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChattingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>[]
          }
          delete: {
            args: Prisma.ChattingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>
          }
          update: {
            args: Prisma.ChattingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>
          }
          deleteMany: {
            args: Prisma.ChattingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChattingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChattingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>[]
          }
          upsert: {
            args: Prisma.ChattingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChattingPayload>
          }
          aggregate: {
            args: Prisma.ChattingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatting>
          }
          groupBy: {
            args: Prisma.ChattingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChattingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChattingCountArgs<ExtArgs>
            result: $Utils.Optional<ChattingCountAggregateOutputType> | number
          }
        }
      }
      Vote: {
        payload: Prisma.$VotePayload<ExtArgs>
        fields: Prisma.VoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findFirst: {
            args: Prisma.VoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findMany: {
            args: Prisma.VoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          create: {
            args: Prisma.VoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          createMany: {
            args: Prisma.VoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          delete: {
            args: Prisma.VoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          update: {
            args: Prisma.VoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          deleteMany: {
            args: Prisma.VoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          upsert: {
            args: Prisma.VoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          aggregate: {
            args: Prisma.VoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVote>
          }
          groupBy: {
            args: Prisma.VoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteCountArgs<ExtArgs>
            result: $Utils.Optional<VoteCountAggregateOutputType> | number
          }
        }
      }
      NotificationType: {
        payload: Prisma.$NotificationTypePayload<ExtArgs>
        fields: Prisma.NotificationTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          findFirst: {
            args: Prisma.NotificationTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          findMany: {
            args: Prisma.NotificationTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>[]
          }
          create: {
            args: Prisma.NotificationTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          createMany: {
            args: Prisma.NotificationTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>[]
          }
          delete: {
            args: Prisma.NotificationTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          update: {
            args: Prisma.NotificationTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          deleteMany: {
            args: Prisma.NotificationTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>[]
          }
          upsert: {
            args: Prisma.NotificationTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationTypePayload>
          }
          aggregate: {
            args: Prisma.NotificationTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationType>
          }
          groupBy: {
            args: Prisma.NotificationTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationTypeCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationTypeCountAggregateOutputType> | number
          }
        }
      }
      NotificationRecord: {
        payload: Prisma.$NotificationRecordPayload<ExtArgs>
        fields: Prisma.NotificationRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>
          }
          findFirst: {
            args: Prisma.NotificationRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>
          }
          findMany: {
            args: Prisma.NotificationRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>[]
          }
          create: {
            args: Prisma.NotificationRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>
          }
          createMany: {
            args: Prisma.NotificationRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>[]
          }
          delete: {
            args: Prisma.NotificationRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>
          }
          update: {
            args: Prisma.NotificationRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>
          }
          deleteMany: {
            args: Prisma.NotificationRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>[]
          }
          upsert: {
            args: Prisma.NotificationRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationRecordPayload>
          }
          aggregate: {
            args: Prisma.NotificationRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationRecord>
          }
          groupBy: {
            args: Prisma.NotificationRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationRecordCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationRecordCountAggregateOutputType> | number
          }
        }
      }
      ScorePolicy: {
        payload: Prisma.$ScorePolicyPayload<ExtArgs>
        fields: Prisma.ScorePolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScorePolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScorePolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>
          }
          findFirst: {
            args: Prisma.ScorePolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScorePolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>
          }
          findMany: {
            args: Prisma.ScorePolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>[]
          }
          create: {
            args: Prisma.ScorePolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>
          }
          createMany: {
            args: Prisma.ScorePolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScorePolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>[]
          }
          delete: {
            args: Prisma.ScorePolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>
          }
          update: {
            args: Prisma.ScorePolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>
          }
          deleteMany: {
            args: Prisma.ScorePolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScorePolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScorePolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>[]
          }
          upsert: {
            args: Prisma.ScorePolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScorePolicyPayload>
          }
          aggregate: {
            args: Prisma.ScorePolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScorePolicy>
          }
          groupBy: {
            args: Prisma.ScorePolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScorePolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScorePolicyCountArgs<ExtArgs>
            result: $Utils.Optional<ScorePolicyCountAggregateOutputType> | number
          }
        }
      }
      ScoreRecord: {
        payload: Prisma.$ScoreRecordPayload<ExtArgs>
        fields: Prisma.ScoreRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScoreRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScoreRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>
          }
          findFirst: {
            args: Prisma.ScoreRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScoreRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>
          }
          findMany: {
            args: Prisma.ScoreRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>[]
          }
          create: {
            args: Prisma.ScoreRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>
          }
          createMany: {
            args: Prisma.ScoreRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScoreRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>[]
          }
          delete: {
            args: Prisma.ScoreRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>
          }
          update: {
            args: Prisma.ScoreRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>
          }
          deleteMany: {
            args: Prisma.ScoreRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScoreRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScoreRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>[]
          }
          upsert: {
            args: Prisma.ScoreRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScoreRecordPayload>
          }
          aggregate: {
            args: Prisma.ScoreRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScoreRecord>
          }
          groupBy: {
            args: Prisma.ScoreRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScoreRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScoreRecordCountArgs<ExtArgs>
            result: $Utils.Optional<ScoreRecordCountAggregateOutputType> | number
          }
        }
      }
      Platform: {
        payload: Prisma.$PlatformPayload<ExtArgs>
        fields: Prisma.PlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlatformFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlatformFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findFirst: {
            args: Prisma.PlatformFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlatformFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findMany: {
            args: Prisma.PlatformFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          create: {
            args: Prisma.PlatformCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          createMany: {
            args: Prisma.PlatformCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlatformCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          delete: {
            args: Prisma.PlatformDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          update: {
            args: Prisma.PlatformUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          deleteMany: {
            args: Prisma.PlatformDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlatformUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlatformUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          upsert: {
            args: Prisma.PlatformUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          aggregate: {
            args: Prisma.PlatformAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlatform>
          }
          groupBy: {
            args: Prisma.PlatformGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlatformCountArgs<ExtArgs>
            result: $Utils.Optional<PlatformCountAggregateOutputType> | number
          }
        }
      }
      Genre: {
        payload: Prisma.$GenrePayload<ExtArgs>
        fields: Prisma.GenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          findFirst: {
            args: Prisma.GenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          findMany: {
            args: Prisma.GenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          create: {
            args: Prisma.GenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          createMany: {
            args: Prisma.GenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GenreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          delete: {
            args: Prisma.GenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          update: {
            args: Prisma.GenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          deleteMany: {
            args: Prisma.GenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GenreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>[]
          }
          upsert: {
            args: Prisma.GenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GenrePayload>
          }
          aggregate: {
            args: Prisma.GenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenre>
          }
          groupBy: {
            args: Prisma.GenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<GenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.GenreCountArgs<ExtArgs>
            result: $Utils.Optional<GenreCountAggregateOutputType> | number
          }
        }
      }
      Theme: {
        payload: Prisma.$ThemePayload<ExtArgs>
        fields: Prisma.ThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findFirst: {
            args: Prisma.ThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          findMany: {
            args: Prisma.ThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          create: {
            args: Prisma.ThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          createMany: {
            args: Prisma.ThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          delete: {
            args: Prisma.ThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          update: {
            args: Prisma.ThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          deleteMany: {
            args: Prisma.ThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ThemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>[]
          }
          upsert: {
            args: Prisma.ThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ThemePayload>
          }
          aggregate: {
            args: Prisma.ThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTheme>
          }
          groupBy: {
            args: Prisma.ThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThemeCountArgs<ExtArgs>
            result: $Utils.Optional<ThemeCountAggregateOutputType> | number
          }
        }
      }
      PreferredPlatform: {
        payload: Prisma.$PreferredPlatformPayload<ExtArgs>
        fields: Prisma.PreferredPlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferredPlatformFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferredPlatformFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>
          }
          findFirst: {
            args: Prisma.PreferredPlatformFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferredPlatformFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>
          }
          findMany: {
            args: Prisma.PreferredPlatformFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>[]
          }
          create: {
            args: Prisma.PreferredPlatformCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>
          }
          createMany: {
            args: Prisma.PreferredPlatformCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferredPlatformCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>[]
          }
          delete: {
            args: Prisma.PreferredPlatformDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>
          }
          update: {
            args: Prisma.PreferredPlatformUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>
          }
          deleteMany: {
            args: Prisma.PreferredPlatformDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferredPlatformUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreferredPlatformUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>[]
          }
          upsert: {
            args: Prisma.PreferredPlatformUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredPlatformPayload>
          }
          aggregate: {
            args: Prisma.PreferredPlatformAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreferredPlatform>
          }
          groupBy: {
            args: Prisma.PreferredPlatformGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferredPlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferredPlatformCountArgs<ExtArgs>
            result: $Utils.Optional<PreferredPlatformCountAggregateOutputType> | number
          }
        }
      }
      PreferredGenre: {
        payload: Prisma.$PreferredGenrePayload<ExtArgs>
        fields: Prisma.PreferredGenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferredGenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferredGenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>
          }
          findFirst: {
            args: Prisma.PreferredGenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferredGenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>
          }
          findMany: {
            args: Prisma.PreferredGenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>[]
          }
          create: {
            args: Prisma.PreferredGenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>
          }
          createMany: {
            args: Prisma.PreferredGenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferredGenreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>[]
          }
          delete: {
            args: Prisma.PreferredGenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>
          }
          update: {
            args: Prisma.PreferredGenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>
          }
          deleteMany: {
            args: Prisma.PreferredGenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferredGenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreferredGenreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>[]
          }
          upsert: {
            args: Prisma.PreferredGenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredGenrePayload>
          }
          aggregate: {
            args: Prisma.PreferredGenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreferredGenre>
          }
          groupBy: {
            args: Prisma.PreferredGenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferredGenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferredGenreCountArgs<ExtArgs>
            result: $Utils.Optional<PreferredGenreCountAggregateOutputType> | number
          }
        }
      }
      PreferredTheme: {
        payload: Prisma.$PreferredThemePayload<ExtArgs>
        fields: Prisma.PreferredThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PreferredThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PreferredThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>
          }
          findFirst: {
            args: Prisma.PreferredThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PreferredThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>
          }
          findMany: {
            args: Prisma.PreferredThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>[]
          }
          create: {
            args: Prisma.PreferredThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>
          }
          createMany: {
            args: Prisma.PreferredThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PreferredThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>[]
          }
          delete: {
            args: Prisma.PreferredThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>
          }
          update: {
            args: Prisma.PreferredThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>
          }
          deleteMany: {
            args: Prisma.PreferredThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PreferredThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PreferredThemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>[]
          }
          upsert: {
            args: Prisma.PreferredThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PreferredThemePayload>
          }
          aggregate: {
            args: Prisma.PreferredThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePreferredTheme>
          }
          groupBy: {
            args: Prisma.PreferredThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PreferredThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PreferredThemeCountArgs<ExtArgs>
            result: $Utils.Optional<PreferredThemeCountAggregateOutputType> | number
          }
        }
      }
      GamePlatform: {
        payload: Prisma.$GamePlatformPayload<ExtArgs>
        fields: Prisma.GamePlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GamePlatformFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GamePlatformFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>
          }
          findFirst: {
            args: Prisma.GamePlatformFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GamePlatformFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>
          }
          findMany: {
            args: Prisma.GamePlatformFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>[]
          }
          create: {
            args: Prisma.GamePlatformCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>
          }
          createMany: {
            args: Prisma.GamePlatformCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GamePlatformCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>[]
          }
          delete: {
            args: Prisma.GamePlatformDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>
          }
          update: {
            args: Prisma.GamePlatformUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>
          }
          deleteMany: {
            args: Prisma.GamePlatformDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GamePlatformUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GamePlatformUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>[]
          }
          upsert: {
            args: Prisma.GamePlatformUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePlatformPayload>
          }
          aggregate: {
            args: Prisma.GamePlatformAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGamePlatform>
          }
          groupBy: {
            args: Prisma.GamePlatformGroupByArgs<ExtArgs>
            result: $Utils.Optional<GamePlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.GamePlatformCountArgs<ExtArgs>
            result: $Utils.Optional<GamePlatformCountAggregateOutputType> | number
          }
        }
      }
      GameGenre: {
        payload: Prisma.$GameGenrePayload<ExtArgs>
        fields: Prisma.GameGenreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameGenreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameGenreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>
          }
          findFirst: {
            args: Prisma.GameGenreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameGenreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>
          }
          findMany: {
            args: Prisma.GameGenreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>[]
          }
          create: {
            args: Prisma.GameGenreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>
          }
          createMany: {
            args: Prisma.GameGenreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameGenreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>[]
          }
          delete: {
            args: Prisma.GameGenreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>
          }
          update: {
            args: Prisma.GameGenreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>
          }
          deleteMany: {
            args: Prisma.GameGenreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameGenreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameGenreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>[]
          }
          upsert: {
            args: Prisma.GameGenreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameGenrePayload>
          }
          aggregate: {
            args: Prisma.GameGenreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameGenre>
          }
          groupBy: {
            args: Prisma.GameGenreGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGenreGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameGenreCountArgs<ExtArgs>
            result: $Utils.Optional<GameGenreCountAggregateOutputType> | number
          }
        }
      }
      GameTheme: {
        payload: Prisma.$GameThemePayload<ExtArgs>
        fields: Prisma.GameThemeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameThemeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameThemeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>
          }
          findFirst: {
            args: Prisma.GameThemeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameThemeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>
          }
          findMany: {
            args: Prisma.GameThemeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>[]
          }
          create: {
            args: Prisma.GameThemeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>
          }
          createMany: {
            args: Prisma.GameThemeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameThemeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>[]
          }
          delete: {
            args: Prisma.GameThemeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>
          }
          update: {
            args: Prisma.GameThemeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>
          }
          deleteMany: {
            args: Prisma.GameThemeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameThemeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GameThemeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>[]
          }
          upsert: {
            args: Prisma.GameThemeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GameThemePayload>
          }
          aggregate: {
            args: Prisma.GameThemeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGameTheme>
          }
          groupBy: {
            args: Prisma.GameThemeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameThemeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameThemeCountArgs<ExtArgs>
            result: $Utils.Optional<GameThemeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    member?: MemberOmit
    game?: GameOmit
    wishlist?: WishlistOmit
    review?: ReviewOmit
    reviewLike?: ReviewLikeOmit
    arena?: ArenaOmit
    chatting?: ChattingOmit
    vote?: VoteOmit
    notificationType?: NotificationTypeOmit
    notificationRecord?: NotificationRecordOmit
    scorePolicy?: ScorePolicyOmit
    scoreRecord?: ScoreRecordOmit
    platform?: PlatformOmit
    genre?: GenreOmit
    theme?: ThemeOmit
    preferredPlatform?: PreferredPlatformOmit
    preferredGenre?: PreferredGenreOmit
    preferredTheme?: PreferredThemeOmit
    gamePlatform?: GamePlatformOmit
    gameGenre?: GameGenreOmit
    gameTheme?: GameThemeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MemberCountOutputType
   */

  export type MemberCountOutputType = {
    arenasAsChallenger: number
    arenasAsCreator: number
    chattings: number
    notificationRecords: number
    preferredGenres: number
    preferredPlatforms: number
    preferredThemes: number
    reviewLikes: number
    reviews: number
    scoreRecords: number
    votes: number
    wishlists: number
  }

  export type MemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arenasAsChallenger?: boolean | MemberCountOutputTypeCountArenasAsChallengerArgs
    arenasAsCreator?: boolean | MemberCountOutputTypeCountArenasAsCreatorArgs
    chattings?: boolean | MemberCountOutputTypeCountChattingsArgs
    notificationRecords?: boolean | MemberCountOutputTypeCountNotificationRecordsArgs
    preferredGenres?: boolean | MemberCountOutputTypeCountPreferredGenresArgs
    preferredPlatforms?: boolean | MemberCountOutputTypeCountPreferredPlatformsArgs
    preferredThemes?: boolean | MemberCountOutputTypeCountPreferredThemesArgs
    reviewLikes?: boolean | MemberCountOutputTypeCountReviewLikesArgs
    reviews?: boolean | MemberCountOutputTypeCountReviewsArgs
    scoreRecords?: boolean | MemberCountOutputTypeCountScoreRecordsArgs
    votes?: boolean | MemberCountOutputTypeCountVotesArgs
    wishlists?: boolean | MemberCountOutputTypeCountWishlistsArgs
  }

  // Custom InputTypes
  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     */
    select?: MemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountArenasAsChallengerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArenaWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountArenasAsCreatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArenaWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountChattingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChattingWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountNotificationRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationRecordWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPreferredGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredGenreWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPreferredPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredPlatformWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountPreferredThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredThemeWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountReviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewLikeWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountScoreRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreRecordWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    gameGenres: number
    gamePlatforms: number
    gameThemes: number
    reviews: number
    wishlists: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameGenres?: boolean | GameCountOutputTypeCountGameGenresArgs
    gamePlatforms?: boolean | GameCountOutputTypeCountGamePlatformsArgs
    gameThemes?: boolean | GameCountOutputTypeCountGameThemesArgs
    reviews?: boolean | GameCountOutputTypeCountReviewsArgs
    wishlists?: boolean | GameCountOutputTypeCountWishlistsArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameGenreWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGamePlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamePlatformWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGameThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameThemeWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
  }


  /**
   * Count Type ReviewCountOutputType
   */

  export type ReviewCountOutputType = {
    reviewLikes: number
  }

  export type ReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewLikes?: boolean | ReviewCountOutputTypeCountReviewLikesArgs
  }

  // Custom InputTypes
  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewCountOutputType
     */
    select?: ReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewLikeWhereInput
  }


  /**
   * Count Type ArenaCountOutputType
   */

  export type ArenaCountOutputType = {
    chattings: number
    votes: number
  }

  export type ArenaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chattings?: boolean | ArenaCountOutputTypeCountChattingsArgs
    votes?: boolean | ArenaCountOutputTypeCountVotesArgs
  }

  // Custom InputTypes
  /**
   * ArenaCountOutputType without action
   */
  export type ArenaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArenaCountOutputType
     */
    select?: ArenaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArenaCountOutputType without action
   */
  export type ArenaCountOutputTypeCountChattingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChattingWhereInput
  }

  /**
   * ArenaCountOutputType without action
   */
  export type ArenaCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }


  /**
   * Count Type NotificationTypeCountOutputType
   */

  export type NotificationTypeCountOutputType = {
    notificationRecords: number
  }

  export type NotificationTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notificationRecords?: boolean | NotificationTypeCountOutputTypeCountNotificationRecordsArgs
  }

  // Custom InputTypes
  /**
   * NotificationTypeCountOutputType without action
   */
  export type NotificationTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationTypeCountOutputType
     */
    select?: NotificationTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NotificationTypeCountOutputType without action
   */
  export type NotificationTypeCountOutputTypeCountNotificationRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationRecordWhereInput
  }


  /**
   * Count Type ScorePolicyCountOutputType
   */

  export type ScorePolicyCountOutputType = {
    scoreRecords: number
  }

  export type ScorePolicyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreRecords?: boolean | ScorePolicyCountOutputTypeCountScoreRecordsArgs
  }

  // Custom InputTypes
  /**
   * ScorePolicyCountOutputType without action
   */
  export type ScorePolicyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicyCountOutputType
     */
    select?: ScorePolicyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScorePolicyCountOutputType without action
   */
  export type ScorePolicyCountOutputTypeCountScoreRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreRecordWhereInput
  }


  /**
   * Count Type PlatformCountOutputType
   */

  export type PlatformCountOutputType = {
    gamePlatforms: number
    preferredPlatforms: number
  }

  export type PlatformCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gamePlatforms?: boolean | PlatformCountOutputTypeCountGamePlatformsArgs
    preferredPlatforms?: boolean | PlatformCountOutputTypeCountPreferredPlatformsArgs
  }

  // Custom InputTypes
  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlatformCountOutputType
     */
    select?: PlatformCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountGamePlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamePlatformWhereInput
  }

  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountPreferredPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredPlatformWhereInput
  }


  /**
   * Count Type GenreCountOutputType
   */

  export type GenreCountOutputType = {
    gameGenres: number
    preferredGenres: number
  }

  export type GenreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameGenres?: boolean | GenreCountOutputTypeCountGameGenresArgs
    preferredGenres?: boolean | GenreCountOutputTypeCountPreferredGenresArgs
  }

  // Custom InputTypes
  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     */
    select?: GenreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeCountGameGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameGenreWhereInput
  }

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeCountPreferredGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredGenreWhereInput
  }


  /**
   * Count Type ThemeCountOutputType
   */

  export type ThemeCountOutputType = {
    gameThemes: number
    preferredThemes: number
  }

  export type ThemeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameThemes?: boolean | ThemeCountOutputTypeCountGameThemesArgs
    preferredThemes?: boolean | ThemeCountOutputTypeCountPreferredThemesArgs
  }

  // Custom InputTypes
  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ThemeCountOutputType
     */
    select?: ThemeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeCountGameThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameThemeWhereInput
  }

  /**
   * ThemeCountOutputType without action
   */
  export type ThemeCountOutputTypeCountPreferredThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredThemeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberAvgAggregateOutputType = {
    score: number | null
  }

  export type MemberSumAggregateOutputType = {
    score: number | null
  }

  export type MemberMinAggregateOutputType = {
    id: string | null
    nickname: string | null
    email: string | null
    password: string | null
    imageUrl: string | null
    birthDate: Date | null
    isMale: boolean | null
    score: number | null
    lastAttendedDate: Date | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type MemberMaxAggregateOutputType = {
    id: string | null
    nickname: string | null
    email: string | null
    password: string | null
    imageUrl: string | null
    birthDate: Date | null
    isMale: boolean | null
    score: number | null
    lastAttendedDate: Date | null
    createdAt: Date | null
    deletedAt: Date | null
  }

  export type MemberCountAggregateOutputType = {
    id: number
    nickname: number
    email: number
    password: number
    imageUrl: number
    birthDate: number
    isMale: number
    score: number
    lastAttendedDate: number
    createdAt: number
    deletedAt: number
    _all: number
  }


  export type MemberAvgAggregateInputType = {
    score?: true
  }

  export type MemberSumAggregateInputType = {
    score?: true
  }

  export type MemberMinAggregateInputType = {
    id?: true
    nickname?: true
    email?: true
    password?: true
    imageUrl?: true
    birthDate?: true
    isMale?: true
    score?: true
    lastAttendedDate?: true
    createdAt?: true
    deletedAt?: true
  }

  export type MemberMaxAggregateInputType = {
    id?: true
    nickname?: true
    email?: true
    password?: true
    imageUrl?: true
    birthDate?: true
    isMale?: true
    score?: true
    lastAttendedDate?: true
    createdAt?: true
    deletedAt?: true
  }

  export type MemberCountAggregateInputType = {
    id?: true
    nickname?: true
    email?: true
    password?: true
    imageUrl?: true
    birthDate?: true
    isMale?: true
    score?: true
    lastAttendedDate?: true
    createdAt?: true
    deletedAt?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _avg?: MemberAvgAggregateInputType
    _sum?: MemberSumAggregateInputType
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    id: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date
    isMale: boolean
    score: number
    lastAttendedDate: Date
    createdAt: Date
    deletedAt: Date | null
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickname?: boolean
    email?: boolean
    password?: boolean
    imageUrl?: boolean
    birthDate?: boolean
    isMale?: boolean
    score?: boolean
    lastAttendedDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    arenasAsChallenger?: boolean | Member$arenasAsChallengerArgs<ExtArgs>
    arenasAsCreator?: boolean | Member$arenasAsCreatorArgs<ExtArgs>
    chattings?: boolean | Member$chattingsArgs<ExtArgs>
    notificationRecords?: boolean | Member$notificationRecordsArgs<ExtArgs>
    preferredGenres?: boolean | Member$preferredGenresArgs<ExtArgs>
    preferredPlatforms?: boolean | Member$preferredPlatformsArgs<ExtArgs>
    preferredThemes?: boolean | Member$preferredThemesArgs<ExtArgs>
    reviewLikes?: boolean | Member$reviewLikesArgs<ExtArgs>
    reviews?: boolean | Member$reviewsArgs<ExtArgs>
    scoreRecords?: boolean | Member$scoreRecordsArgs<ExtArgs>
    votes?: boolean | Member$votesArgs<ExtArgs>
    wishlists?: boolean | Member$wishlistsArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickname?: boolean
    email?: boolean
    password?: boolean
    imageUrl?: boolean
    birthDate?: boolean
    isMale?: boolean
    score?: boolean
    lastAttendedDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["member"]>

  export type MemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickname?: boolean
    email?: boolean
    password?: boolean
    imageUrl?: boolean
    birthDate?: boolean
    isMale?: boolean
    score?: boolean
    lastAttendedDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    id?: boolean
    nickname?: boolean
    email?: boolean
    password?: boolean
    imageUrl?: boolean
    birthDate?: boolean
    isMale?: boolean
    score?: boolean
    lastAttendedDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
  }

  export type MemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nickname" | "email" | "password" | "imageUrl" | "birthDate" | "isMale" | "score" | "lastAttendedDate" | "createdAt" | "deletedAt", ExtArgs["result"]["member"]>
  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arenasAsChallenger?: boolean | Member$arenasAsChallengerArgs<ExtArgs>
    arenasAsCreator?: boolean | Member$arenasAsCreatorArgs<ExtArgs>
    chattings?: boolean | Member$chattingsArgs<ExtArgs>
    notificationRecords?: boolean | Member$notificationRecordsArgs<ExtArgs>
    preferredGenres?: boolean | Member$preferredGenresArgs<ExtArgs>
    preferredPlatforms?: boolean | Member$preferredPlatformsArgs<ExtArgs>
    preferredThemes?: boolean | Member$preferredThemesArgs<ExtArgs>
    reviewLikes?: boolean | Member$reviewLikesArgs<ExtArgs>
    reviews?: boolean | Member$reviewsArgs<ExtArgs>
    scoreRecords?: boolean | Member$scoreRecordsArgs<ExtArgs>
    votes?: boolean | Member$votesArgs<ExtArgs>
    wishlists?: boolean | Member$wishlistsArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      arenasAsChallenger: Prisma.$ArenaPayload<ExtArgs>[]
      arenasAsCreator: Prisma.$ArenaPayload<ExtArgs>[]
      chattings: Prisma.$ChattingPayload<ExtArgs>[]
      notificationRecords: Prisma.$NotificationRecordPayload<ExtArgs>[]
      preferredGenres: Prisma.$PreferredGenrePayload<ExtArgs>[]
      preferredPlatforms: Prisma.$PreferredPlatformPayload<ExtArgs>[]
      preferredThemes: Prisma.$PreferredThemePayload<ExtArgs>[]
      reviewLikes: Prisma.$ReviewLikePayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      scoreRecords: Prisma.$ScoreRecordPayload<ExtArgs>[]
      votes: Prisma.$VotePayload<ExtArgs>[]
      wishlists: Prisma.$WishlistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nickname: string
      email: string
      password: string
      imageUrl: string
      birthDate: Date
      isMale: boolean
      score: number
      lastAttendedDate: Date
      createdAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MemberFindUniqueArgs>(args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs>(args: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MemberFindFirstArgs>(args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs>(args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const memberWithIdOnly = await prisma.member.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MemberFindManyArgs>(args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
     */
    create<T extends MemberCreateArgs>(args: SelectSubset<T, MemberCreateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MemberCreateManyArgs>(args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs>(args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
     */
    delete<T extends MemberDeleteArgs>(args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MemberUpdateArgs>(args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MemberDeleteManyArgs>(args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MemberUpdateManyArgs>(args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members and returns the data updated in the database.
     * @param {MemberUpdateManyAndReturnArgs} args - Arguments to update many Members.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Members and only return the `id`
     * const memberWithIdOnly = await prisma.member.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MemberUpdateManyAndReturnArgs>(args: SelectSubset<T, MemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
     */
    upsert<T extends MemberUpsertArgs>(args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arenasAsChallenger<T extends Member$arenasAsChallengerArgs<ExtArgs> = {}>(args?: Subset<T, Member$arenasAsChallengerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    arenasAsCreator<T extends Member$arenasAsCreatorArgs<ExtArgs> = {}>(args?: Subset<T, Member$arenasAsCreatorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chattings<T extends Member$chattingsArgs<ExtArgs> = {}>(args?: Subset<T, Member$chattingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationRecords<T extends Member$notificationRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Member$notificationRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredGenres<T extends Member$preferredGenresArgs<ExtArgs> = {}>(args?: Subset<T, Member$preferredGenresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredPlatforms<T extends Member$preferredPlatformsArgs<ExtArgs> = {}>(args?: Subset<T, Member$preferredPlatformsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredThemes<T extends Member$preferredThemesArgs<ExtArgs> = {}>(args?: Subset<T, Member$preferredThemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviewLikes<T extends Member$reviewLikesArgs<ExtArgs> = {}>(args?: Subset<T, Member$reviewLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Member$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Member$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scoreRecords<T extends Member$scoreRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Member$scoreRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votes<T extends Member$votesArgs<ExtArgs> = {}>(args?: Subset<T, Member$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wishlists<T extends Member$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, Member$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Member model
   */
  interface MemberFieldRefs {
    readonly id: FieldRef<"Member", 'String'>
    readonly nickname: FieldRef<"Member", 'String'>
    readonly email: FieldRef<"Member", 'String'>
    readonly password: FieldRef<"Member", 'String'>
    readonly imageUrl: FieldRef<"Member", 'String'>
    readonly birthDate: FieldRef<"Member", 'DateTime'>
    readonly isMale: FieldRef<"Member", 'Boolean'>
    readonly score: FieldRef<"Member", 'Int'>
    readonly lastAttendedDate: FieldRef<"Member", 'DateTime'>
    readonly createdAt: FieldRef<"Member", 'DateTime'>
    readonly deletedAt: FieldRef<"Member", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Member updateManyAndReturn
   */
  export type MemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to update.
     */
    limit?: number
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
    /**
     * Limit how many Members to delete.
     */
    limit?: number
  }

  /**
   * Member.arenasAsChallenger
   */
  export type Member$arenasAsChallengerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    where?: ArenaWhereInput
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    cursor?: ArenaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Member.arenasAsCreator
   */
  export type Member$arenasAsCreatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    where?: ArenaWhereInput
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    cursor?: ArenaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Member.chattings
   */
  export type Member$chattingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    where?: ChattingWhereInput
    orderBy?: ChattingOrderByWithRelationInput | ChattingOrderByWithRelationInput[]
    cursor?: ChattingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChattingScalarFieldEnum | ChattingScalarFieldEnum[]
  }

  /**
   * Member.notificationRecords
   */
  export type Member$notificationRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    where?: NotificationRecordWhereInput
    orderBy?: NotificationRecordOrderByWithRelationInput | NotificationRecordOrderByWithRelationInput[]
    cursor?: NotificationRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationRecordScalarFieldEnum | NotificationRecordScalarFieldEnum[]
  }

  /**
   * Member.preferredGenres
   */
  export type Member$preferredGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    where?: PreferredGenreWhereInput
    orderBy?: PreferredGenreOrderByWithRelationInput | PreferredGenreOrderByWithRelationInput[]
    cursor?: PreferredGenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferredGenreScalarFieldEnum | PreferredGenreScalarFieldEnum[]
  }

  /**
   * Member.preferredPlatforms
   */
  export type Member$preferredPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    where?: PreferredPlatformWhereInput
    orderBy?: PreferredPlatformOrderByWithRelationInput | PreferredPlatformOrderByWithRelationInput[]
    cursor?: PreferredPlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferredPlatformScalarFieldEnum | PreferredPlatformScalarFieldEnum[]
  }

  /**
   * Member.preferredThemes
   */
  export type Member$preferredThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    where?: PreferredThemeWhereInput
    orderBy?: PreferredThemeOrderByWithRelationInput | PreferredThemeOrderByWithRelationInput[]
    cursor?: PreferredThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferredThemeScalarFieldEnum | PreferredThemeScalarFieldEnum[]
  }

  /**
   * Member.reviewLikes
   */
  export type Member$reviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    where?: ReviewLikeWhereInput
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    cursor?: ReviewLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * Member.reviews
   */
  export type Member$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Member.scoreRecords
   */
  export type Member$scoreRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    where?: ScoreRecordWhereInput
    orderBy?: ScoreRecordOrderByWithRelationInput | ScoreRecordOrderByWithRelationInput[]
    cursor?: ScoreRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreRecordScalarFieldEnum | ScoreRecordScalarFieldEnum[]
  }

  /**
   * Member.votes
   */
  export type Member$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Member.wishlists
   */
  export type Member$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    cursor?: WishlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    title: string | null
    developer: string | null
    thumbnail: string | null
    releaseDate: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    title: string | null
    developer: string | null
    thumbnail: string | null
    releaseDate: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    title: number
    developer: number
    thumbnail: number
    releaseDate: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    title?: true
    developer?: true
    thumbnail?: true
    releaseDate?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    title?: true
    developer?: true
    thumbnail?: true
    releaseDate?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    title?: true
    developer?: true
    thumbnail?: true
    releaseDate?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    title: string
    developer: string | null
    thumbnail: string | null
    releaseDate: Date | null
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    developer?: boolean
    thumbnail?: boolean
    releaseDate?: boolean
    gameGenres?: boolean | Game$gameGenresArgs<ExtArgs>
    gamePlatforms?: boolean | Game$gamePlatformsArgs<ExtArgs>
    gameThemes?: boolean | Game$gameThemesArgs<ExtArgs>
    reviews?: boolean | Game$reviewsArgs<ExtArgs>
    wishlists?: boolean | Game$wishlistsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    developer?: boolean
    thumbnail?: boolean
    releaseDate?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    developer?: boolean
    thumbnail?: boolean
    releaseDate?: boolean
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    title?: boolean
    developer?: boolean
    thumbnail?: boolean
    releaseDate?: boolean
  }

  export type GameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "developer" | "thumbnail" | "releaseDate", ExtArgs["result"]["game"]>
  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameGenres?: boolean | Game$gameGenresArgs<ExtArgs>
    gamePlatforms?: boolean | Game$gamePlatformsArgs<ExtArgs>
    gameThemes?: boolean | Game$gameThemesArgs<ExtArgs>
    reviews?: boolean | Game$reviewsArgs<ExtArgs>
    wishlists?: boolean | Game$wishlistsArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GameIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      gameGenres: Prisma.$GameGenrePayload<ExtArgs>[]
      gamePlatforms: Prisma.$GamePlatformPayload<ExtArgs>[]
      gameThemes: Prisma.$GameThemePayload<ExtArgs>[]
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      wishlists: Prisma.$WishlistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      developer: string | null
      thumbnail: string | null
      releaseDate: Date | null
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games and returns the data updated in the database.
     * @param {GameUpdateManyAndReturnArgs} args - Arguments to update many Games.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameUpdateManyAndReturnArgs>(args: SelectSubset<T, GameUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameGenres<T extends Game$gameGenresArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameGenresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gamePlatforms<T extends Game$gamePlatformsArgs<ExtArgs> = {}>(args?: Subset<T, Game$gamePlatformsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gameThemes<T extends Game$gameThemesArgs<ExtArgs> = {}>(args?: Subset<T, Game$gameThemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends Game$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Game$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wishlists<T extends Game$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, Game$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly title: FieldRef<"Game", 'String'>
    readonly developer: FieldRef<"Game", 'String'>
    readonly thumbnail: FieldRef<"Game", 'String'>
    readonly releaseDate: FieldRef<"Game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game updateManyAndReturn
   */
  export type GameUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to update.
     */
    limit?: number
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
    /**
     * Limit how many Games to delete.
     */
    limit?: number
  }

  /**
   * Game.gameGenres
   */
  export type Game$gameGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    where?: GameGenreWhereInput
    orderBy?: GameGenreOrderByWithRelationInput | GameGenreOrderByWithRelationInput[]
    cursor?: GameGenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameGenreScalarFieldEnum | GameGenreScalarFieldEnum[]
  }

  /**
   * Game.gamePlatforms
   */
  export type Game$gamePlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    where?: GamePlatformWhereInput
    orderBy?: GamePlatformOrderByWithRelationInput | GamePlatformOrderByWithRelationInput[]
    cursor?: GamePlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GamePlatformScalarFieldEnum | GamePlatformScalarFieldEnum[]
  }

  /**
   * Game.gameThemes
   */
  export type Game$gameThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    where?: GameThemeWhereInput
    orderBy?: GameThemeOrderByWithRelationInput | GameThemeOrderByWithRelationInput[]
    cursor?: GameThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameThemeScalarFieldEnum | GameThemeScalarFieldEnum[]
  }

  /**
   * Game.reviews
   */
  export type Game$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Game.wishlists
   */
  export type Game$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    cursor?: WishlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Game
     */
    omit?: GameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model Wishlist
   */

  export type AggregateWishlist = {
    _count: WishlistCountAggregateOutputType | null
    _avg: WishlistAvgAggregateOutputType | null
    _sum: WishlistSumAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  export type WishlistAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type WishlistSumAggregateOutputType = {
    id: number | null
    gameId: number | null
  }

  export type WishlistMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    gameId: number | null
  }

  export type WishlistMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    gameId: number | null
  }

  export type WishlistCountAggregateOutputType = {
    id: number
    memberId: number
    gameId: number
    _all: number
  }


  export type WishlistAvgAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type WishlistSumAggregateInputType = {
    id?: true
    gameId?: true
  }

  export type WishlistMinAggregateInputType = {
    id?: true
    memberId?: true
    gameId?: true
  }

  export type WishlistMaxAggregateInputType = {
    id?: true
    memberId?: true
    gameId?: true
  }

  export type WishlistCountAggregateInputType = {
    id?: true
    memberId?: true
    gameId?: true
    _all?: true
  }

  export type WishlistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishlist to aggregate.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wishlists
    **/
    _count?: true | WishlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WishlistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WishlistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishlistMaxAggregateInputType
  }

  export type GetWishlistAggregateType<T extends WishlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWishlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWishlist[P]>
      : GetScalarType<T[P], AggregateWishlist[P]>
  }




  export type WishlistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithAggregationInput | WishlistOrderByWithAggregationInput[]
    by: WishlistScalarFieldEnum[] | WishlistScalarFieldEnum
    having?: WishlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishlistCountAggregateInputType | true
    _avg?: WishlistAvgAggregateInputType
    _sum?: WishlistSumAggregateInputType
    _min?: WishlistMinAggregateInputType
    _max?: WishlistMaxAggregateInputType
  }

  export type WishlistGroupByOutputType = {
    id: number
    memberId: string
    gameId: number
    _count: WishlistCountAggregateOutputType | null
    _avg: WishlistAvgAggregateOutputType | null
    _sum: WishlistSumAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  type GetWishlistGroupByPayload<T extends WishlistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WishlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishlistGroupByOutputType[P]>
            : GetScalarType<T[P], WishlistGroupByOutputType[P]>
        }
      >
    >


  export type WishlistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wishlist"]>

  export type WishlistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wishlist"]>

  export type WishlistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wishlist"]>

  export type WishlistSelectScalar = {
    id?: boolean
    memberId?: boolean
    gameId?: boolean
  }

  export type WishlistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "gameId", ExtArgs["result"]["wishlist"]>
  export type WishlistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type WishlistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type WishlistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $WishlistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wishlist"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      gameId: number
    }, ExtArgs["result"]["wishlist"]>
    composites: {}
  }

  type WishlistGetPayload<S extends boolean | null | undefined | WishlistDefaultArgs> = $Result.GetResult<Prisma.$WishlistPayload, S>

  type WishlistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WishlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WishlistCountAggregateInputType | true
    }

  export interface WishlistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wishlist'], meta: { name: 'Wishlist' } }
    /**
     * Find zero or one Wishlist that matches the filter.
     * @param {WishlistFindUniqueArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WishlistFindUniqueArgs>(args: SelectSubset<T, WishlistFindUniqueArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wishlist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WishlistFindUniqueOrThrowArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WishlistFindUniqueOrThrowArgs>(args: SelectSubset<T, WishlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wishlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WishlistFindFirstArgs>(args?: SelectSubset<T, WishlistFindFirstArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wishlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstOrThrowArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WishlistFindFirstOrThrowArgs>(args?: SelectSubset<T, WishlistFindFirstOrThrowArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wishlists
     * const wishlists = await prisma.wishlist.findMany()
     * 
     * // Get first 10 Wishlists
     * const wishlists = await prisma.wishlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishlistWithIdOnly = await prisma.wishlist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WishlistFindManyArgs>(args?: SelectSubset<T, WishlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wishlist.
     * @param {WishlistCreateArgs} args - Arguments to create a Wishlist.
     * @example
     * // Create one Wishlist
     * const Wishlist = await prisma.wishlist.create({
     *   data: {
     *     // ... data to create a Wishlist
     *   }
     * })
     * 
     */
    create<T extends WishlistCreateArgs>(args: SelectSubset<T, WishlistCreateArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wishlists.
     * @param {WishlistCreateManyArgs} args - Arguments to create many Wishlists.
     * @example
     * // Create many Wishlists
     * const wishlist = await prisma.wishlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WishlistCreateManyArgs>(args?: SelectSubset<T, WishlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wishlists and returns the data saved in the database.
     * @param {WishlistCreateManyAndReturnArgs} args - Arguments to create many Wishlists.
     * @example
     * // Create many Wishlists
     * const wishlist = await prisma.wishlist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wishlists and only return the `id`
     * const wishlistWithIdOnly = await prisma.wishlist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WishlistCreateManyAndReturnArgs>(args?: SelectSubset<T, WishlistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wishlist.
     * @param {WishlistDeleteArgs} args - Arguments to delete one Wishlist.
     * @example
     * // Delete one Wishlist
     * const Wishlist = await prisma.wishlist.delete({
     *   where: {
     *     // ... filter to delete one Wishlist
     *   }
     * })
     * 
     */
    delete<T extends WishlistDeleteArgs>(args: SelectSubset<T, WishlistDeleteArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wishlist.
     * @param {WishlistUpdateArgs} args - Arguments to update one Wishlist.
     * @example
     * // Update one Wishlist
     * const wishlist = await prisma.wishlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WishlistUpdateArgs>(args: SelectSubset<T, WishlistUpdateArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wishlists.
     * @param {WishlistDeleteManyArgs} args - Arguments to filter Wishlists to delete.
     * @example
     * // Delete a few Wishlists
     * const { count } = await prisma.wishlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WishlistDeleteManyArgs>(args?: SelectSubset<T, WishlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wishlists
     * const wishlist = await prisma.wishlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WishlistUpdateManyArgs>(args: SelectSubset<T, WishlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishlists and returns the data updated in the database.
     * @param {WishlistUpdateManyAndReturnArgs} args - Arguments to update many Wishlists.
     * @example
     * // Update many Wishlists
     * const wishlist = await prisma.wishlist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wishlists and only return the `id`
     * const wishlistWithIdOnly = await prisma.wishlist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WishlistUpdateManyAndReturnArgs>(args: SelectSubset<T, WishlistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wishlist.
     * @param {WishlistUpsertArgs} args - Arguments to update or create a Wishlist.
     * @example
     * // Update or create a Wishlist
     * const wishlist = await prisma.wishlist.upsert({
     *   create: {
     *     // ... data to create a Wishlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wishlist we want to update
     *   }
     * })
     */
    upsert<T extends WishlistUpsertArgs>(args: SelectSubset<T, WishlistUpsertArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistCountArgs} args - Arguments to filter Wishlists to count.
     * @example
     * // Count the number of Wishlists
     * const count = await prisma.wishlist.count({
     *   where: {
     *     // ... the filter for the Wishlists we want to count
     *   }
     * })
    **/
    count<T extends WishlistCountArgs>(
      args?: Subset<T, WishlistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishlistAggregateArgs>(args: Subset<T, WishlistAggregateArgs>): Prisma.PrismaPromise<GetWishlistAggregateType<T>>

    /**
     * Group by Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WishlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WishlistGroupByArgs['orderBy'] }
        : { orderBy?: WishlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WishlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wishlist model
   */
  readonly fields: WishlistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wishlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WishlistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wishlist model
   */
  interface WishlistFieldRefs {
    readonly id: FieldRef<"Wishlist", 'Int'>
    readonly memberId: FieldRef<"Wishlist", 'String'>
    readonly gameId: FieldRef<"Wishlist", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Wishlist findUnique
   */
  export type WishlistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist findUniqueOrThrow
   */
  export type WishlistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist findFirst
   */
  export type WishlistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     */
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist findFirstOrThrow
   */
  export type WishlistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     */
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist findMany
   */
  export type WishlistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlists to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist create
   */
  export type WishlistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The data needed to create a Wishlist.
     */
    data: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
  }

  /**
   * Wishlist createMany
   */
  export type WishlistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wishlists.
     */
    data: WishlistCreateManyInput | WishlistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wishlist createManyAndReturn
   */
  export type WishlistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * The data used to create many Wishlists.
     */
    data: WishlistCreateManyInput | WishlistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wishlist update
   */
  export type WishlistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The data needed to update a Wishlist.
     */
    data: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
    /**
     * Choose, which Wishlist to update.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist updateMany
   */
  export type WishlistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wishlists.
     */
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyInput>
    /**
     * Filter which Wishlists to update
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to update.
     */
    limit?: number
  }

  /**
   * Wishlist updateManyAndReturn
   */
  export type WishlistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * The data used to update Wishlists.
     */
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyInput>
    /**
     * Filter which Wishlists to update
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wishlist upsert
   */
  export type WishlistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The filter to search for the Wishlist to update in case it exists.
     */
    where: WishlistWhereUniqueInput
    /**
     * In case the Wishlist found by the `where` argument doesn't exist, create a new Wishlist with this data.
     */
    create: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
    /**
     * In case the Wishlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
  }

  /**
   * Wishlist delete
   */
  export type WishlistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter which Wishlist to delete.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist deleteMany
   */
  export type WishlistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishlists to delete
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to delete.
     */
    limit?: number
  }

  /**
   * Wishlist without action
   */
  export type WishlistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    gameId: number | null
    content: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    gameId: number | null
    content: string | null
    rating: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    memberId: number
    gameId: number
    content: number
    rating: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    gameId?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    gameId?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    memberId?: true
    gameId?: true
    content?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    memberId?: true
    gameId?: true
    content?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    memberId?: true
    gameId?: true
    content?: true
    rating?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    memberId: string
    gameId: number
    content: string
    rating: number
    createdAt: Date
    updatedAt: Date | null
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    content?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reviewLikes?: boolean | Review$reviewLikesArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    content?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    content?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    memberId?: boolean
    gameId?: boolean
    content?: boolean
    rating?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "gameId" | "content" | "rating" | "createdAt" | "updatedAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviewLikes?: boolean | Review$reviewLikesArgs<ExtArgs>
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      reviewLikes: Prisma.$ReviewLikePayload<ExtArgs>[]
      game: Prisma.$GamePayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      gameId: number
      content: string
      rating: number
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviewLikes<T extends Review$reviewLikesArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewLikesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly memberId: FieldRef<"Review", 'String'>
    readonly gameId: FieldRef<"Review", 'Int'>
    readonly content: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Int'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
    readonly updatedAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review.reviewLikes
   */
  export type Review$reviewLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    where?: ReviewLikeWhereInput
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    cursor?: ReviewLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model ReviewLike
   */

  export type AggregateReviewLike = {
    _count: ReviewLikeCountAggregateOutputType | null
    _avg: ReviewLikeAvgAggregateOutputType | null
    _sum: ReviewLikeSumAggregateOutputType | null
    _min: ReviewLikeMinAggregateOutputType | null
    _max: ReviewLikeMaxAggregateOutputType | null
  }

  export type ReviewLikeAvgAggregateOutputType = {
    id: number | null
    reviewId: number | null
  }

  export type ReviewLikeSumAggregateOutputType = {
    id: number | null
    reviewId: number | null
  }

  export type ReviewLikeMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    reviewId: number | null
  }

  export type ReviewLikeMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    reviewId: number | null
  }

  export type ReviewLikeCountAggregateOutputType = {
    id: number
    memberId: number
    reviewId: number
    _all: number
  }


  export type ReviewLikeAvgAggregateInputType = {
    id?: true
    reviewId?: true
  }

  export type ReviewLikeSumAggregateInputType = {
    id?: true
    reviewId?: true
  }

  export type ReviewLikeMinAggregateInputType = {
    id?: true
    memberId?: true
    reviewId?: true
  }

  export type ReviewLikeMaxAggregateInputType = {
    id?: true
    memberId?: true
    reviewId?: true
  }

  export type ReviewLikeCountAggregateInputType = {
    id?: true
    memberId?: true
    reviewId?: true
    _all?: true
  }

  export type ReviewLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewLike to aggregate.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewLikes
    **/
    _count?: true | ReviewLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewLikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewLikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewLikeMaxAggregateInputType
  }

  export type GetReviewLikeAggregateType<T extends ReviewLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewLike[P]>
      : GetScalarType<T[P], AggregateReviewLike[P]>
  }




  export type ReviewLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewLikeWhereInput
    orderBy?: ReviewLikeOrderByWithAggregationInput | ReviewLikeOrderByWithAggregationInput[]
    by: ReviewLikeScalarFieldEnum[] | ReviewLikeScalarFieldEnum
    having?: ReviewLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewLikeCountAggregateInputType | true
    _avg?: ReviewLikeAvgAggregateInputType
    _sum?: ReviewLikeSumAggregateInputType
    _min?: ReviewLikeMinAggregateInputType
    _max?: ReviewLikeMaxAggregateInputType
  }

  export type ReviewLikeGroupByOutputType = {
    id: number
    memberId: string
    reviewId: number
    _count: ReviewLikeCountAggregateOutputType | null
    _avg: ReviewLikeAvgAggregateOutputType | null
    _sum: ReviewLikeSumAggregateOutputType | null
    _min: ReviewLikeMinAggregateOutputType | null
    _max: ReviewLikeMaxAggregateOutputType | null
  }

  type GetReviewLikeGroupByPayload<T extends ReviewLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewLikeGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewLikeGroupByOutputType[P]>
        }
      >
    >


  export type ReviewLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    reviewId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewLike"]>

  export type ReviewLikeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    reviewId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewLike"]>

  export type ReviewLikeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    reviewId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewLike"]>

  export type ReviewLikeSelectScalar = {
    id?: boolean
    memberId?: boolean
    reviewId?: boolean
  }

  export type ReviewLikeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "reviewId", ExtArgs["result"]["reviewLike"]>
  export type ReviewLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }
  export type ReviewLikeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }
  export type ReviewLikeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    review?: boolean | ReviewDefaultArgs<ExtArgs>
  }

  export type $ReviewLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewLike"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      review: Prisma.$ReviewPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      reviewId: number
    }, ExtArgs["result"]["reviewLike"]>
    composites: {}
  }

  type ReviewLikeGetPayload<S extends boolean | null | undefined | ReviewLikeDefaultArgs> = $Result.GetResult<Prisma.$ReviewLikePayload, S>

  type ReviewLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewLikeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewLikeCountAggregateInputType | true
    }

  export interface ReviewLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewLike'], meta: { name: 'ReviewLike' } }
    /**
     * Find zero or one ReviewLike that matches the filter.
     * @param {ReviewLikeFindUniqueArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewLikeFindUniqueArgs>(args: SelectSubset<T, ReviewLikeFindUniqueArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewLike that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewLikeFindUniqueOrThrowArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewLikeFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewLikeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeFindFirstArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewLikeFindFirstArgs>(args?: SelectSubset<T, ReviewLikeFindFirstArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeFindFirstOrThrowArgs} args - Arguments to find a ReviewLike
     * @example
     * // Get one ReviewLike
     * const reviewLike = await prisma.reviewLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewLikeFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewLikeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewLikes
     * const reviewLikes = await prisma.reviewLike.findMany()
     * 
     * // Get first 10 ReviewLikes
     * const reviewLikes = await prisma.reviewLike.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewLikeWithIdOnly = await prisma.reviewLike.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewLikeFindManyArgs>(args?: SelectSubset<T, ReviewLikeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewLike.
     * @param {ReviewLikeCreateArgs} args - Arguments to create a ReviewLike.
     * @example
     * // Create one ReviewLike
     * const ReviewLike = await prisma.reviewLike.create({
     *   data: {
     *     // ... data to create a ReviewLike
     *   }
     * })
     * 
     */
    create<T extends ReviewLikeCreateArgs>(args: SelectSubset<T, ReviewLikeCreateArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewLikes.
     * @param {ReviewLikeCreateManyArgs} args - Arguments to create many ReviewLikes.
     * @example
     * // Create many ReviewLikes
     * const reviewLike = await prisma.reviewLike.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewLikeCreateManyArgs>(args?: SelectSubset<T, ReviewLikeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewLikes and returns the data saved in the database.
     * @param {ReviewLikeCreateManyAndReturnArgs} args - Arguments to create many ReviewLikes.
     * @example
     * // Create many ReviewLikes
     * const reviewLike = await prisma.reviewLike.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewLikes and only return the `id`
     * const reviewLikeWithIdOnly = await prisma.reviewLike.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewLikeCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewLikeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewLike.
     * @param {ReviewLikeDeleteArgs} args - Arguments to delete one ReviewLike.
     * @example
     * // Delete one ReviewLike
     * const ReviewLike = await prisma.reviewLike.delete({
     *   where: {
     *     // ... filter to delete one ReviewLike
     *   }
     * })
     * 
     */
    delete<T extends ReviewLikeDeleteArgs>(args: SelectSubset<T, ReviewLikeDeleteArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewLike.
     * @param {ReviewLikeUpdateArgs} args - Arguments to update one ReviewLike.
     * @example
     * // Update one ReviewLike
     * const reviewLike = await prisma.reviewLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewLikeUpdateArgs>(args: SelectSubset<T, ReviewLikeUpdateArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewLikes.
     * @param {ReviewLikeDeleteManyArgs} args - Arguments to filter ReviewLikes to delete.
     * @example
     * // Delete a few ReviewLikes
     * const { count } = await prisma.reviewLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewLikeDeleteManyArgs>(args?: SelectSubset<T, ReviewLikeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewLikes
     * const reviewLike = await prisma.reviewLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewLikeUpdateManyArgs>(args: SelectSubset<T, ReviewLikeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewLikes and returns the data updated in the database.
     * @param {ReviewLikeUpdateManyAndReturnArgs} args - Arguments to update many ReviewLikes.
     * @example
     * // Update many ReviewLikes
     * const reviewLike = await prisma.reviewLike.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewLikes and only return the `id`
     * const reviewLikeWithIdOnly = await prisma.reviewLike.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewLikeUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewLikeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewLike.
     * @param {ReviewLikeUpsertArgs} args - Arguments to update or create a ReviewLike.
     * @example
     * // Update or create a ReviewLike
     * const reviewLike = await prisma.reviewLike.upsert({
     *   create: {
     *     // ... data to create a ReviewLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewLike we want to update
     *   }
     * })
     */
    upsert<T extends ReviewLikeUpsertArgs>(args: SelectSubset<T, ReviewLikeUpsertArgs<ExtArgs>>): Prisma__ReviewLikeClient<$Result.GetResult<Prisma.$ReviewLikePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeCountArgs} args - Arguments to filter ReviewLikes to count.
     * @example
     * // Count the number of ReviewLikes
     * const count = await prisma.reviewLike.count({
     *   where: {
     *     // ... the filter for the ReviewLikes we want to count
     *   }
     * })
    **/
    count<T extends ReviewLikeCountArgs>(
      args?: Subset<T, ReviewLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewLikeAggregateArgs>(args: Subset<T, ReviewLikeAggregateArgs>): Prisma.PrismaPromise<GetReviewLikeAggregateType<T>>

    /**
     * Group by ReviewLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewLikeGroupByArgs['orderBy'] }
        : { orderBy?: ReviewLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewLike model
   */
  readonly fields: ReviewLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewLike model
   */
  interface ReviewLikeFieldRefs {
    readonly id: FieldRef<"ReviewLike", 'Int'>
    readonly memberId: FieldRef<"ReviewLike", 'String'>
    readonly reviewId: FieldRef<"ReviewLike", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ReviewLike findUnique
   */
  export type ReviewLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike findUniqueOrThrow
   */
  export type ReviewLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike findFirst
   */
  export type ReviewLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewLikes.
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewLikes.
     */
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * ReviewLike findFirstOrThrow
   */
  export type ReviewLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLike to fetch.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewLikes.
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewLikes.
     */
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * ReviewLike findMany
   */
  export type ReviewLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter, which ReviewLikes to fetch.
     */
    where?: ReviewLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewLikes to fetch.
     */
    orderBy?: ReviewLikeOrderByWithRelationInput | ReviewLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewLikes.
     */
    cursor?: ReviewLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewLikes.
     */
    skip?: number
    distinct?: ReviewLikeScalarFieldEnum | ReviewLikeScalarFieldEnum[]
  }

  /**
   * ReviewLike create
   */
  export type ReviewLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewLike.
     */
    data: XOR<ReviewLikeCreateInput, ReviewLikeUncheckedCreateInput>
  }

  /**
   * ReviewLike createMany
   */
  export type ReviewLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewLikes.
     */
    data: ReviewLikeCreateManyInput | ReviewLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewLike createManyAndReturn
   */
  export type ReviewLikeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewLikes.
     */
    data: ReviewLikeCreateManyInput | ReviewLikeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewLike update
   */
  export type ReviewLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewLike.
     */
    data: XOR<ReviewLikeUpdateInput, ReviewLikeUncheckedUpdateInput>
    /**
     * Choose, which ReviewLike to update.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike updateMany
   */
  export type ReviewLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewLikes.
     */
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyInput>
    /**
     * Filter which ReviewLikes to update
     */
    where?: ReviewLikeWhereInput
    /**
     * Limit how many ReviewLikes to update.
     */
    limit?: number
  }

  /**
   * ReviewLike updateManyAndReturn
   */
  export type ReviewLikeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * The data used to update ReviewLikes.
     */
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyInput>
    /**
     * Filter which ReviewLikes to update
     */
    where?: ReviewLikeWhereInput
    /**
     * Limit how many ReviewLikes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewLike upsert
   */
  export type ReviewLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewLike to update in case it exists.
     */
    where: ReviewLikeWhereUniqueInput
    /**
     * In case the ReviewLike found by the `where` argument doesn't exist, create a new ReviewLike with this data.
     */
    create: XOR<ReviewLikeCreateInput, ReviewLikeUncheckedCreateInput>
    /**
     * In case the ReviewLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewLikeUpdateInput, ReviewLikeUncheckedUpdateInput>
  }

  /**
   * ReviewLike delete
   */
  export type ReviewLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
    /**
     * Filter which ReviewLike to delete.
     */
    where: ReviewLikeWhereUniqueInput
  }

  /**
   * ReviewLike deleteMany
   */
  export type ReviewLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewLikes to delete
     */
    where?: ReviewLikeWhereInput
    /**
     * Limit how many ReviewLikes to delete.
     */
    limit?: number
  }

  /**
   * ReviewLike without action
   */
  export type ReviewLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewLike
     */
    select?: ReviewLikeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewLike
     */
    omit?: ReviewLikeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewLikeInclude<ExtArgs> | null
  }


  /**
   * Model Arena
   */

  export type AggregateArena = {
    _count: ArenaCountAggregateOutputType | null
    _avg: ArenaAvgAggregateOutputType | null
    _sum: ArenaSumAggregateOutputType | null
    _min: ArenaMinAggregateOutputType | null
    _max: ArenaMaxAggregateOutputType | null
  }

  export type ArenaAvgAggregateOutputType = {
    id: number | null
    status: number | null
  }

  export type ArenaSumAggregateOutputType = {
    id: number | null
    status: number | null
  }

  export type ArenaMinAggregateOutputType = {
    id: number | null
    creatorId: string | null
    challengerId: string | null
    title: string | null
    description: string | null
    status: number | null
    startDate: Date | null
  }

  export type ArenaMaxAggregateOutputType = {
    id: number | null
    creatorId: string | null
    challengerId: string | null
    title: string | null
    description: string | null
    status: number | null
    startDate: Date | null
  }

  export type ArenaCountAggregateOutputType = {
    id: number
    creatorId: number
    challengerId: number
    title: number
    description: number
    status: number
    startDate: number
    _all: number
  }


  export type ArenaAvgAggregateInputType = {
    id?: true
    status?: true
  }

  export type ArenaSumAggregateInputType = {
    id?: true
    status?: true
  }

  export type ArenaMinAggregateInputType = {
    id?: true
    creatorId?: true
    challengerId?: true
    title?: true
    description?: true
    status?: true
    startDate?: true
  }

  export type ArenaMaxAggregateInputType = {
    id?: true
    creatorId?: true
    challengerId?: true
    title?: true
    description?: true
    status?: true
    startDate?: true
  }

  export type ArenaCountAggregateInputType = {
    id?: true
    creatorId?: true
    challengerId?: true
    title?: true
    description?: true
    status?: true
    startDate?: true
    _all?: true
  }

  export type ArenaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arena to aggregate.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Arenas
    **/
    _count?: true | ArenaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ArenaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ArenaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArenaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArenaMaxAggregateInputType
  }

  export type GetArenaAggregateType<T extends ArenaAggregateArgs> = {
        [P in keyof T & keyof AggregateArena]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArena[P]>
      : GetScalarType<T[P], AggregateArena[P]>
  }




  export type ArenaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArenaWhereInput
    orderBy?: ArenaOrderByWithAggregationInput | ArenaOrderByWithAggregationInput[]
    by: ArenaScalarFieldEnum[] | ArenaScalarFieldEnum
    having?: ArenaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArenaCountAggregateInputType | true
    _avg?: ArenaAvgAggregateInputType
    _sum?: ArenaSumAggregateInputType
    _min?: ArenaMinAggregateInputType
    _max?: ArenaMaxAggregateInputType
  }

  export type ArenaGroupByOutputType = {
    id: number
    creatorId: string
    challengerId: string | null
    title: string
    description: string
    status: number
    startDate: Date
    _count: ArenaCountAggregateOutputType | null
    _avg: ArenaAvgAggregateOutputType | null
    _sum: ArenaSumAggregateOutputType | null
    _min: ArenaMinAggregateOutputType | null
    _max: ArenaMaxAggregateOutputType | null
  }

  type GetArenaGroupByPayload<T extends ArenaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArenaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArenaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArenaGroupByOutputType[P]>
            : GetScalarType<T[P], ArenaGroupByOutputType[P]>
        }
      >
    >


  export type ArenaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    challengerId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    challenger?: boolean | Arena$challengerArgs<ExtArgs>
    creator?: boolean | MemberDefaultArgs<ExtArgs>
    chattings?: boolean | Arena$chattingsArgs<ExtArgs>
    votes?: boolean | Arena$votesArgs<ExtArgs>
    _count?: boolean | ArenaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arena"]>

  export type ArenaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    challengerId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    challenger?: boolean | Arena$challengerArgs<ExtArgs>
    creator?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arena"]>

  export type ArenaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    creatorId?: boolean
    challengerId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
    challenger?: boolean | Arena$challengerArgs<ExtArgs>
    creator?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["arena"]>

  export type ArenaSelectScalar = {
    id?: boolean
    creatorId?: boolean
    challengerId?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    startDate?: boolean
  }

  export type ArenaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "creatorId" | "challengerId" | "title" | "description" | "status" | "startDate", ExtArgs["result"]["arena"]>
  export type ArenaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenger?: boolean | Arena$challengerArgs<ExtArgs>
    creator?: boolean | MemberDefaultArgs<ExtArgs>
    chattings?: boolean | Arena$chattingsArgs<ExtArgs>
    votes?: boolean | Arena$votesArgs<ExtArgs>
    _count?: boolean | ArenaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArenaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenger?: boolean | Arena$challengerArgs<ExtArgs>
    creator?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type ArenaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    challenger?: boolean | Arena$challengerArgs<ExtArgs>
    creator?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $ArenaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Arena"
    objects: {
      challenger: Prisma.$MemberPayload<ExtArgs> | null
      creator: Prisma.$MemberPayload<ExtArgs>
      chattings: Prisma.$ChattingPayload<ExtArgs>[]
      votes: Prisma.$VotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      creatorId: string
      challengerId: string | null
      title: string
      description: string
      status: number
      startDate: Date
    }, ExtArgs["result"]["arena"]>
    composites: {}
  }

  type ArenaGetPayload<S extends boolean | null | undefined | ArenaDefaultArgs> = $Result.GetResult<Prisma.$ArenaPayload, S>

  type ArenaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArenaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArenaCountAggregateInputType | true
    }

  export interface ArenaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Arena'], meta: { name: 'Arena' } }
    /**
     * Find zero or one Arena that matches the filter.
     * @param {ArenaFindUniqueArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArenaFindUniqueArgs>(args: SelectSubset<T, ArenaFindUniqueArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Arena that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArenaFindUniqueOrThrowArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArenaFindUniqueOrThrowArgs>(args: SelectSubset<T, ArenaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arena that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaFindFirstArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArenaFindFirstArgs>(args?: SelectSubset<T, ArenaFindFirstArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Arena that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaFindFirstOrThrowArgs} args - Arguments to find a Arena
     * @example
     * // Get one Arena
     * const arena = await prisma.arena.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArenaFindFirstOrThrowArgs>(args?: SelectSubset<T, ArenaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Arenas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Arenas
     * const arenas = await prisma.arena.findMany()
     * 
     * // Get first 10 Arenas
     * const arenas = await prisma.arena.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const arenaWithIdOnly = await prisma.arena.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArenaFindManyArgs>(args?: SelectSubset<T, ArenaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Arena.
     * @param {ArenaCreateArgs} args - Arguments to create a Arena.
     * @example
     * // Create one Arena
     * const Arena = await prisma.arena.create({
     *   data: {
     *     // ... data to create a Arena
     *   }
     * })
     * 
     */
    create<T extends ArenaCreateArgs>(args: SelectSubset<T, ArenaCreateArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Arenas.
     * @param {ArenaCreateManyArgs} args - Arguments to create many Arenas.
     * @example
     * // Create many Arenas
     * const arena = await prisma.arena.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArenaCreateManyArgs>(args?: SelectSubset<T, ArenaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Arenas and returns the data saved in the database.
     * @param {ArenaCreateManyAndReturnArgs} args - Arguments to create many Arenas.
     * @example
     * // Create many Arenas
     * const arena = await prisma.arena.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Arenas and only return the `id`
     * const arenaWithIdOnly = await prisma.arena.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArenaCreateManyAndReturnArgs>(args?: SelectSubset<T, ArenaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Arena.
     * @param {ArenaDeleteArgs} args - Arguments to delete one Arena.
     * @example
     * // Delete one Arena
     * const Arena = await prisma.arena.delete({
     *   where: {
     *     // ... filter to delete one Arena
     *   }
     * })
     * 
     */
    delete<T extends ArenaDeleteArgs>(args: SelectSubset<T, ArenaDeleteArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Arena.
     * @param {ArenaUpdateArgs} args - Arguments to update one Arena.
     * @example
     * // Update one Arena
     * const arena = await prisma.arena.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArenaUpdateArgs>(args: SelectSubset<T, ArenaUpdateArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Arenas.
     * @param {ArenaDeleteManyArgs} args - Arguments to filter Arenas to delete.
     * @example
     * // Delete a few Arenas
     * const { count } = await prisma.arena.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArenaDeleteManyArgs>(args?: SelectSubset<T, ArenaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Arenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Arenas
     * const arena = await prisma.arena.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArenaUpdateManyArgs>(args: SelectSubset<T, ArenaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Arenas and returns the data updated in the database.
     * @param {ArenaUpdateManyAndReturnArgs} args - Arguments to update many Arenas.
     * @example
     * // Update many Arenas
     * const arena = await prisma.arena.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Arenas and only return the `id`
     * const arenaWithIdOnly = await prisma.arena.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ArenaUpdateManyAndReturnArgs>(args: SelectSubset<T, ArenaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Arena.
     * @param {ArenaUpsertArgs} args - Arguments to update or create a Arena.
     * @example
     * // Update or create a Arena
     * const arena = await prisma.arena.upsert({
     *   create: {
     *     // ... data to create a Arena
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Arena we want to update
     *   }
     * })
     */
    upsert<T extends ArenaUpsertArgs>(args: SelectSubset<T, ArenaUpsertArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Arenas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaCountArgs} args - Arguments to filter Arenas to count.
     * @example
     * // Count the number of Arenas
     * const count = await prisma.arena.count({
     *   where: {
     *     // ... the filter for the Arenas we want to count
     *   }
     * })
    **/
    count<T extends ArenaCountArgs>(
      args?: Subset<T, ArenaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArenaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Arena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArenaAggregateArgs>(args: Subset<T, ArenaAggregateArgs>): Prisma.PrismaPromise<GetArenaAggregateType<T>>

    /**
     * Group by Arena.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArenaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArenaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArenaGroupByArgs['orderBy'] }
        : { orderBy?: ArenaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArenaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArenaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Arena model
   */
  readonly fields: ArenaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Arena.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArenaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    challenger<T extends Arena$challengerArgs<ExtArgs> = {}>(args?: Subset<T, Arena$challengerArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    creator<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chattings<T extends Arena$chattingsArgs<ExtArgs> = {}>(args?: Subset<T, Arena$chattingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    votes<T extends Arena$votesArgs<ExtArgs> = {}>(args?: Subset<T, Arena$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Arena model
   */
  interface ArenaFieldRefs {
    readonly id: FieldRef<"Arena", 'Int'>
    readonly creatorId: FieldRef<"Arena", 'String'>
    readonly challengerId: FieldRef<"Arena", 'String'>
    readonly title: FieldRef<"Arena", 'String'>
    readonly description: FieldRef<"Arena", 'String'>
    readonly status: FieldRef<"Arena", 'Int'>
    readonly startDate: FieldRef<"Arena", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Arena findUnique
   */
  export type ArenaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena findUniqueOrThrow
   */
  export type ArenaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena findFirst
   */
  export type ArenaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arenas.
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arenas.
     */
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Arena findFirstOrThrow
   */
  export type ArenaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arena to fetch.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Arenas.
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Arenas.
     */
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Arena findMany
   */
  export type ArenaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter, which Arenas to fetch.
     */
    where?: ArenaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Arenas to fetch.
     */
    orderBy?: ArenaOrderByWithRelationInput | ArenaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Arenas.
     */
    cursor?: ArenaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Arenas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Arenas.
     */
    skip?: number
    distinct?: ArenaScalarFieldEnum | ArenaScalarFieldEnum[]
  }

  /**
   * Arena create
   */
  export type ArenaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * The data needed to create a Arena.
     */
    data: XOR<ArenaCreateInput, ArenaUncheckedCreateInput>
  }

  /**
   * Arena createMany
   */
  export type ArenaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Arenas.
     */
    data: ArenaCreateManyInput | ArenaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Arena createManyAndReturn
   */
  export type ArenaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * The data used to create many Arenas.
     */
    data: ArenaCreateManyInput | ArenaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Arena update
   */
  export type ArenaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * The data needed to update a Arena.
     */
    data: XOR<ArenaUpdateInput, ArenaUncheckedUpdateInput>
    /**
     * Choose, which Arena to update.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena updateMany
   */
  export type ArenaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Arenas.
     */
    data: XOR<ArenaUpdateManyMutationInput, ArenaUncheckedUpdateManyInput>
    /**
     * Filter which Arenas to update
     */
    where?: ArenaWhereInput
    /**
     * Limit how many Arenas to update.
     */
    limit?: number
  }

  /**
   * Arena updateManyAndReturn
   */
  export type ArenaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * The data used to update Arenas.
     */
    data: XOR<ArenaUpdateManyMutationInput, ArenaUncheckedUpdateManyInput>
    /**
     * Filter which Arenas to update
     */
    where?: ArenaWhereInput
    /**
     * Limit how many Arenas to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Arena upsert
   */
  export type ArenaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * The filter to search for the Arena to update in case it exists.
     */
    where: ArenaWhereUniqueInput
    /**
     * In case the Arena found by the `where` argument doesn't exist, create a new Arena with this data.
     */
    create: XOR<ArenaCreateInput, ArenaUncheckedCreateInput>
    /**
     * In case the Arena was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArenaUpdateInput, ArenaUncheckedUpdateInput>
  }

  /**
   * Arena delete
   */
  export type ArenaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
    /**
     * Filter which Arena to delete.
     */
    where: ArenaWhereUniqueInput
  }

  /**
   * Arena deleteMany
   */
  export type ArenaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Arenas to delete
     */
    where?: ArenaWhereInput
    /**
     * Limit how many Arenas to delete.
     */
    limit?: number
  }

  /**
   * Arena.challenger
   */
  export type Arena$challengerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Member
     */
    omit?: MemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
  }

  /**
   * Arena.chattings
   */
  export type Arena$chattingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    where?: ChattingWhereInput
    orderBy?: ChattingOrderByWithRelationInput | ChattingOrderByWithRelationInput[]
    cursor?: ChattingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChattingScalarFieldEnum | ChattingScalarFieldEnum[]
  }

  /**
   * Arena.votes
   */
  export type Arena$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Arena without action
   */
  export type ArenaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Arena
     */
    select?: ArenaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Arena
     */
    omit?: ArenaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArenaInclude<ExtArgs> | null
  }


  /**
   * Model Chatting
   */

  export type AggregateChatting = {
    _count: ChattingCountAggregateOutputType | null
    _avg: ChattingAvgAggregateOutputType | null
    _sum: ChattingSumAggregateOutputType | null
    _min: ChattingMinAggregateOutputType | null
    _max: ChattingMaxAggregateOutputType | null
  }

  export type ChattingAvgAggregateOutputType = {
    id: number | null
    arenaId: number | null
  }

  export type ChattingSumAggregateOutputType = {
    id: number | null
    arenaId: number | null
  }

  export type ChattingMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    arenaId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ChattingMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    arenaId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ChattingCountAggregateOutputType = {
    id: number
    memberId: number
    arenaId: number
    content: number
    createdAt: number
    _all: number
  }


  export type ChattingAvgAggregateInputType = {
    id?: true
    arenaId?: true
  }

  export type ChattingSumAggregateInputType = {
    id?: true
    arenaId?: true
  }

  export type ChattingMinAggregateInputType = {
    id?: true
    memberId?: true
    arenaId?: true
    content?: true
    createdAt?: true
  }

  export type ChattingMaxAggregateInputType = {
    id?: true
    memberId?: true
    arenaId?: true
    content?: true
    createdAt?: true
  }

  export type ChattingCountAggregateInputType = {
    id?: true
    memberId?: true
    arenaId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type ChattingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chatting to aggregate.
     */
    where?: ChattingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chattings to fetch.
     */
    orderBy?: ChattingOrderByWithRelationInput | ChattingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChattingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chattings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chattings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chattings
    **/
    _count?: true | ChattingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChattingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChattingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChattingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChattingMaxAggregateInputType
  }

  export type GetChattingAggregateType<T extends ChattingAggregateArgs> = {
        [P in keyof T & keyof AggregateChatting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatting[P]>
      : GetScalarType<T[P], AggregateChatting[P]>
  }




  export type ChattingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChattingWhereInput
    orderBy?: ChattingOrderByWithAggregationInput | ChattingOrderByWithAggregationInput[]
    by: ChattingScalarFieldEnum[] | ChattingScalarFieldEnum
    having?: ChattingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChattingCountAggregateInputType | true
    _avg?: ChattingAvgAggregateInputType
    _sum?: ChattingSumAggregateInputType
    _min?: ChattingMinAggregateInputType
    _max?: ChattingMaxAggregateInputType
  }

  export type ChattingGroupByOutputType = {
    id: number
    memberId: string
    arenaId: number
    content: string
    createdAt: Date
    _count: ChattingCountAggregateOutputType | null
    _avg: ChattingAvgAggregateOutputType | null
    _sum: ChattingSumAggregateOutputType | null
    _min: ChattingMinAggregateOutputType | null
    _max: ChattingMaxAggregateOutputType | null
  }

  type GetChattingGroupByPayload<T extends ChattingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChattingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChattingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChattingGroupByOutputType[P]>
            : GetScalarType<T[P], ChattingGroupByOutputType[P]>
        }
      >
    >


  export type ChattingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    content?: boolean
    createdAt?: boolean
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatting"]>

  export type ChattingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    content?: boolean
    createdAt?: boolean
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatting"]>

  export type ChattingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    content?: boolean
    createdAt?: boolean
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatting"]>

  export type ChattingSelectScalar = {
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type ChattingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "arenaId" | "content" | "createdAt", ExtArgs["result"]["chatting"]>
  export type ChattingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type ChattingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type ChattingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $ChattingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chatting"
    objects: {
      arena: Prisma.$ArenaPayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      arenaId: number
      content: string
      createdAt: Date
    }, ExtArgs["result"]["chatting"]>
    composites: {}
  }

  type ChattingGetPayload<S extends boolean | null | undefined | ChattingDefaultArgs> = $Result.GetResult<Prisma.$ChattingPayload, S>

  type ChattingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChattingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChattingCountAggregateInputType | true
    }

  export interface ChattingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chatting'], meta: { name: 'Chatting' } }
    /**
     * Find zero or one Chatting that matches the filter.
     * @param {ChattingFindUniqueArgs} args - Arguments to find a Chatting
     * @example
     * // Get one Chatting
     * const chatting = await prisma.chatting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChattingFindUniqueArgs>(args: SelectSubset<T, ChattingFindUniqueArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Chatting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChattingFindUniqueOrThrowArgs} args - Arguments to find a Chatting
     * @example
     * // Get one Chatting
     * const chatting = await prisma.chatting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChattingFindUniqueOrThrowArgs>(args: SelectSubset<T, ChattingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chatting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingFindFirstArgs} args - Arguments to find a Chatting
     * @example
     * // Get one Chatting
     * const chatting = await prisma.chatting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChattingFindFirstArgs>(args?: SelectSubset<T, ChattingFindFirstArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Chatting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingFindFirstOrThrowArgs} args - Arguments to find a Chatting
     * @example
     * // Get one Chatting
     * const chatting = await prisma.chatting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChattingFindFirstOrThrowArgs>(args?: SelectSubset<T, ChattingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Chattings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chattings
     * const chattings = await prisma.chatting.findMany()
     * 
     * // Get first 10 Chattings
     * const chattings = await prisma.chatting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chattingWithIdOnly = await prisma.chatting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChattingFindManyArgs>(args?: SelectSubset<T, ChattingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Chatting.
     * @param {ChattingCreateArgs} args - Arguments to create a Chatting.
     * @example
     * // Create one Chatting
     * const Chatting = await prisma.chatting.create({
     *   data: {
     *     // ... data to create a Chatting
     *   }
     * })
     * 
     */
    create<T extends ChattingCreateArgs>(args: SelectSubset<T, ChattingCreateArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Chattings.
     * @param {ChattingCreateManyArgs} args - Arguments to create many Chattings.
     * @example
     * // Create many Chattings
     * const chatting = await prisma.chatting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChattingCreateManyArgs>(args?: SelectSubset<T, ChattingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Chattings and returns the data saved in the database.
     * @param {ChattingCreateManyAndReturnArgs} args - Arguments to create many Chattings.
     * @example
     * // Create many Chattings
     * const chatting = await prisma.chatting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Chattings and only return the `id`
     * const chattingWithIdOnly = await prisma.chatting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChattingCreateManyAndReturnArgs>(args?: SelectSubset<T, ChattingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Chatting.
     * @param {ChattingDeleteArgs} args - Arguments to delete one Chatting.
     * @example
     * // Delete one Chatting
     * const Chatting = await prisma.chatting.delete({
     *   where: {
     *     // ... filter to delete one Chatting
     *   }
     * })
     * 
     */
    delete<T extends ChattingDeleteArgs>(args: SelectSubset<T, ChattingDeleteArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Chatting.
     * @param {ChattingUpdateArgs} args - Arguments to update one Chatting.
     * @example
     * // Update one Chatting
     * const chatting = await prisma.chatting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChattingUpdateArgs>(args: SelectSubset<T, ChattingUpdateArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Chattings.
     * @param {ChattingDeleteManyArgs} args - Arguments to filter Chattings to delete.
     * @example
     * // Delete a few Chattings
     * const { count } = await prisma.chatting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChattingDeleteManyArgs>(args?: SelectSubset<T, ChattingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chattings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chattings
     * const chatting = await prisma.chatting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChattingUpdateManyArgs>(args: SelectSubset<T, ChattingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chattings and returns the data updated in the database.
     * @param {ChattingUpdateManyAndReturnArgs} args - Arguments to update many Chattings.
     * @example
     * // Update many Chattings
     * const chatting = await prisma.chatting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Chattings and only return the `id`
     * const chattingWithIdOnly = await prisma.chatting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChattingUpdateManyAndReturnArgs>(args: SelectSubset<T, ChattingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Chatting.
     * @param {ChattingUpsertArgs} args - Arguments to update or create a Chatting.
     * @example
     * // Update or create a Chatting
     * const chatting = await prisma.chatting.upsert({
     *   create: {
     *     // ... data to create a Chatting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chatting we want to update
     *   }
     * })
     */
    upsert<T extends ChattingUpsertArgs>(args: SelectSubset<T, ChattingUpsertArgs<ExtArgs>>): Prisma__ChattingClient<$Result.GetResult<Prisma.$ChattingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Chattings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingCountArgs} args - Arguments to filter Chattings to count.
     * @example
     * // Count the number of Chattings
     * const count = await prisma.chatting.count({
     *   where: {
     *     // ... the filter for the Chattings we want to count
     *   }
     * })
    **/
    count<T extends ChattingCountArgs>(
      args?: Subset<T, ChattingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChattingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chatting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChattingAggregateArgs>(args: Subset<T, ChattingAggregateArgs>): Prisma.PrismaPromise<GetChattingAggregateType<T>>

    /**
     * Group by Chatting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChattingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChattingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChattingGroupByArgs['orderBy'] }
        : { orderBy?: ChattingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChattingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChattingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chatting model
   */
  readonly fields: ChattingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chatting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChattingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arena<T extends ArenaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArenaDefaultArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Chatting model
   */
  interface ChattingFieldRefs {
    readonly id: FieldRef<"Chatting", 'Int'>
    readonly memberId: FieldRef<"Chatting", 'String'>
    readonly arenaId: FieldRef<"Chatting", 'Int'>
    readonly content: FieldRef<"Chatting", 'String'>
    readonly createdAt: FieldRef<"Chatting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Chatting findUnique
   */
  export type ChattingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * Filter, which Chatting to fetch.
     */
    where: ChattingWhereUniqueInput
  }

  /**
   * Chatting findUniqueOrThrow
   */
  export type ChattingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * Filter, which Chatting to fetch.
     */
    where: ChattingWhereUniqueInput
  }

  /**
   * Chatting findFirst
   */
  export type ChattingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * Filter, which Chatting to fetch.
     */
    where?: ChattingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chattings to fetch.
     */
    orderBy?: ChattingOrderByWithRelationInput | ChattingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chattings.
     */
    cursor?: ChattingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chattings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chattings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chattings.
     */
    distinct?: ChattingScalarFieldEnum | ChattingScalarFieldEnum[]
  }

  /**
   * Chatting findFirstOrThrow
   */
  export type ChattingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * Filter, which Chatting to fetch.
     */
    where?: ChattingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chattings to fetch.
     */
    orderBy?: ChattingOrderByWithRelationInput | ChattingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chattings.
     */
    cursor?: ChattingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chattings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chattings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chattings.
     */
    distinct?: ChattingScalarFieldEnum | ChattingScalarFieldEnum[]
  }

  /**
   * Chatting findMany
   */
  export type ChattingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * Filter, which Chattings to fetch.
     */
    where?: ChattingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chattings to fetch.
     */
    orderBy?: ChattingOrderByWithRelationInput | ChattingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chattings.
     */
    cursor?: ChattingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chattings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chattings.
     */
    skip?: number
    distinct?: ChattingScalarFieldEnum | ChattingScalarFieldEnum[]
  }

  /**
   * Chatting create
   */
  export type ChattingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * The data needed to create a Chatting.
     */
    data: XOR<ChattingCreateInput, ChattingUncheckedCreateInput>
  }

  /**
   * Chatting createMany
   */
  export type ChattingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chattings.
     */
    data: ChattingCreateManyInput | ChattingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Chatting createManyAndReturn
   */
  export type ChattingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * The data used to create many Chattings.
     */
    data: ChattingCreateManyInput | ChattingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chatting update
   */
  export type ChattingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * The data needed to update a Chatting.
     */
    data: XOR<ChattingUpdateInput, ChattingUncheckedUpdateInput>
    /**
     * Choose, which Chatting to update.
     */
    where: ChattingWhereUniqueInput
  }

  /**
   * Chatting updateMany
   */
  export type ChattingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chattings.
     */
    data: XOR<ChattingUpdateManyMutationInput, ChattingUncheckedUpdateManyInput>
    /**
     * Filter which Chattings to update
     */
    where?: ChattingWhereInput
    /**
     * Limit how many Chattings to update.
     */
    limit?: number
  }

  /**
   * Chatting updateManyAndReturn
   */
  export type ChattingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * The data used to update Chattings.
     */
    data: XOR<ChattingUpdateManyMutationInput, ChattingUncheckedUpdateManyInput>
    /**
     * Filter which Chattings to update
     */
    where?: ChattingWhereInput
    /**
     * Limit how many Chattings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Chatting upsert
   */
  export type ChattingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * The filter to search for the Chatting to update in case it exists.
     */
    where: ChattingWhereUniqueInput
    /**
     * In case the Chatting found by the `where` argument doesn't exist, create a new Chatting with this data.
     */
    create: XOR<ChattingCreateInput, ChattingUncheckedCreateInput>
    /**
     * In case the Chatting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChattingUpdateInput, ChattingUncheckedUpdateInput>
  }

  /**
   * Chatting delete
   */
  export type ChattingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
    /**
     * Filter which Chatting to delete.
     */
    where: ChattingWhereUniqueInput
  }

  /**
   * Chatting deleteMany
   */
  export type ChattingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chattings to delete
     */
    where?: ChattingWhereInput
    /**
     * Limit how many Chattings to delete.
     */
    limit?: number
  }

  /**
   * Chatting without action
   */
  export type ChattingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chatting
     */
    select?: ChattingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Chatting
     */
    omit?: ChattingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChattingInclude<ExtArgs> | null
  }


  /**
   * Model Vote
   */

  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    id: number | null
    arenaId: number | null
  }

  export type VoteSumAggregateOutputType = {
    id: number | null
    arenaId: number | null
  }

  export type VoteMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    arenaId: number | null
    votedTo: string | null
  }

  export type VoteMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    arenaId: number | null
    votedTo: string | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    memberId: number
    arenaId: number
    votedTo: number
    _all: number
  }


  export type VoteAvgAggregateInputType = {
    id?: true
    arenaId?: true
  }

  export type VoteSumAggregateInputType = {
    id?: true
    arenaId?: true
  }

  export type VoteMinAggregateInputType = {
    id?: true
    memberId?: true
    arenaId?: true
    votedTo?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    memberId?: true
    arenaId?: true
    votedTo?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    memberId?: true
    arenaId?: true
    votedTo?: true
    _all?: true
  }

  export type VoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vote to aggregate.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithAggregationInput | VoteOrderByWithAggregationInput[]
    by: VoteScalarFieldEnum[] | VoteScalarFieldEnum
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _avg?: VoteAvgAggregateInputType
    _sum?: VoteSumAggregateInputType
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }

  export type VoteGroupByOutputType = {
    id: number
    memberId: string
    arenaId: number
    votedTo: string
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    votedTo?: boolean
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    votedTo?: boolean
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    votedTo?: boolean
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectScalar = {
    id?: boolean
    memberId?: boolean
    arenaId?: boolean
    votedTo?: boolean
  }

  export type VoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "arenaId" | "votedTo", ExtArgs["result"]["vote"]>
  export type VoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type VoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type VoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    arena?: boolean | ArenaDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $VotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vote"
    objects: {
      arena: Prisma.$ArenaPayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      arenaId: number
      votedTo: string
    }, ExtArgs["result"]["vote"]>
    composites: {}
  }

  type VoteGetPayload<S extends boolean | null | undefined | VoteDefaultArgs> = $Result.GetResult<Prisma.$VotePayload, S>

  type VoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VoteCountAggregateInputType | true
    }

  export interface VoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vote'], meta: { name: 'Vote' } }
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteFindUniqueArgs>(args: SelectSubset<T, VoteFindUniqueArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vote that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteFindFirstArgs>(args?: SelectSubset<T, VoteFindFirstArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoteFindManyArgs>(args?: SelectSubset<T, VoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
     */
    create<T extends VoteCreateArgs>(args: SelectSubset<T, VoteCreateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Votes.
     * @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteCreateManyArgs>(args?: SelectSubset<T, VoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Votes and returns the data saved in the database.
     * @param {VoteCreateManyAndReturnArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Votes and only return the `id`
     * const voteWithIdOnly = await prisma.vote.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
     */
    delete<T extends VoteDeleteArgs>(args: SelectSubset<T, VoteDeleteArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteUpdateArgs>(args: SelectSubset<T, VoteUpdateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteDeleteManyArgs>(args?: SelectSubset<T, VoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteUpdateManyArgs>(args: SelectSubset<T, VoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes and returns the data updated in the database.
     * @param {VoteUpdateManyAndReturnArgs} args - Arguments to update many Votes.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Votes and only return the `id`
     * const voteWithIdOnly = await prisma.vote.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VoteUpdateManyAndReturnArgs>(args: SelectSubset<T, VoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
     */
    upsert<T extends VoteUpsertArgs>(args: SelectSubset<T, VoteUpsertArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): Prisma.PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vote model
   */
  readonly fields: VoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    arena<T extends ArenaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArenaDefaultArgs<ExtArgs>>): Prisma__ArenaClient<$Result.GetResult<Prisma.$ArenaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vote model
   */
  interface VoteFieldRefs {
    readonly id: FieldRef<"Vote", 'Int'>
    readonly memberId: FieldRef<"Vote", 'String'>
    readonly arenaId: FieldRef<"Vote", 'Int'>
    readonly votedTo: FieldRef<"Vote", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findMany
   */
  export type VoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Votes to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote create
   */
  export type VoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Vote.
     */
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }

  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vote createManyAndReturn
   */
  export type VoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vote update
   */
  export type VoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Vote.
     */
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
    /**
     * Limit how many Votes to update.
     */
    limit?: number
  }

  /**
   * Vote updateManyAndReturn
   */
  export type VoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
    /**
     * Limit how many Votes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vote upsert
   */
  export type VoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Vote to update in case it exists.
     */
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     */
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }

  /**
   * Vote delete
   */
  export type VoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter which Vote to delete.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votes to delete
     */
    where?: VoteWhereInput
    /**
     * Limit how many Votes to delete.
     */
    limit?: number
  }

  /**
   * Vote without action
   */
  export type VoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vote
     */
    omit?: VoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
  }


  /**
   * Model NotificationType
   */

  export type AggregateNotificationType = {
    _count: NotificationTypeCountAggregateOutputType | null
    _avg: NotificationTypeAvgAggregateOutputType | null
    _sum: NotificationTypeSumAggregateOutputType | null
    _min: NotificationTypeMinAggregateOutputType | null
    _max: NotificationTypeMaxAggregateOutputType | null
  }

  export type NotificationTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationTypeSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    imageUrl: string | null
  }

  export type NotificationTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    imageUrl: string | null
  }

  export type NotificationTypeCountAggregateOutputType = {
    id: number
    name: number
    imageUrl: number
    _all: number
  }


  export type NotificationTypeAvgAggregateInputType = {
    id?: true
  }

  export type NotificationTypeSumAggregateInputType = {
    id?: true
  }

  export type NotificationTypeMinAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
  }

  export type NotificationTypeMaxAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
  }

  export type NotificationTypeCountAggregateInputType = {
    id?: true
    name?: true
    imageUrl?: true
    _all?: true
  }

  export type NotificationTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationType to aggregate.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationTypes
    **/
    _count?: true | NotificationTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationTypeMaxAggregateInputType
  }

  export type GetNotificationTypeAggregateType<T extends NotificationTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationType[P]>
      : GetScalarType<T[P], AggregateNotificationType[P]>
  }




  export type NotificationTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationTypeWhereInput
    orderBy?: NotificationTypeOrderByWithAggregationInput | NotificationTypeOrderByWithAggregationInput[]
    by: NotificationTypeScalarFieldEnum[] | NotificationTypeScalarFieldEnum
    having?: NotificationTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationTypeCountAggregateInputType | true
    _avg?: NotificationTypeAvgAggregateInputType
    _sum?: NotificationTypeSumAggregateInputType
    _min?: NotificationTypeMinAggregateInputType
    _max?: NotificationTypeMaxAggregateInputType
  }

  export type NotificationTypeGroupByOutputType = {
    id: number
    name: string
    imageUrl: string
    _count: NotificationTypeCountAggregateOutputType | null
    _avg: NotificationTypeAvgAggregateOutputType | null
    _sum: NotificationTypeSumAggregateOutputType | null
    _min: NotificationTypeMinAggregateOutputType | null
    _max: NotificationTypeMaxAggregateOutputType | null
  }

  type GetNotificationTypeGroupByPayload<T extends NotificationTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationTypeGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationTypeGroupByOutputType[P]>
        }
      >
    >


  export type NotificationTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
    notificationRecords?: boolean | NotificationType$notificationRecordsArgs<ExtArgs>
    _count?: boolean | NotificationTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationType"]>

  export type NotificationTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["notificationType"]>

  export type NotificationTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["notificationType"]>

  export type NotificationTypeSelectScalar = {
    id?: boolean
    name?: boolean
    imageUrl?: boolean
  }

  export type NotificationTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "imageUrl", ExtArgs["result"]["notificationType"]>
  export type NotificationTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notificationRecords?: boolean | NotificationType$notificationRecordsArgs<ExtArgs>
    _count?: boolean | NotificationTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NotificationTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type NotificationTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NotificationTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationType"
    objects: {
      notificationRecords: Prisma.$NotificationRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      imageUrl: string
    }, ExtArgs["result"]["notificationType"]>
    composites: {}
  }

  type NotificationTypeGetPayload<S extends boolean | null | undefined | NotificationTypeDefaultArgs> = $Result.GetResult<Prisma.$NotificationTypePayload, S>

  type NotificationTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationTypeCountAggregateInputType | true
    }

  export interface NotificationTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationType'], meta: { name: 'NotificationType' } }
    /**
     * Find zero or one NotificationType that matches the filter.
     * @param {NotificationTypeFindUniqueArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationTypeFindUniqueArgs>(args: SelectSubset<T, NotificationTypeFindUniqueArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationTypeFindUniqueOrThrowArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeFindFirstArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationTypeFindFirstArgs>(args?: SelectSubset<T, NotificationTypeFindFirstArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeFindFirstOrThrowArgs} args - Arguments to find a NotificationType
     * @example
     * // Get one NotificationType
     * const notificationType = await prisma.notificationType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationTypes
     * const notificationTypes = await prisma.notificationType.findMany()
     * 
     * // Get first 10 NotificationTypes
     * const notificationTypes = await prisma.notificationType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationTypeWithIdOnly = await prisma.notificationType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationTypeFindManyArgs>(args?: SelectSubset<T, NotificationTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationType.
     * @param {NotificationTypeCreateArgs} args - Arguments to create a NotificationType.
     * @example
     * // Create one NotificationType
     * const NotificationType = await prisma.notificationType.create({
     *   data: {
     *     // ... data to create a NotificationType
     *   }
     * })
     * 
     */
    create<T extends NotificationTypeCreateArgs>(args: SelectSubset<T, NotificationTypeCreateArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationTypes.
     * @param {NotificationTypeCreateManyArgs} args - Arguments to create many NotificationTypes.
     * @example
     * // Create many NotificationTypes
     * const notificationType = await prisma.notificationType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationTypeCreateManyArgs>(args?: SelectSubset<T, NotificationTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationTypes and returns the data saved in the database.
     * @param {NotificationTypeCreateManyAndReturnArgs} args - Arguments to create many NotificationTypes.
     * @example
     * // Create many NotificationTypes
     * const notificationType = await prisma.notificationType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationTypes and only return the `id`
     * const notificationTypeWithIdOnly = await prisma.notificationType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationType.
     * @param {NotificationTypeDeleteArgs} args - Arguments to delete one NotificationType.
     * @example
     * // Delete one NotificationType
     * const NotificationType = await prisma.notificationType.delete({
     *   where: {
     *     // ... filter to delete one NotificationType
     *   }
     * })
     * 
     */
    delete<T extends NotificationTypeDeleteArgs>(args: SelectSubset<T, NotificationTypeDeleteArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationType.
     * @param {NotificationTypeUpdateArgs} args - Arguments to update one NotificationType.
     * @example
     * // Update one NotificationType
     * const notificationType = await prisma.notificationType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationTypeUpdateArgs>(args: SelectSubset<T, NotificationTypeUpdateArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationTypes.
     * @param {NotificationTypeDeleteManyArgs} args - Arguments to filter NotificationTypes to delete.
     * @example
     * // Delete a few NotificationTypes
     * const { count } = await prisma.notificationType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationTypeDeleteManyArgs>(args?: SelectSubset<T, NotificationTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationTypes
     * const notificationType = await prisma.notificationType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationTypeUpdateManyArgs>(args: SelectSubset<T, NotificationTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationTypes and returns the data updated in the database.
     * @param {NotificationTypeUpdateManyAndReturnArgs} args - Arguments to update many NotificationTypes.
     * @example
     * // Update many NotificationTypes
     * const notificationType = await prisma.notificationType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationTypes and only return the `id`
     * const notificationTypeWithIdOnly = await prisma.notificationType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationType.
     * @param {NotificationTypeUpsertArgs} args - Arguments to update or create a NotificationType.
     * @example
     * // Update or create a NotificationType
     * const notificationType = await prisma.notificationType.upsert({
     *   create: {
     *     // ... data to create a NotificationType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationType we want to update
     *   }
     * })
     */
    upsert<T extends NotificationTypeUpsertArgs>(args: SelectSubset<T, NotificationTypeUpsertArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeCountArgs} args - Arguments to filter NotificationTypes to count.
     * @example
     * // Count the number of NotificationTypes
     * const count = await prisma.notificationType.count({
     *   where: {
     *     // ... the filter for the NotificationTypes we want to count
     *   }
     * })
    **/
    count<T extends NotificationTypeCountArgs>(
      args?: Subset<T, NotificationTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationTypeAggregateArgs>(args: Subset<T, NotificationTypeAggregateArgs>): Prisma.PrismaPromise<GetNotificationTypeAggregateType<T>>

    /**
     * Group by NotificationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationTypeGroupByArgs['orderBy'] }
        : { orderBy?: NotificationTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationType model
   */
  readonly fields: NotificationTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    notificationRecords<T extends NotificationType$notificationRecordsArgs<ExtArgs> = {}>(args?: Subset<T, NotificationType$notificationRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationType model
   */
  interface NotificationTypeFieldRefs {
    readonly id: FieldRef<"NotificationType", 'Int'>
    readonly name: FieldRef<"NotificationType", 'String'>
    readonly imageUrl: FieldRef<"NotificationType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationType findUnique
   */
  export type NotificationTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType findUniqueOrThrow
   */
  export type NotificationTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType findFirst
   */
  export type NotificationTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTypes.
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTypes.
     */
    distinct?: NotificationTypeScalarFieldEnum | NotificationTypeScalarFieldEnum[]
  }

  /**
   * NotificationType findFirstOrThrow
   */
  export type NotificationTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationType to fetch.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationTypes.
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationTypes.
     */
    distinct?: NotificationTypeScalarFieldEnum | NotificationTypeScalarFieldEnum[]
  }

  /**
   * NotificationType findMany
   */
  export type NotificationTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter, which NotificationTypes to fetch.
     */
    where?: NotificationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationTypes to fetch.
     */
    orderBy?: NotificationTypeOrderByWithRelationInput | NotificationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationTypes.
     */
    cursor?: NotificationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationTypes.
     */
    skip?: number
    distinct?: NotificationTypeScalarFieldEnum | NotificationTypeScalarFieldEnum[]
  }

  /**
   * NotificationType create
   */
  export type NotificationTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationType.
     */
    data: XOR<NotificationTypeCreateInput, NotificationTypeUncheckedCreateInput>
  }

  /**
   * NotificationType createMany
   */
  export type NotificationTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationTypes.
     */
    data: NotificationTypeCreateManyInput | NotificationTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationType createManyAndReturn
   */
  export type NotificationTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationTypes.
     */
    data: NotificationTypeCreateManyInput | NotificationTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationType update
   */
  export type NotificationTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationType.
     */
    data: XOR<NotificationTypeUpdateInput, NotificationTypeUncheckedUpdateInput>
    /**
     * Choose, which NotificationType to update.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType updateMany
   */
  export type NotificationTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationTypes.
     */
    data: XOR<NotificationTypeUpdateManyMutationInput, NotificationTypeUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTypes to update
     */
    where?: NotificationTypeWhereInput
    /**
     * Limit how many NotificationTypes to update.
     */
    limit?: number
  }

  /**
   * NotificationType updateManyAndReturn
   */
  export type NotificationTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * The data used to update NotificationTypes.
     */
    data: XOR<NotificationTypeUpdateManyMutationInput, NotificationTypeUncheckedUpdateManyInput>
    /**
     * Filter which NotificationTypes to update
     */
    where?: NotificationTypeWhereInput
    /**
     * Limit how many NotificationTypes to update.
     */
    limit?: number
  }

  /**
   * NotificationType upsert
   */
  export type NotificationTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationType to update in case it exists.
     */
    where: NotificationTypeWhereUniqueInput
    /**
     * In case the NotificationType found by the `where` argument doesn't exist, create a new NotificationType with this data.
     */
    create: XOR<NotificationTypeCreateInput, NotificationTypeUncheckedCreateInput>
    /**
     * In case the NotificationType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationTypeUpdateInput, NotificationTypeUncheckedUpdateInput>
  }

  /**
   * NotificationType delete
   */
  export type NotificationTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
    /**
     * Filter which NotificationType to delete.
     */
    where: NotificationTypeWhereUniqueInput
  }

  /**
   * NotificationType deleteMany
   */
  export type NotificationTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationTypes to delete
     */
    where?: NotificationTypeWhereInput
    /**
     * Limit how many NotificationTypes to delete.
     */
    limit?: number
  }

  /**
   * NotificationType.notificationRecords
   */
  export type NotificationType$notificationRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    where?: NotificationRecordWhereInput
    orderBy?: NotificationRecordOrderByWithRelationInput | NotificationRecordOrderByWithRelationInput[]
    cursor?: NotificationRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationRecordScalarFieldEnum | NotificationRecordScalarFieldEnum[]
  }

  /**
   * NotificationType without action
   */
  export type NotificationTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationType
     */
    select?: NotificationTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationType
     */
    omit?: NotificationTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationTypeInclude<ExtArgs> | null
  }


  /**
   * Model NotificationRecord
   */

  export type AggregateNotificationRecord = {
    _count: NotificationRecordCountAggregateOutputType | null
    _avg: NotificationRecordAvgAggregateOutputType | null
    _sum: NotificationRecordSumAggregateOutputType | null
    _min: NotificationRecordMinAggregateOutputType | null
    _max: NotificationRecordMaxAggregateOutputType | null
  }

  export type NotificationRecordAvgAggregateOutputType = {
    id: number | null
    typeId: number | null
  }

  export type NotificationRecordSumAggregateOutputType = {
    id: number | null
    typeId: number | null
  }

  export type NotificationRecordMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    typeId: number | null
    description: string | null
    createdAt: Date | null
  }

  export type NotificationRecordMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    typeId: number | null
    description: string | null
    createdAt: Date | null
  }

  export type NotificationRecordCountAggregateOutputType = {
    id: number
    memberId: number
    typeId: number
    description: number
    createdAt: number
    _all: number
  }


  export type NotificationRecordAvgAggregateInputType = {
    id?: true
    typeId?: true
  }

  export type NotificationRecordSumAggregateInputType = {
    id?: true
    typeId?: true
  }

  export type NotificationRecordMinAggregateInputType = {
    id?: true
    memberId?: true
    typeId?: true
    description?: true
    createdAt?: true
  }

  export type NotificationRecordMaxAggregateInputType = {
    id?: true
    memberId?: true
    typeId?: true
    description?: true
    createdAt?: true
  }

  export type NotificationRecordCountAggregateInputType = {
    id?: true
    memberId?: true
    typeId?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationRecord to aggregate.
     */
    where?: NotificationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRecords to fetch.
     */
    orderBy?: NotificationRecordOrderByWithRelationInput | NotificationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationRecords
    **/
    _count?: true | NotificationRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationRecordMaxAggregateInputType
  }

  export type GetNotificationRecordAggregateType<T extends NotificationRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationRecord[P]>
      : GetScalarType<T[P], AggregateNotificationRecord[P]>
  }




  export type NotificationRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationRecordWhereInput
    orderBy?: NotificationRecordOrderByWithAggregationInput | NotificationRecordOrderByWithAggregationInput[]
    by: NotificationRecordScalarFieldEnum[] | NotificationRecordScalarFieldEnum
    having?: NotificationRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationRecordCountAggregateInputType | true
    _avg?: NotificationRecordAvgAggregateInputType
    _sum?: NotificationRecordSumAggregateInputType
    _min?: NotificationRecordMinAggregateInputType
    _max?: NotificationRecordMaxAggregateInputType
  }

  export type NotificationRecordGroupByOutputType = {
    id: number
    memberId: string
    typeId: number
    description: string
    createdAt: Date
    _count: NotificationRecordCountAggregateOutputType | null
    _avg: NotificationRecordAvgAggregateOutputType | null
    _sum: NotificationRecordSumAggregateOutputType | null
    _min: NotificationRecordMinAggregateOutputType | null
    _max: NotificationRecordMaxAggregateOutputType | null
  }

  type GetNotificationRecordGroupByPayload<T extends NotificationRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationRecordGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationRecordGroupByOutputType[P]>
        }
      >
    >


  export type NotificationRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    typeId?: boolean
    description?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    type?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRecord"]>

  export type NotificationRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    typeId?: boolean
    description?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    type?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRecord"]>

  export type NotificationRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    typeId?: boolean
    description?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    type?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationRecord"]>

  export type NotificationRecordSelectScalar = {
    id?: boolean
    memberId?: boolean
    typeId?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type NotificationRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "typeId" | "description" | "createdAt", ExtArgs["result"]["notificationRecord"]>
  export type NotificationRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    type?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    type?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }
  export type NotificationRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    type?: boolean | NotificationTypeDefaultArgs<ExtArgs>
  }

  export type $NotificationRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationRecord"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      type: Prisma.$NotificationTypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      typeId: number
      description: string
      createdAt: Date
    }, ExtArgs["result"]["notificationRecord"]>
    composites: {}
  }

  type NotificationRecordGetPayload<S extends boolean | null | undefined | NotificationRecordDefaultArgs> = $Result.GetResult<Prisma.$NotificationRecordPayload, S>

  type NotificationRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationRecordCountAggregateInputType | true
    }

  export interface NotificationRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationRecord'], meta: { name: 'NotificationRecord' } }
    /**
     * Find zero or one NotificationRecord that matches the filter.
     * @param {NotificationRecordFindUniqueArgs} args - Arguments to find a NotificationRecord
     * @example
     * // Get one NotificationRecord
     * const notificationRecord = await prisma.notificationRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationRecordFindUniqueArgs>(args: SelectSubset<T, NotificationRecordFindUniqueArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationRecordFindUniqueOrThrowArgs} args - Arguments to find a NotificationRecord
     * @example
     * // Get one NotificationRecord
     * const notificationRecord = await prisma.notificationRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordFindFirstArgs} args - Arguments to find a NotificationRecord
     * @example
     * // Get one NotificationRecord
     * const notificationRecord = await prisma.notificationRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationRecordFindFirstArgs>(args?: SelectSubset<T, NotificationRecordFindFirstArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordFindFirstOrThrowArgs} args - Arguments to find a NotificationRecord
     * @example
     * // Get one NotificationRecord
     * const notificationRecord = await prisma.notificationRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationRecords
     * const notificationRecords = await prisma.notificationRecord.findMany()
     * 
     * // Get first 10 NotificationRecords
     * const notificationRecords = await prisma.notificationRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationRecordWithIdOnly = await prisma.notificationRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationRecordFindManyArgs>(args?: SelectSubset<T, NotificationRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationRecord.
     * @param {NotificationRecordCreateArgs} args - Arguments to create a NotificationRecord.
     * @example
     * // Create one NotificationRecord
     * const NotificationRecord = await prisma.notificationRecord.create({
     *   data: {
     *     // ... data to create a NotificationRecord
     *   }
     * })
     * 
     */
    create<T extends NotificationRecordCreateArgs>(args: SelectSubset<T, NotificationRecordCreateArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationRecords.
     * @param {NotificationRecordCreateManyArgs} args - Arguments to create many NotificationRecords.
     * @example
     * // Create many NotificationRecords
     * const notificationRecord = await prisma.notificationRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationRecordCreateManyArgs>(args?: SelectSubset<T, NotificationRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many NotificationRecords and returns the data saved in the database.
     * @param {NotificationRecordCreateManyAndReturnArgs} args - Arguments to create many NotificationRecords.
     * @example
     * // Create many NotificationRecords
     * const notificationRecord = await prisma.notificationRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many NotificationRecords and only return the `id`
     * const notificationRecordWithIdOnly = await prisma.notificationRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a NotificationRecord.
     * @param {NotificationRecordDeleteArgs} args - Arguments to delete one NotificationRecord.
     * @example
     * // Delete one NotificationRecord
     * const NotificationRecord = await prisma.notificationRecord.delete({
     *   where: {
     *     // ... filter to delete one NotificationRecord
     *   }
     * })
     * 
     */
    delete<T extends NotificationRecordDeleteArgs>(args: SelectSubset<T, NotificationRecordDeleteArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationRecord.
     * @param {NotificationRecordUpdateArgs} args - Arguments to update one NotificationRecord.
     * @example
     * // Update one NotificationRecord
     * const notificationRecord = await prisma.notificationRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationRecordUpdateArgs>(args: SelectSubset<T, NotificationRecordUpdateArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationRecords.
     * @param {NotificationRecordDeleteManyArgs} args - Arguments to filter NotificationRecords to delete.
     * @example
     * // Delete a few NotificationRecords
     * const { count } = await prisma.notificationRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationRecordDeleteManyArgs>(args?: SelectSubset<T, NotificationRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationRecords
     * const notificationRecord = await prisma.notificationRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationRecordUpdateManyArgs>(args: SelectSubset<T, NotificationRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationRecords and returns the data updated in the database.
     * @param {NotificationRecordUpdateManyAndReturnArgs} args - Arguments to update many NotificationRecords.
     * @example
     * // Update many NotificationRecords
     * const notificationRecord = await prisma.notificationRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more NotificationRecords and only return the `id`
     * const notificationRecordWithIdOnly = await prisma.notificationRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one NotificationRecord.
     * @param {NotificationRecordUpsertArgs} args - Arguments to update or create a NotificationRecord.
     * @example
     * // Update or create a NotificationRecord
     * const notificationRecord = await prisma.notificationRecord.upsert({
     *   create: {
     *     // ... data to create a NotificationRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationRecord we want to update
     *   }
     * })
     */
    upsert<T extends NotificationRecordUpsertArgs>(args: SelectSubset<T, NotificationRecordUpsertArgs<ExtArgs>>): Prisma__NotificationRecordClient<$Result.GetResult<Prisma.$NotificationRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordCountArgs} args - Arguments to filter NotificationRecords to count.
     * @example
     * // Count the number of NotificationRecords
     * const count = await prisma.notificationRecord.count({
     *   where: {
     *     // ... the filter for the NotificationRecords we want to count
     *   }
     * })
    **/
    count<T extends NotificationRecordCountArgs>(
      args?: Subset<T, NotificationRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationRecordAggregateArgs>(args: Subset<T, NotificationRecordAggregateArgs>): Prisma.PrismaPromise<GetNotificationRecordAggregateType<T>>

    /**
     * Group by NotificationRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationRecordGroupByArgs['orderBy'] }
        : { orderBy?: NotificationRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationRecord model
   */
  readonly fields: NotificationRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    type<T extends NotificationTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationTypeDefaultArgs<ExtArgs>>): Prisma__NotificationTypeClient<$Result.GetResult<Prisma.$NotificationTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationRecord model
   */
  interface NotificationRecordFieldRefs {
    readonly id: FieldRef<"NotificationRecord", 'Int'>
    readonly memberId: FieldRef<"NotificationRecord", 'String'>
    readonly typeId: FieldRef<"NotificationRecord", 'Int'>
    readonly description: FieldRef<"NotificationRecord", 'String'>
    readonly createdAt: FieldRef<"NotificationRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationRecord findUnique
   */
  export type NotificationRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRecord to fetch.
     */
    where: NotificationRecordWhereUniqueInput
  }

  /**
   * NotificationRecord findUniqueOrThrow
   */
  export type NotificationRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRecord to fetch.
     */
    where: NotificationRecordWhereUniqueInput
  }

  /**
   * NotificationRecord findFirst
   */
  export type NotificationRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRecord to fetch.
     */
    where?: NotificationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRecords to fetch.
     */
    orderBy?: NotificationRecordOrderByWithRelationInput | NotificationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationRecords.
     */
    cursor?: NotificationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationRecords.
     */
    distinct?: NotificationRecordScalarFieldEnum | NotificationRecordScalarFieldEnum[]
  }

  /**
   * NotificationRecord findFirstOrThrow
   */
  export type NotificationRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRecord to fetch.
     */
    where?: NotificationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRecords to fetch.
     */
    orderBy?: NotificationRecordOrderByWithRelationInput | NotificationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationRecords.
     */
    cursor?: NotificationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationRecords.
     */
    distinct?: NotificationRecordScalarFieldEnum | NotificationRecordScalarFieldEnum[]
  }

  /**
   * NotificationRecord findMany
   */
  export type NotificationRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * Filter, which NotificationRecords to fetch.
     */
    where?: NotificationRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationRecords to fetch.
     */
    orderBy?: NotificationRecordOrderByWithRelationInput | NotificationRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationRecords.
     */
    cursor?: NotificationRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationRecords.
     */
    skip?: number
    distinct?: NotificationRecordScalarFieldEnum | NotificationRecordScalarFieldEnum[]
  }

  /**
   * NotificationRecord create
   */
  export type NotificationRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationRecord.
     */
    data: XOR<NotificationRecordCreateInput, NotificationRecordUncheckedCreateInput>
  }

  /**
   * NotificationRecord createMany
   */
  export type NotificationRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationRecords.
     */
    data: NotificationRecordCreateManyInput | NotificationRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationRecord createManyAndReturn
   */
  export type NotificationRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * The data used to create many NotificationRecords.
     */
    data: NotificationRecordCreateManyInput | NotificationRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationRecord update
   */
  export type NotificationRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationRecord.
     */
    data: XOR<NotificationRecordUpdateInput, NotificationRecordUncheckedUpdateInput>
    /**
     * Choose, which NotificationRecord to update.
     */
    where: NotificationRecordWhereUniqueInput
  }

  /**
   * NotificationRecord updateMany
   */
  export type NotificationRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationRecords.
     */
    data: XOR<NotificationRecordUpdateManyMutationInput, NotificationRecordUncheckedUpdateManyInput>
    /**
     * Filter which NotificationRecords to update
     */
    where?: NotificationRecordWhereInput
    /**
     * Limit how many NotificationRecords to update.
     */
    limit?: number
  }

  /**
   * NotificationRecord updateManyAndReturn
   */
  export type NotificationRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * The data used to update NotificationRecords.
     */
    data: XOR<NotificationRecordUpdateManyMutationInput, NotificationRecordUncheckedUpdateManyInput>
    /**
     * Filter which NotificationRecords to update
     */
    where?: NotificationRecordWhereInput
    /**
     * Limit how many NotificationRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * NotificationRecord upsert
   */
  export type NotificationRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationRecord to update in case it exists.
     */
    where: NotificationRecordWhereUniqueInput
    /**
     * In case the NotificationRecord found by the `where` argument doesn't exist, create a new NotificationRecord with this data.
     */
    create: XOR<NotificationRecordCreateInput, NotificationRecordUncheckedCreateInput>
    /**
     * In case the NotificationRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationRecordUpdateInput, NotificationRecordUncheckedUpdateInput>
  }

  /**
   * NotificationRecord delete
   */
  export type NotificationRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
    /**
     * Filter which NotificationRecord to delete.
     */
    where: NotificationRecordWhereUniqueInput
  }

  /**
   * NotificationRecord deleteMany
   */
  export type NotificationRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationRecords to delete
     */
    where?: NotificationRecordWhereInput
    /**
     * Limit how many NotificationRecords to delete.
     */
    limit?: number
  }

  /**
   * NotificationRecord without action
   */
  export type NotificationRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationRecord
     */
    select?: NotificationRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationRecord
     */
    omit?: NotificationRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationRecordInclude<ExtArgs> | null
  }


  /**
   * Model ScorePolicy
   */

  export type AggregateScorePolicy = {
    _count: ScorePolicyCountAggregateOutputType | null
    _avg: ScorePolicyAvgAggregateOutputType | null
    _sum: ScorePolicySumAggregateOutputType | null
    _min: ScorePolicyMinAggregateOutputType | null
    _max: ScorePolicyMaxAggregateOutputType | null
  }

  export type ScorePolicyAvgAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type ScorePolicySumAggregateOutputType = {
    id: number | null
    score: number | null
  }

  export type ScorePolicyMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    score: number | null
    imageUrl: string | null
  }

  export type ScorePolicyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    score: number | null
    imageUrl: string | null
  }

  export type ScorePolicyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    score: number
    imageUrl: number
    _all: number
  }


  export type ScorePolicyAvgAggregateInputType = {
    id?: true
    score?: true
  }

  export type ScorePolicySumAggregateInputType = {
    id?: true
    score?: true
  }

  export type ScorePolicyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    score?: true
    imageUrl?: true
  }

  export type ScorePolicyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    score?: true
    imageUrl?: true
  }

  export type ScorePolicyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    score?: true
    imageUrl?: true
    _all?: true
  }

  export type ScorePolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScorePolicy to aggregate.
     */
    where?: ScorePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScorePolicies to fetch.
     */
    orderBy?: ScorePolicyOrderByWithRelationInput | ScorePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScorePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScorePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScorePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScorePolicies
    **/
    _count?: true | ScorePolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScorePolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScorePolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScorePolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScorePolicyMaxAggregateInputType
  }

  export type GetScorePolicyAggregateType<T extends ScorePolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateScorePolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScorePolicy[P]>
      : GetScalarType<T[P], AggregateScorePolicy[P]>
  }




  export type ScorePolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScorePolicyWhereInput
    orderBy?: ScorePolicyOrderByWithAggregationInput | ScorePolicyOrderByWithAggregationInput[]
    by: ScorePolicyScalarFieldEnum[] | ScorePolicyScalarFieldEnum
    having?: ScorePolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScorePolicyCountAggregateInputType | true
    _avg?: ScorePolicyAvgAggregateInputType
    _sum?: ScorePolicySumAggregateInputType
    _min?: ScorePolicyMinAggregateInputType
    _max?: ScorePolicyMaxAggregateInputType
  }

  export type ScorePolicyGroupByOutputType = {
    id: number
    name: string
    description: string
    score: number
    imageUrl: string
    _count: ScorePolicyCountAggregateOutputType | null
    _avg: ScorePolicyAvgAggregateOutputType | null
    _sum: ScorePolicySumAggregateOutputType | null
    _min: ScorePolicyMinAggregateOutputType | null
    _max: ScorePolicyMaxAggregateOutputType | null
  }

  type GetScorePolicyGroupByPayload<T extends ScorePolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScorePolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScorePolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScorePolicyGroupByOutputType[P]>
            : GetScalarType<T[P], ScorePolicyGroupByOutputType[P]>
        }
      >
    >


  export type ScorePolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    score?: boolean
    imageUrl?: boolean
    scoreRecords?: boolean | ScorePolicy$scoreRecordsArgs<ExtArgs>
    _count?: boolean | ScorePolicyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scorePolicy"]>

  export type ScorePolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    score?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["scorePolicy"]>

  export type ScorePolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    score?: boolean
    imageUrl?: boolean
  }, ExtArgs["result"]["scorePolicy"]>

  export type ScorePolicySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    score?: boolean
    imageUrl?: boolean
  }

  export type ScorePolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "score" | "imageUrl", ExtArgs["result"]["scorePolicy"]>
  export type ScorePolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    scoreRecords?: boolean | ScorePolicy$scoreRecordsArgs<ExtArgs>
    _count?: boolean | ScorePolicyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScorePolicyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ScorePolicyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ScorePolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScorePolicy"
    objects: {
      scoreRecords: Prisma.$ScoreRecordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      score: number
      imageUrl: string
    }, ExtArgs["result"]["scorePolicy"]>
    composites: {}
  }

  type ScorePolicyGetPayload<S extends boolean | null | undefined | ScorePolicyDefaultArgs> = $Result.GetResult<Prisma.$ScorePolicyPayload, S>

  type ScorePolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScorePolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScorePolicyCountAggregateInputType | true
    }

  export interface ScorePolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScorePolicy'], meta: { name: 'ScorePolicy' } }
    /**
     * Find zero or one ScorePolicy that matches the filter.
     * @param {ScorePolicyFindUniqueArgs} args - Arguments to find a ScorePolicy
     * @example
     * // Get one ScorePolicy
     * const scorePolicy = await prisma.scorePolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScorePolicyFindUniqueArgs>(args: SelectSubset<T, ScorePolicyFindUniqueArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScorePolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScorePolicyFindUniqueOrThrowArgs} args - Arguments to find a ScorePolicy
     * @example
     * // Get one ScorePolicy
     * const scorePolicy = await prisma.scorePolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScorePolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, ScorePolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScorePolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyFindFirstArgs} args - Arguments to find a ScorePolicy
     * @example
     * // Get one ScorePolicy
     * const scorePolicy = await prisma.scorePolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScorePolicyFindFirstArgs>(args?: SelectSubset<T, ScorePolicyFindFirstArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScorePolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyFindFirstOrThrowArgs} args - Arguments to find a ScorePolicy
     * @example
     * // Get one ScorePolicy
     * const scorePolicy = await prisma.scorePolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScorePolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, ScorePolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScorePolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScorePolicies
     * const scorePolicies = await prisma.scorePolicy.findMany()
     * 
     * // Get first 10 ScorePolicies
     * const scorePolicies = await prisma.scorePolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scorePolicyWithIdOnly = await prisma.scorePolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScorePolicyFindManyArgs>(args?: SelectSubset<T, ScorePolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScorePolicy.
     * @param {ScorePolicyCreateArgs} args - Arguments to create a ScorePolicy.
     * @example
     * // Create one ScorePolicy
     * const ScorePolicy = await prisma.scorePolicy.create({
     *   data: {
     *     // ... data to create a ScorePolicy
     *   }
     * })
     * 
     */
    create<T extends ScorePolicyCreateArgs>(args: SelectSubset<T, ScorePolicyCreateArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScorePolicies.
     * @param {ScorePolicyCreateManyArgs} args - Arguments to create many ScorePolicies.
     * @example
     * // Create many ScorePolicies
     * const scorePolicy = await prisma.scorePolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScorePolicyCreateManyArgs>(args?: SelectSubset<T, ScorePolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScorePolicies and returns the data saved in the database.
     * @param {ScorePolicyCreateManyAndReturnArgs} args - Arguments to create many ScorePolicies.
     * @example
     * // Create many ScorePolicies
     * const scorePolicy = await prisma.scorePolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScorePolicies and only return the `id`
     * const scorePolicyWithIdOnly = await prisma.scorePolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScorePolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, ScorePolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScorePolicy.
     * @param {ScorePolicyDeleteArgs} args - Arguments to delete one ScorePolicy.
     * @example
     * // Delete one ScorePolicy
     * const ScorePolicy = await prisma.scorePolicy.delete({
     *   where: {
     *     // ... filter to delete one ScorePolicy
     *   }
     * })
     * 
     */
    delete<T extends ScorePolicyDeleteArgs>(args: SelectSubset<T, ScorePolicyDeleteArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScorePolicy.
     * @param {ScorePolicyUpdateArgs} args - Arguments to update one ScorePolicy.
     * @example
     * // Update one ScorePolicy
     * const scorePolicy = await prisma.scorePolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScorePolicyUpdateArgs>(args: SelectSubset<T, ScorePolicyUpdateArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScorePolicies.
     * @param {ScorePolicyDeleteManyArgs} args - Arguments to filter ScorePolicies to delete.
     * @example
     * // Delete a few ScorePolicies
     * const { count } = await prisma.scorePolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScorePolicyDeleteManyArgs>(args?: SelectSubset<T, ScorePolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScorePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScorePolicies
     * const scorePolicy = await prisma.scorePolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScorePolicyUpdateManyArgs>(args: SelectSubset<T, ScorePolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScorePolicies and returns the data updated in the database.
     * @param {ScorePolicyUpdateManyAndReturnArgs} args - Arguments to update many ScorePolicies.
     * @example
     * // Update many ScorePolicies
     * const scorePolicy = await prisma.scorePolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScorePolicies and only return the `id`
     * const scorePolicyWithIdOnly = await prisma.scorePolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScorePolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, ScorePolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScorePolicy.
     * @param {ScorePolicyUpsertArgs} args - Arguments to update or create a ScorePolicy.
     * @example
     * // Update or create a ScorePolicy
     * const scorePolicy = await prisma.scorePolicy.upsert({
     *   create: {
     *     // ... data to create a ScorePolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScorePolicy we want to update
     *   }
     * })
     */
    upsert<T extends ScorePolicyUpsertArgs>(args: SelectSubset<T, ScorePolicyUpsertArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScorePolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyCountArgs} args - Arguments to filter ScorePolicies to count.
     * @example
     * // Count the number of ScorePolicies
     * const count = await prisma.scorePolicy.count({
     *   where: {
     *     // ... the filter for the ScorePolicies we want to count
     *   }
     * })
    **/
    count<T extends ScorePolicyCountArgs>(
      args?: Subset<T, ScorePolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScorePolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScorePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScorePolicyAggregateArgs>(args: Subset<T, ScorePolicyAggregateArgs>): Prisma.PrismaPromise<GetScorePolicyAggregateType<T>>

    /**
     * Group by ScorePolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScorePolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScorePolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScorePolicyGroupByArgs['orderBy'] }
        : { orderBy?: ScorePolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScorePolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScorePolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScorePolicy model
   */
  readonly fields: ScorePolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScorePolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScorePolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    scoreRecords<T extends ScorePolicy$scoreRecordsArgs<ExtArgs> = {}>(args?: Subset<T, ScorePolicy$scoreRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScorePolicy model
   */
  interface ScorePolicyFieldRefs {
    readonly id: FieldRef<"ScorePolicy", 'Int'>
    readonly name: FieldRef<"ScorePolicy", 'String'>
    readonly description: FieldRef<"ScorePolicy", 'String'>
    readonly score: FieldRef<"ScorePolicy", 'Int'>
    readonly imageUrl: FieldRef<"ScorePolicy", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScorePolicy findUnique
   */
  export type ScorePolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * Filter, which ScorePolicy to fetch.
     */
    where: ScorePolicyWhereUniqueInput
  }

  /**
   * ScorePolicy findUniqueOrThrow
   */
  export type ScorePolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * Filter, which ScorePolicy to fetch.
     */
    where: ScorePolicyWhereUniqueInput
  }

  /**
   * ScorePolicy findFirst
   */
  export type ScorePolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * Filter, which ScorePolicy to fetch.
     */
    where?: ScorePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScorePolicies to fetch.
     */
    orderBy?: ScorePolicyOrderByWithRelationInput | ScorePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScorePolicies.
     */
    cursor?: ScorePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScorePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScorePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScorePolicies.
     */
    distinct?: ScorePolicyScalarFieldEnum | ScorePolicyScalarFieldEnum[]
  }

  /**
   * ScorePolicy findFirstOrThrow
   */
  export type ScorePolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * Filter, which ScorePolicy to fetch.
     */
    where?: ScorePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScorePolicies to fetch.
     */
    orderBy?: ScorePolicyOrderByWithRelationInput | ScorePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScorePolicies.
     */
    cursor?: ScorePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScorePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScorePolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScorePolicies.
     */
    distinct?: ScorePolicyScalarFieldEnum | ScorePolicyScalarFieldEnum[]
  }

  /**
   * ScorePolicy findMany
   */
  export type ScorePolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * Filter, which ScorePolicies to fetch.
     */
    where?: ScorePolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScorePolicies to fetch.
     */
    orderBy?: ScorePolicyOrderByWithRelationInput | ScorePolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScorePolicies.
     */
    cursor?: ScorePolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScorePolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScorePolicies.
     */
    skip?: number
    distinct?: ScorePolicyScalarFieldEnum | ScorePolicyScalarFieldEnum[]
  }

  /**
   * ScorePolicy create
   */
  export type ScorePolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a ScorePolicy.
     */
    data: XOR<ScorePolicyCreateInput, ScorePolicyUncheckedCreateInput>
  }

  /**
   * ScorePolicy createMany
   */
  export type ScorePolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScorePolicies.
     */
    data: ScorePolicyCreateManyInput | ScorePolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScorePolicy createManyAndReturn
   */
  export type ScorePolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * The data used to create many ScorePolicies.
     */
    data: ScorePolicyCreateManyInput | ScorePolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScorePolicy update
   */
  export type ScorePolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a ScorePolicy.
     */
    data: XOR<ScorePolicyUpdateInput, ScorePolicyUncheckedUpdateInput>
    /**
     * Choose, which ScorePolicy to update.
     */
    where: ScorePolicyWhereUniqueInput
  }

  /**
   * ScorePolicy updateMany
   */
  export type ScorePolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScorePolicies.
     */
    data: XOR<ScorePolicyUpdateManyMutationInput, ScorePolicyUncheckedUpdateManyInput>
    /**
     * Filter which ScorePolicies to update
     */
    where?: ScorePolicyWhereInput
    /**
     * Limit how many ScorePolicies to update.
     */
    limit?: number
  }

  /**
   * ScorePolicy updateManyAndReturn
   */
  export type ScorePolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * The data used to update ScorePolicies.
     */
    data: XOR<ScorePolicyUpdateManyMutationInput, ScorePolicyUncheckedUpdateManyInput>
    /**
     * Filter which ScorePolicies to update
     */
    where?: ScorePolicyWhereInput
    /**
     * Limit how many ScorePolicies to update.
     */
    limit?: number
  }

  /**
   * ScorePolicy upsert
   */
  export type ScorePolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the ScorePolicy to update in case it exists.
     */
    where: ScorePolicyWhereUniqueInput
    /**
     * In case the ScorePolicy found by the `where` argument doesn't exist, create a new ScorePolicy with this data.
     */
    create: XOR<ScorePolicyCreateInput, ScorePolicyUncheckedCreateInput>
    /**
     * In case the ScorePolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScorePolicyUpdateInput, ScorePolicyUncheckedUpdateInput>
  }

  /**
   * ScorePolicy delete
   */
  export type ScorePolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
    /**
     * Filter which ScorePolicy to delete.
     */
    where: ScorePolicyWhereUniqueInput
  }

  /**
   * ScorePolicy deleteMany
   */
  export type ScorePolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScorePolicies to delete
     */
    where?: ScorePolicyWhereInput
    /**
     * Limit how many ScorePolicies to delete.
     */
    limit?: number
  }

  /**
   * ScorePolicy.scoreRecords
   */
  export type ScorePolicy$scoreRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    where?: ScoreRecordWhereInput
    orderBy?: ScoreRecordOrderByWithRelationInput | ScoreRecordOrderByWithRelationInput[]
    cursor?: ScoreRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScoreRecordScalarFieldEnum | ScoreRecordScalarFieldEnum[]
  }

  /**
   * ScorePolicy without action
   */
  export type ScorePolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScorePolicy
     */
    select?: ScorePolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScorePolicy
     */
    omit?: ScorePolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScorePolicyInclude<ExtArgs> | null
  }


  /**
   * Model ScoreRecord
   */

  export type AggregateScoreRecord = {
    _count: ScoreRecordCountAggregateOutputType | null
    _avg: ScoreRecordAvgAggregateOutputType | null
    _sum: ScoreRecordSumAggregateOutputType | null
    _min: ScoreRecordMinAggregateOutputType | null
    _max: ScoreRecordMaxAggregateOutputType | null
  }

  export type ScoreRecordAvgAggregateOutputType = {
    id: number | null
    policyId: number | null
  }

  export type ScoreRecordSumAggregateOutputType = {
    id: number | null
    policyId: number | null
  }

  export type ScoreRecordMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    policyId: number | null
    createdAt: Date | null
  }

  export type ScoreRecordMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    policyId: number | null
    createdAt: Date | null
  }

  export type ScoreRecordCountAggregateOutputType = {
    id: number
    memberId: number
    policyId: number
    createdAt: number
    _all: number
  }


  export type ScoreRecordAvgAggregateInputType = {
    id?: true
    policyId?: true
  }

  export type ScoreRecordSumAggregateInputType = {
    id?: true
    policyId?: true
  }

  export type ScoreRecordMinAggregateInputType = {
    id?: true
    memberId?: true
    policyId?: true
    createdAt?: true
  }

  export type ScoreRecordMaxAggregateInputType = {
    id?: true
    memberId?: true
    policyId?: true
    createdAt?: true
  }

  export type ScoreRecordCountAggregateInputType = {
    id?: true
    memberId?: true
    policyId?: true
    createdAt?: true
    _all?: true
  }

  export type ScoreRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreRecord to aggregate.
     */
    where?: ScoreRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreRecords to fetch.
     */
    orderBy?: ScoreRecordOrderByWithRelationInput | ScoreRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScoreRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScoreRecords
    **/
    _count?: true | ScoreRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScoreRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScoreRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScoreRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScoreRecordMaxAggregateInputType
  }

  export type GetScoreRecordAggregateType<T extends ScoreRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateScoreRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScoreRecord[P]>
      : GetScalarType<T[P], AggregateScoreRecord[P]>
  }




  export type ScoreRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScoreRecordWhereInput
    orderBy?: ScoreRecordOrderByWithAggregationInput | ScoreRecordOrderByWithAggregationInput[]
    by: ScoreRecordScalarFieldEnum[] | ScoreRecordScalarFieldEnum
    having?: ScoreRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScoreRecordCountAggregateInputType | true
    _avg?: ScoreRecordAvgAggregateInputType
    _sum?: ScoreRecordSumAggregateInputType
    _min?: ScoreRecordMinAggregateInputType
    _max?: ScoreRecordMaxAggregateInputType
  }

  export type ScoreRecordGroupByOutputType = {
    id: number
    memberId: string
    policyId: number
    createdAt: Date
    _count: ScoreRecordCountAggregateOutputType | null
    _avg: ScoreRecordAvgAggregateOutputType | null
    _sum: ScoreRecordSumAggregateOutputType | null
    _min: ScoreRecordMinAggregateOutputType | null
    _max: ScoreRecordMaxAggregateOutputType | null
  }

  type GetScoreRecordGroupByPayload<T extends ScoreRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScoreRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScoreRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScoreRecordGroupByOutputType[P]>
            : GetScalarType<T[P], ScoreRecordGroupByOutputType[P]>
        }
      >
    >


  export type ScoreRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    policyId?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    policy?: boolean | ScorePolicyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreRecord"]>

  export type ScoreRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    policyId?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    policy?: boolean | ScorePolicyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreRecord"]>

  export type ScoreRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    policyId?: boolean
    createdAt?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    policy?: boolean | ScorePolicyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scoreRecord"]>

  export type ScoreRecordSelectScalar = {
    id?: boolean
    memberId?: boolean
    policyId?: boolean
    createdAt?: boolean
  }

  export type ScoreRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "policyId" | "createdAt", ExtArgs["result"]["scoreRecord"]>
  export type ScoreRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    policy?: boolean | ScorePolicyDefaultArgs<ExtArgs>
  }
  export type ScoreRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    policy?: boolean | ScorePolicyDefaultArgs<ExtArgs>
  }
  export type ScoreRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    policy?: boolean | ScorePolicyDefaultArgs<ExtArgs>
  }

  export type $ScoreRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScoreRecord"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      policy: Prisma.$ScorePolicyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      policyId: number
      createdAt: Date
    }, ExtArgs["result"]["scoreRecord"]>
    composites: {}
  }

  type ScoreRecordGetPayload<S extends boolean | null | undefined | ScoreRecordDefaultArgs> = $Result.GetResult<Prisma.$ScoreRecordPayload, S>

  type ScoreRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScoreRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScoreRecordCountAggregateInputType | true
    }

  export interface ScoreRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScoreRecord'], meta: { name: 'ScoreRecord' } }
    /**
     * Find zero or one ScoreRecord that matches the filter.
     * @param {ScoreRecordFindUniqueArgs} args - Arguments to find a ScoreRecord
     * @example
     * // Get one ScoreRecord
     * const scoreRecord = await prisma.scoreRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScoreRecordFindUniqueArgs>(args: SelectSubset<T, ScoreRecordFindUniqueArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScoreRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScoreRecordFindUniqueOrThrowArgs} args - Arguments to find a ScoreRecord
     * @example
     * // Get one ScoreRecord
     * const scoreRecord = await prisma.scoreRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScoreRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, ScoreRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordFindFirstArgs} args - Arguments to find a ScoreRecord
     * @example
     * // Get one ScoreRecord
     * const scoreRecord = await prisma.scoreRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScoreRecordFindFirstArgs>(args?: SelectSubset<T, ScoreRecordFindFirstArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScoreRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordFindFirstOrThrowArgs} args - Arguments to find a ScoreRecord
     * @example
     * // Get one ScoreRecord
     * const scoreRecord = await prisma.scoreRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScoreRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, ScoreRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScoreRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScoreRecords
     * const scoreRecords = await prisma.scoreRecord.findMany()
     * 
     * // Get first 10 ScoreRecords
     * const scoreRecords = await prisma.scoreRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scoreRecordWithIdOnly = await prisma.scoreRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScoreRecordFindManyArgs>(args?: SelectSubset<T, ScoreRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScoreRecord.
     * @param {ScoreRecordCreateArgs} args - Arguments to create a ScoreRecord.
     * @example
     * // Create one ScoreRecord
     * const ScoreRecord = await prisma.scoreRecord.create({
     *   data: {
     *     // ... data to create a ScoreRecord
     *   }
     * })
     * 
     */
    create<T extends ScoreRecordCreateArgs>(args: SelectSubset<T, ScoreRecordCreateArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScoreRecords.
     * @param {ScoreRecordCreateManyArgs} args - Arguments to create many ScoreRecords.
     * @example
     * // Create many ScoreRecords
     * const scoreRecord = await prisma.scoreRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScoreRecordCreateManyArgs>(args?: SelectSubset<T, ScoreRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScoreRecords and returns the data saved in the database.
     * @param {ScoreRecordCreateManyAndReturnArgs} args - Arguments to create many ScoreRecords.
     * @example
     * // Create many ScoreRecords
     * const scoreRecord = await prisma.scoreRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScoreRecords and only return the `id`
     * const scoreRecordWithIdOnly = await prisma.scoreRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScoreRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, ScoreRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScoreRecord.
     * @param {ScoreRecordDeleteArgs} args - Arguments to delete one ScoreRecord.
     * @example
     * // Delete one ScoreRecord
     * const ScoreRecord = await prisma.scoreRecord.delete({
     *   where: {
     *     // ... filter to delete one ScoreRecord
     *   }
     * })
     * 
     */
    delete<T extends ScoreRecordDeleteArgs>(args: SelectSubset<T, ScoreRecordDeleteArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScoreRecord.
     * @param {ScoreRecordUpdateArgs} args - Arguments to update one ScoreRecord.
     * @example
     * // Update one ScoreRecord
     * const scoreRecord = await prisma.scoreRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScoreRecordUpdateArgs>(args: SelectSubset<T, ScoreRecordUpdateArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScoreRecords.
     * @param {ScoreRecordDeleteManyArgs} args - Arguments to filter ScoreRecords to delete.
     * @example
     * // Delete a few ScoreRecords
     * const { count } = await prisma.scoreRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScoreRecordDeleteManyArgs>(args?: SelectSubset<T, ScoreRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScoreRecords
     * const scoreRecord = await prisma.scoreRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScoreRecordUpdateManyArgs>(args: SelectSubset<T, ScoreRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScoreRecords and returns the data updated in the database.
     * @param {ScoreRecordUpdateManyAndReturnArgs} args - Arguments to update many ScoreRecords.
     * @example
     * // Update many ScoreRecords
     * const scoreRecord = await prisma.scoreRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScoreRecords and only return the `id`
     * const scoreRecordWithIdOnly = await prisma.scoreRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScoreRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, ScoreRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScoreRecord.
     * @param {ScoreRecordUpsertArgs} args - Arguments to update or create a ScoreRecord.
     * @example
     * // Update or create a ScoreRecord
     * const scoreRecord = await prisma.scoreRecord.upsert({
     *   create: {
     *     // ... data to create a ScoreRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScoreRecord we want to update
     *   }
     * })
     */
    upsert<T extends ScoreRecordUpsertArgs>(args: SelectSubset<T, ScoreRecordUpsertArgs<ExtArgs>>): Prisma__ScoreRecordClient<$Result.GetResult<Prisma.$ScoreRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScoreRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordCountArgs} args - Arguments to filter ScoreRecords to count.
     * @example
     * // Count the number of ScoreRecords
     * const count = await prisma.scoreRecord.count({
     *   where: {
     *     // ... the filter for the ScoreRecords we want to count
     *   }
     * })
    **/
    count<T extends ScoreRecordCountArgs>(
      args?: Subset<T, ScoreRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScoreRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScoreRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScoreRecordAggregateArgs>(args: Subset<T, ScoreRecordAggregateArgs>): Prisma.PrismaPromise<GetScoreRecordAggregateType<T>>

    /**
     * Group by ScoreRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScoreRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScoreRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScoreRecordGroupByArgs['orderBy'] }
        : { orderBy?: ScoreRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScoreRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScoreRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScoreRecord model
   */
  readonly fields: ScoreRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScoreRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScoreRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    policy<T extends ScorePolicyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ScorePolicyDefaultArgs<ExtArgs>>): Prisma__ScorePolicyClient<$Result.GetResult<Prisma.$ScorePolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScoreRecord model
   */
  interface ScoreRecordFieldRefs {
    readonly id: FieldRef<"ScoreRecord", 'Int'>
    readonly memberId: FieldRef<"ScoreRecord", 'String'>
    readonly policyId: FieldRef<"ScoreRecord", 'Int'>
    readonly createdAt: FieldRef<"ScoreRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ScoreRecord findUnique
   */
  export type ScoreRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * Filter, which ScoreRecord to fetch.
     */
    where: ScoreRecordWhereUniqueInput
  }

  /**
   * ScoreRecord findUniqueOrThrow
   */
  export type ScoreRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * Filter, which ScoreRecord to fetch.
     */
    where: ScoreRecordWhereUniqueInput
  }

  /**
   * ScoreRecord findFirst
   */
  export type ScoreRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * Filter, which ScoreRecord to fetch.
     */
    where?: ScoreRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreRecords to fetch.
     */
    orderBy?: ScoreRecordOrderByWithRelationInput | ScoreRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreRecords.
     */
    cursor?: ScoreRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreRecords.
     */
    distinct?: ScoreRecordScalarFieldEnum | ScoreRecordScalarFieldEnum[]
  }

  /**
   * ScoreRecord findFirstOrThrow
   */
  export type ScoreRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * Filter, which ScoreRecord to fetch.
     */
    where?: ScoreRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreRecords to fetch.
     */
    orderBy?: ScoreRecordOrderByWithRelationInput | ScoreRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScoreRecords.
     */
    cursor?: ScoreRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScoreRecords.
     */
    distinct?: ScoreRecordScalarFieldEnum | ScoreRecordScalarFieldEnum[]
  }

  /**
   * ScoreRecord findMany
   */
  export type ScoreRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * Filter, which ScoreRecords to fetch.
     */
    where?: ScoreRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScoreRecords to fetch.
     */
    orderBy?: ScoreRecordOrderByWithRelationInput | ScoreRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScoreRecords.
     */
    cursor?: ScoreRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScoreRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScoreRecords.
     */
    skip?: number
    distinct?: ScoreRecordScalarFieldEnum | ScoreRecordScalarFieldEnum[]
  }

  /**
   * ScoreRecord create
   */
  export type ScoreRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a ScoreRecord.
     */
    data: XOR<ScoreRecordCreateInput, ScoreRecordUncheckedCreateInput>
  }

  /**
   * ScoreRecord createMany
   */
  export type ScoreRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScoreRecords.
     */
    data: ScoreRecordCreateManyInput | ScoreRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScoreRecord createManyAndReturn
   */
  export type ScoreRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * The data used to create many ScoreRecords.
     */
    data: ScoreRecordCreateManyInput | ScoreRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreRecord update
   */
  export type ScoreRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a ScoreRecord.
     */
    data: XOR<ScoreRecordUpdateInput, ScoreRecordUncheckedUpdateInput>
    /**
     * Choose, which ScoreRecord to update.
     */
    where: ScoreRecordWhereUniqueInput
  }

  /**
   * ScoreRecord updateMany
   */
  export type ScoreRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScoreRecords.
     */
    data: XOR<ScoreRecordUpdateManyMutationInput, ScoreRecordUncheckedUpdateManyInput>
    /**
     * Filter which ScoreRecords to update
     */
    where?: ScoreRecordWhereInput
    /**
     * Limit how many ScoreRecords to update.
     */
    limit?: number
  }

  /**
   * ScoreRecord updateManyAndReturn
   */
  export type ScoreRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * The data used to update ScoreRecords.
     */
    data: XOR<ScoreRecordUpdateManyMutationInput, ScoreRecordUncheckedUpdateManyInput>
    /**
     * Filter which ScoreRecords to update
     */
    where?: ScoreRecordWhereInput
    /**
     * Limit how many ScoreRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScoreRecord upsert
   */
  export type ScoreRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the ScoreRecord to update in case it exists.
     */
    where: ScoreRecordWhereUniqueInput
    /**
     * In case the ScoreRecord found by the `where` argument doesn't exist, create a new ScoreRecord with this data.
     */
    create: XOR<ScoreRecordCreateInput, ScoreRecordUncheckedCreateInput>
    /**
     * In case the ScoreRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScoreRecordUpdateInput, ScoreRecordUncheckedUpdateInput>
  }

  /**
   * ScoreRecord delete
   */
  export type ScoreRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
    /**
     * Filter which ScoreRecord to delete.
     */
    where: ScoreRecordWhereUniqueInput
  }

  /**
   * ScoreRecord deleteMany
   */
  export type ScoreRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScoreRecords to delete
     */
    where?: ScoreRecordWhereInput
    /**
     * Limit how many ScoreRecords to delete.
     */
    limit?: number
  }

  /**
   * ScoreRecord without action
   */
  export type ScoreRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScoreRecord
     */
    select?: ScoreRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScoreRecord
     */
    omit?: ScoreRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScoreRecordInclude<ExtArgs> | null
  }


  /**
   * Model Platform
   */

  export type AggregatePlatform = {
    _count: PlatformCountAggregateOutputType | null
    _avg: PlatformAvgAggregateOutputType | null
    _sum: PlatformSumAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  export type PlatformAvgAggregateOutputType = {
    id: number | null
  }

  export type PlatformSumAggregateOutputType = {
    id: number | null
  }

  export type PlatformMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PlatformMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type PlatformCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type PlatformAvgAggregateInputType = {
    id?: true
  }

  export type PlatformSumAggregateInputType = {
    id?: true
  }

  export type PlatformMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlatformMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type PlatformCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type PlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platform to aggregate.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Platforms
    **/
    _count?: true | PlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatformMaxAggregateInputType
  }

  export type GetPlatformAggregateType<T extends PlatformAggregateArgs> = {
        [P in keyof T & keyof AggregatePlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlatform[P]>
      : GetScalarType<T[P], AggregatePlatform[P]>
  }




  export type PlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlatformWhereInput
    orderBy?: PlatformOrderByWithAggregationInput | PlatformOrderByWithAggregationInput[]
    by: PlatformScalarFieldEnum[] | PlatformScalarFieldEnum
    having?: PlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatformCountAggregateInputType | true
    _avg?: PlatformAvgAggregateInputType
    _sum?: PlatformSumAggregateInputType
    _min?: PlatformMinAggregateInputType
    _max?: PlatformMaxAggregateInputType
  }

  export type PlatformGroupByOutputType = {
    id: number
    name: string
    _count: PlatformCountAggregateOutputType | null
    _avg: PlatformAvgAggregateOutputType | null
    _sum: PlatformSumAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  type GetPlatformGroupByPayload<T extends PlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatformGroupByOutputType[P]>
            : GetScalarType<T[P], PlatformGroupByOutputType[P]>
        }
      >
    >


  export type PlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gamePlatforms?: boolean | Platform$gamePlatformsArgs<ExtArgs>
    preferredPlatforms?: boolean | Platform$preferredPlatformsArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type PlatformOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["platform"]>
  export type PlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gamePlatforms?: boolean | Platform$gamePlatformsArgs<ExtArgs>
    preferredPlatforms?: boolean | Platform$preferredPlatformsArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlatformIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlatformIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Platform"
    objects: {
      gamePlatforms: Prisma.$GamePlatformPayload<ExtArgs>[]
      preferredPlatforms: Prisma.$PreferredPlatformPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["platform"]>
    composites: {}
  }

  type PlatformGetPayload<S extends boolean | null | undefined | PlatformDefaultArgs> = $Result.GetResult<Prisma.$PlatformPayload, S>

  type PlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlatformFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlatformCountAggregateInputType | true
    }

  export interface PlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Platform'], meta: { name: 'Platform' } }
    /**
     * Find zero or one Platform that matches the filter.
     * @param {PlatformFindUniqueArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlatformFindUniqueArgs>(args: SelectSubset<T, PlatformFindUniqueArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Platform that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlatformFindUniqueOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlatformFindUniqueOrThrowArgs>(args: SelectSubset<T, PlatformFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Platform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlatformFindFirstArgs>(args?: SelectSubset<T, PlatformFindFirstArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Platform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlatformFindFirstOrThrowArgs>(args?: SelectSubset<T, PlatformFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platforms
     * const platforms = await prisma.platform.findMany()
     * 
     * // Get first 10 Platforms
     * const platforms = await prisma.platform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platformWithIdOnly = await prisma.platform.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlatformFindManyArgs>(args?: SelectSubset<T, PlatformFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Platform.
     * @param {PlatformCreateArgs} args - Arguments to create a Platform.
     * @example
     * // Create one Platform
     * const Platform = await prisma.platform.create({
     *   data: {
     *     // ... data to create a Platform
     *   }
     * })
     * 
     */
    create<T extends PlatformCreateArgs>(args: SelectSubset<T, PlatformCreateArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Platforms.
     * @param {PlatformCreateManyArgs} args - Arguments to create many Platforms.
     * @example
     * // Create many Platforms
     * const platform = await prisma.platform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlatformCreateManyArgs>(args?: SelectSubset<T, PlatformCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Platforms and returns the data saved in the database.
     * @param {PlatformCreateManyAndReturnArgs} args - Arguments to create many Platforms.
     * @example
     * // Create many Platforms
     * const platform = await prisma.platform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Platforms and only return the `id`
     * const platformWithIdOnly = await prisma.platform.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlatformCreateManyAndReturnArgs>(args?: SelectSubset<T, PlatformCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Platform.
     * @param {PlatformDeleteArgs} args - Arguments to delete one Platform.
     * @example
     * // Delete one Platform
     * const Platform = await prisma.platform.delete({
     *   where: {
     *     // ... filter to delete one Platform
     *   }
     * })
     * 
     */
    delete<T extends PlatformDeleteArgs>(args: SelectSubset<T, PlatformDeleteArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Platform.
     * @param {PlatformUpdateArgs} args - Arguments to update one Platform.
     * @example
     * // Update one Platform
     * const platform = await prisma.platform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlatformUpdateArgs>(args: SelectSubset<T, PlatformUpdateArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Platforms.
     * @param {PlatformDeleteManyArgs} args - Arguments to filter Platforms to delete.
     * @example
     * // Delete a few Platforms
     * const { count } = await prisma.platform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlatformDeleteManyArgs>(args?: SelectSubset<T, PlatformDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platforms
     * const platform = await prisma.platform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlatformUpdateManyArgs>(args: SelectSubset<T, PlatformUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms and returns the data updated in the database.
     * @param {PlatformUpdateManyAndReturnArgs} args - Arguments to update many Platforms.
     * @example
     * // Update many Platforms
     * const platform = await prisma.platform.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Platforms and only return the `id`
     * const platformWithIdOnly = await prisma.platform.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlatformUpdateManyAndReturnArgs>(args: SelectSubset<T, PlatformUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Platform.
     * @param {PlatformUpsertArgs} args - Arguments to update or create a Platform.
     * @example
     * // Update or create a Platform
     * const platform = await prisma.platform.upsert({
     *   create: {
     *     // ... data to create a Platform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Platform we want to update
     *   }
     * })
     */
    upsert<T extends PlatformUpsertArgs>(args: SelectSubset<T, PlatformUpsertArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformCountArgs} args - Arguments to filter Platforms to count.
     * @example
     * // Count the number of Platforms
     * const count = await prisma.platform.count({
     *   where: {
     *     // ... the filter for the Platforms we want to count
     *   }
     * })
    **/
    count<T extends PlatformCountArgs>(
      args?: Subset<T, PlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatformAggregateArgs>(args: Subset<T, PlatformAggregateArgs>): Prisma.PrismaPromise<GetPlatformAggregateType<T>>

    /**
     * Group by Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatformGroupByArgs['orderBy'] }
        : { orderBy?: PlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Platform model
   */
  readonly fields: PlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Platform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gamePlatforms<T extends Platform$gamePlatformsArgs<ExtArgs> = {}>(args?: Subset<T, Platform$gamePlatformsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredPlatforms<T extends Platform$preferredPlatformsArgs<ExtArgs> = {}>(args?: Subset<T, Platform$preferredPlatformsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Platform model
   */
  interface PlatformFieldRefs {
    readonly id: FieldRef<"Platform", 'Int'>
    readonly name: FieldRef<"Platform", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Platform findUnique
   */
  export type PlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform findUniqueOrThrow
   */
  export type PlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform findFirst
   */
  export type PlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform findFirstOrThrow
   */
  export type PlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform findMany
   */
  export type PlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platforms to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform create
   */
  export type PlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a Platform.
     */
    data: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
  }

  /**
   * Platform createMany
   */
  export type PlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Platform createManyAndReturn
   */
  export type PlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Platform update
   */
  export type PlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a Platform.
     */
    data: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
    /**
     * Choose, which Platform to update.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform updateMany
   */
  export type PlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Platforms.
     */
    data: XOR<PlatformUpdateManyMutationInput, PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Platforms to update
     */
    where?: PlatformWhereInput
    /**
     * Limit how many Platforms to update.
     */
    limit?: number
  }

  /**
   * Platform updateManyAndReturn
   */
  export type PlatformUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * The data used to update Platforms.
     */
    data: XOR<PlatformUpdateManyMutationInput, PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Platforms to update
     */
    where?: PlatformWhereInput
    /**
     * Limit how many Platforms to update.
     */
    limit?: number
  }

  /**
   * Platform upsert
   */
  export type PlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the Platform to update in case it exists.
     */
    where: PlatformWhereUniqueInput
    /**
     * In case the Platform found by the `where` argument doesn't exist, create a new Platform with this data.
     */
    create: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
    /**
     * In case the Platform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
  }

  /**
   * Platform delete
   */
  export type PlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter which Platform to delete.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform deleteMany
   */
  export type PlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platforms to delete
     */
    where?: PlatformWhereInput
    /**
     * Limit how many Platforms to delete.
     */
    limit?: number
  }

  /**
   * Platform.gamePlatforms
   */
  export type Platform$gamePlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    where?: GamePlatformWhereInput
    orderBy?: GamePlatformOrderByWithRelationInput | GamePlatformOrderByWithRelationInput[]
    cursor?: GamePlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GamePlatformScalarFieldEnum | GamePlatformScalarFieldEnum[]
  }

  /**
   * Platform.preferredPlatforms
   */
  export type Platform$preferredPlatformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    where?: PreferredPlatformWhereInput
    orderBy?: PreferredPlatformOrderByWithRelationInput | PreferredPlatformOrderByWithRelationInput[]
    cursor?: PreferredPlatformWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferredPlatformScalarFieldEnum | PreferredPlatformScalarFieldEnum[]
  }

  /**
   * Platform without action
   */
  export type PlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Platform
     */
    omit?: PlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
  }


  /**
   * Model Genre
   */

  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    id: number | null
  }

  export type GenreSumAggregateOutputType = {
    id: number | null
  }

  export type GenreMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    id?: true
  }

  export type GenreSumAggregateInputType = {
    id?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genre to aggregate.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GenreWhereInput
    orderBy?: GenreOrderByWithAggregationInput | GenreOrderByWithAggregationInput[]
    by: GenreScalarFieldEnum[] | GenreScalarFieldEnum
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }

  export type GenreGroupByOutputType = {
    id: number
    name: string
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gameGenres?: boolean | Genre$gameGenresArgs<ExtArgs>
    preferredGenres?: boolean | Genre$preferredGenresArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["genre"]>

  export type GenreSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type GenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["genre"]>
  export type GenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameGenres?: boolean | Genre$gameGenresArgs<ExtArgs>
    preferredGenres?: boolean | Genre$preferredGenresArgs<ExtArgs>
    _count?: boolean | GenreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GenreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GenreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Genre"
    objects: {
      gameGenres: Prisma.$GameGenrePayload<ExtArgs>[]
      preferredGenres: Prisma.$PreferredGenrePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["genre"]>
    composites: {}
  }

  type GenreGetPayload<S extends boolean | null | undefined | GenreDefaultArgs> = $Result.GetResult<Prisma.$GenrePayload, S>

  type GenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GenreCountAggregateInputType | true
    }

  export interface GenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genre'], meta: { name: 'Genre' } }
    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GenreFindUniqueArgs>(args: SelectSubset<T, GenreFindUniqueArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Genre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(args: SelectSubset<T, GenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GenreFindFirstArgs>(args?: SelectSubset<T, GenreFindFirstArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(args?: SelectSubset<T, GenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GenreFindManyArgs>(args?: SelectSubset<T, GenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
     */
    create<T extends GenreCreateArgs>(args: SelectSubset<T, GenreCreateArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Genres.
     * @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GenreCreateManyArgs>(args?: SelectSubset<T, GenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Genres and returns the data saved in the database.
     * @param {GenreCreateManyAndReturnArgs} args - Arguments to create many Genres.
     * @example
     * // Create many Genres
     * const genre = await prisma.genre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Genres and only return the `id`
     * const genreWithIdOnly = await prisma.genre.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GenreCreateManyAndReturnArgs>(args?: SelectSubset<T, GenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
     */
    delete<T extends GenreDeleteArgs>(args: SelectSubset<T, GenreDeleteArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GenreUpdateArgs>(args: SelectSubset<T, GenreUpdateArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GenreDeleteManyArgs>(args?: SelectSubset<T, GenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GenreUpdateManyArgs>(args: SelectSubset<T, GenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres and returns the data updated in the database.
     * @param {GenreUpdateManyAndReturnArgs} args - Arguments to update many Genres.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Genres and only return the `id`
     * const genreWithIdOnly = await prisma.genre.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GenreUpdateManyAndReturnArgs>(args: SelectSubset<T, GenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
     */
    upsert<T extends GenreUpsertArgs>(args: SelectSubset<T, GenreUpsertArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Genre model
   */
  readonly fields: GenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameGenres<T extends Genre$gameGenresArgs<ExtArgs> = {}>(args?: Subset<T, Genre$gameGenresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredGenres<T extends Genre$preferredGenresArgs<ExtArgs> = {}>(args?: Subset<T, Genre$preferredGenresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Genre model
   */
  interface GenreFieldRefs {
    readonly id: FieldRef<"Genre", 'Int'>
    readonly name: FieldRef<"Genre", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Genre findUnique
   */
  export type GenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findFirst
   */
  export type GenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre findMany
   */
  export type GenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter, which Genres to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: GenreOrderByWithRelationInput | GenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    distinct?: GenreScalarFieldEnum | GenreScalarFieldEnum[]
  }

  /**
   * Genre create
   */
  export type GenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The data needed to create a Genre.
     */
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }

  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Genres.
     */
    data: GenreCreateManyInput | GenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genre createManyAndReturn
   */
  export type GenreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * The data used to create many Genres.
     */
    data: GenreCreateManyInput | GenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genre update
   */
  export type GenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The data needed to update a Genre.
     */
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to update.
     */
    limit?: number
  }

  /**
   * Genre updateManyAndReturn
   */
  export type GenreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to update.
     */
    limit?: number
  }

  /**
   * Genre upsert
   */
  export type GenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * The filter to search for the Genre to update in case it exists.
     */
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     */
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }

  /**
   * Genre delete
   */
  export type GenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
    /**
     * Filter which Genre to delete.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genres to delete
     */
    where?: GenreWhereInput
    /**
     * Limit how many Genres to delete.
     */
    limit?: number
  }

  /**
   * Genre.gameGenres
   */
  export type Genre$gameGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    where?: GameGenreWhereInput
    orderBy?: GameGenreOrderByWithRelationInput | GameGenreOrderByWithRelationInput[]
    cursor?: GameGenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameGenreScalarFieldEnum | GameGenreScalarFieldEnum[]
  }

  /**
   * Genre.preferredGenres
   */
  export type Genre$preferredGenresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    where?: PreferredGenreWhereInput
    orderBy?: PreferredGenreOrderByWithRelationInput | PreferredGenreOrderByWithRelationInput[]
    cursor?: PreferredGenreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferredGenreScalarFieldEnum | PreferredGenreScalarFieldEnum[]
  }

  /**
   * Genre without action
   */
  export type GenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genre
     */
    omit?: GenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GenreInclude<ExtArgs> | null
  }


  /**
   * Model Theme
   */

  export type AggregateTheme = {
    _count: ThemeCountAggregateOutputType | null
    _avg: ThemeAvgAggregateOutputType | null
    _sum: ThemeSumAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  export type ThemeAvgAggregateOutputType = {
    id: number | null
  }

  export type ThemeSumAggregateOutputType = {
    id: number | null
  }

  export type ThemeMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ThemeMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ThemeCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ThemeAvgAggregateInputType = {
    id?: true
  }

  export type ThemeSumAggregateInputType = {
    id?: true
  }

  export type ThemeMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ThemeMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ThemeCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Theme to aggregate.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Themes
    **/
    _count?: true | ThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThemeMaxAggregateInputType
  }

  export type GetThemeAggregateType<T extends ThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTheme[P]>
      : GetScalarType<T[P], AggregateTheme[P]>
  }




  export type ThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ThemeWhereInput
    orderBy?: ThemeOrderByWithAggregationInput | ThemeOrderByWithAggregationInput[]
    by: ThemeScalarFieldEnum[] | ThemeScalarFieldEnum
    having?: ThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThemeCountAggregateInputType | true
    _avg?: ThemeAvgAggregateInputType
    _sum?: ThemeSumAggregateInputType
    _min?: ThemeMinAggregateInputType
    _max?: ThemeMaxAggregateInputType
  }

  export type ThemeGroupByOutputType = {
    id: number
    name: string
    _count: ThemeCountAggregateOutputType | null
    _avg: ThemeAvgAggregateOutputType | null
    _sum: ThemeSumAggregateOutputType | null
    _min: ThemeMinAggregateOutputType | null
    _max: ThemeMaxAggregateOutputType | null
  }

  type GetThemeGroupByPayload<T extends ThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThemeGroupByOutputType[P]>
            : GetScalarType<T[P], ThemeGroupByOutputType[P]>
        }
      >
    >


  export type ThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    gameThemes?: boolean | Theme$gameThemesArgs<ExtArgs>
    preferredThemes?: boolean | Theme$preferredThemesArgs<ExtArgs>
    _count?: boolean | ThemeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["theme"]>

  export type ThemeSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["theme"]>
  export type ThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gameThemes?: boolean | Theme$gameThemesArgs<ExtArgs>
    preferredThemes?: boolean | Theme$preferredThemesArgs<ExtArgs>
    _count?: boolean | ThemeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ThemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ThemeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Theme"
    objects: {
      gameThemes: Prisma.$GameThemePayload<ExtArgs>[]
      preferredThemes: Prisma.$PreferredThemePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["theme"]>
    composites: {}
  }

  type ThemeGetPayload<S extends boolean | null | undefined | ThemeDefaultArgs> = $Result.GetResult<Prisma.$ThemePayload, S>

  type ThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ThemeCountAggregateInputType | true
    }

  export interface ThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Theme'], meta: { name: 'Theme' } }
    /**
     * Find zero or one Theme that matches the filter.
     * @param {ThemeFindUniqueArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ThemeFindUniqueArgs>(args: SelectSubset<T, ThemeFindUniqueArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Theme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ThemeFindUniqueOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, ThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ThemeFindFirstArgs>(args?: SelectSubset<T, ThemeFindFirstArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Theme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindFirstOrThrowArgs} args - Arguments to find a Theme
     * @example
     * // Get one Theme
     * const theme = await prisma.theme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, ThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Themes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Themes
     * const themes = await prisma.theme.findMany()
     * 
     * // Get first 10 Themes
     * const themes = await prisma.theme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const themeWithIdOnly = await prisma.theme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ThemeFindManyArgs>(args?: SelectSubset<T, ThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Theme.
     * @param {ThemeCreateArgs} args - Arguments to create a Theme.
     * @example
     * // Create one Theme
     * const Theme = await prisma.theme.create({
     *   data: {
     *     // ... data to create a Theme
     *   }
     * })
     * 
     */
    create<T extends ThemeCreateArgs>(args: SelectSubset<T, ThemeCreateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Themes.
     * @param {ThemeCreateManyArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ThemeCreateManyArgs>(args?: SelectSubset<T, ThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Themes and returns the data saved in the database.
     * @param {ThemeCreateManyAndReturnArgs} args - Arguments to create many Themes.
     * @example
     * // Create many Themes
     * const theme = await prisma.theme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, ThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Theme.
     * @param {ThemeDeleteArgs} args - Arguments to delete one Theme.
     * @example
     * // Delete one Theme
     * const Theme = await prisma.theme.delete({
     *   where: {
     *     // ... filter to delete one Theme
     *   }
     * })
     * 
     */
    delete<T extends ThemeDeleteArgs>(args: SelectSubset<T, ThemeDeleteArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Theme.
     * @param {ThemeUpdateArgs} args - Arguments to update one Theme.
     * @example
     * // Update one Theme
     * const theme = await prisma.theme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ThemeUpdateArgs>(args: SelectSubset<T, ThemeUpdateArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Themes.
     * @param {ThemeDeleteManyArgs} args - Arguments to filter Themes to delete.
     * @example
     * // Delete a few Themes
     * const { count } = await prisma.theme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ThemeDeleteManyArgs>(args?: SelectSubset<T, ThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ThemeUpdateManyArgs>(args: SelectSubset<T, ThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Themes and returns the data updated in the database.
     * @param {ThemeUpdateManyAndReturnArgs} args - Arguments to update many Themes.
     * @example
     * // Update many Themes
     * const theme = await prisma.theme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Themes and only return the `id`
     * const themeWithIdOnly = await prisma.theme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ThemeUpdateManyAndReturnArgs>(args: SelectSubset<T, ThemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Theme.
     * @param {ThemeUpsertArgs} args - Arguments to update or create a Theme.
     * @example
     * // Update or create a Theme
     * const theme = await prisma.theme.upsert({
     *   create: {
     *     // ... data to create a Theme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Theme we want to update
     *   }
     * })
     */
    upsert<T extends ThemeUpsertArgs>(args: SelectSubset<T, ThemeUpsertArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Themes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeCountArgs} args - Arguments to filter Themes to count.
     * @example
     * // Count the number of Themes
     * const count = await prisma.theme.count({
     *   where: {
     *     // ... the filter for the Themes we want to count
     *   }
     * })
    **/
    count<T extends ThemeCountArgs>(
      args?: Subset<T, ThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThemeAggregateArgs>(args: Subset<T, ThemeAggregateArgs>): Prisma.PrismaPromise<GetThemeAggregateType<T>>

    /**
     * Group by Theme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThemeGroupByArgs['orderBy'] }
        : { orderBy?: ThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Theme model
   */
  readonly fields: ThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Theme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gameThemes<T extends Theme$gameThemesArgs<ExtArgs> = {}>(args?: Subset<T, Theme$gameThemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    preferredThemes<T extends Theme$preferredThemesArgs<ExtArgs> = {}>(args?: Subset<T, Theme$preferredThemesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Theme model
   */
  interface ThemeFieldRefs {
    readonly id: FieldRef<"Theme", 'Int'>
    readonly name: FieldRef<"Theme", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Theme findUnique
   */
  export type ThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findUniqueOrThrow
   */
  export type ThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme findFirst
   */
  export type ThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findFirstOrThrow
   */
  export type ThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Theme to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Themes.
     */
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme findMany
   */
  export type ThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter, which Themes to fetch.
     */
    where?: ThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Themes to fetch.
     */
    orderBy?: ThemeOrderByWithRelationInput | ThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Themes.
     */
    cursor?: ThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Themes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Themes.
     */
    skip?: number
    distinct?: ThemeScalarFieldEnum | ThemeScalarFieldEnum[]
  }

  /**
   * Theme create
   */
  export type ThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a Theme.
     */
    data: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
  }

  /**
   * Theme createMany
   */
  export type ThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme createManyAndReturn
   */
  export type ThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data used to create many Themes.
     */
    data: ThemeCreateManyInput | ThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Theme update
   */
  export type ThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a Theme.
     */
    data: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
    /**
     * Choose, which Theme to update.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme updateMany
   */
  export type ThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme updateManyAndReturn
   */
  export type ThemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * The data used to update Themes.
     */
    data: XOR<ThemeUpdateManyMutationInput, ThemeUncheckedUpdateManyInput>
    /**
     * Filter which Themes to update
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to update.
     */
    limit?: number
  }

  /**
   * Theme upsert
   */
  export type ThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the Theme to update in case it exists.
     */
    where: ThemeWhereUniqueInput
    /**
     * In case the Theme found by the `where` argument doesn't exist, create a new Theme with this data.
     */
    create: XOR<ThemeCreateInput, ThemeUncheckedCreateInput>
    /**
     * In case the Theme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThemeUpdateInput, ThemeUncheckedUpdateInput>
  }

  /**
   * Theme delete
   */
  export type ThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
    /**
     * Filter which Theme to delete.
     */
    where: ThemeWhereUniqueInput
  }

  /**
   * Theme deleteMany
   */
  export type ThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Themes to delete
     */
    where?: ThemeWhereInput
    /**
     * Limit how many Themes to delete.
     */
    limit?: number
  }

  /**
   * Theme.gameThemes
   */
  export type Theme$gameThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    where?: GameThemeWhereInput
    orderBy?: GameThemeOrderByWithRelationInput | GameThemeOrderByWithRelationInput[]
    cursor?: GameThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameThemeScalarFieldEnum | GameThemeScalarFieldEnum[]
  }

  /**
   * Theme.preferredThemes
   */
  export type Theme$preferredThemesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    where?: PreferredThemeWhereInput
    orderBy?: PreferredThemeOrderByWithRelationInput | PreferredThemeOrderByWithRelationInput[]
    cursor?: PreferredThemeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PreferredThemeScalarFieldEnum | PreferredThemeScalarFieldEnum[]
  }

  /**
   * Theme without action
   */
  export type ThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Theme
     */
    select?: ThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Theme
     */
    omit?: ThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ThemeInclude<ExtArgs> | null
  }


  /**
   * Model PreferredPlatform
   */

  export type AggregatePreferredPlatform = {
    _count: PreferredPlatformCountAggregateOutputType | null
    _avg: PreferredPlatformAvgAggregateOutputType | null
    _sum: PreferredPlatformSumAggregateOutputType | null
    _min: PreferredPlatformMinAggregateOutputType | null
    _max: PreferredPlatformMaxAggregateOutputType | null
  }

  export type PreferredPlatformAvgAggregateOutputType = {
    id: number | null
    platformId: number | null
  }

  export type PreferredPlatformSumAggregateOutputType = {
    id: number | null
    platformId: number | null
  }

  export type PreferredPlatformMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    platformId: number | null
  }

  export type PreferredPlatformMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    platformId: number | null
  }

  export type PreferredPlatformCountAggregateOutputType = {
    id: number
    memberId: number
    platformId: number
    _all: number
  }


  export type PreferredPlatformAvgAggregateInputType = {
    id?: true
    platformId?: true
  }

  export type PreferredPlatformSumAggregateInputType = {
    id?: true
    platformId?: true
  }

  export type PreferredPlatformMinAggregateInputType = {
    id?: true
    memberId?: true
    platformId?: true
  }

  export type PreferredPlatformMaxAggregateInputType = {
    id?: true
    memberId?: true
    platformId?: true
  }

  export type PreferredPlatformCountAggregateInputType = {
    id?: true
    memberId?: true
    platformId?: true
    _all?: true
  }

  export type PreferredPlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferredPlatform to aggregate.
     */
    where?: PreferredPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredPlatforms to fetch.
     */
    orderBy?: PreferredPlatformOrderByWithRelationInput | PreferredPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferredPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreferredPlatforms
    **/
    _count?: true | PreferredPlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferredPlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferredPlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferredPlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferredPlatformMaxAggregateInputType
  }

  export type GetPreferredPlatformAggregateType<T extends PreferredPlatformAggregateArgs> = {
        [P in keyof T & keyof AggregatePreferredPlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreferredPlatform[P]>
      : GetScalarType<T[P], AggregatePreferredPlatform[P]>
  }




  export type PreferredPlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredPlatformWhereInput
    orderBy?: PreferredPlatformOrderByWithAggregationInput | PreferredPlatformOrderByWithAggregationInput[]
    by: PreferredPlatformScalarFieldEnum[] | PreferredPlatformScalarFieldEnum
    having?: PreferredPlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferredPlatformCountAggregateInputType | true
    _avg?: PreferredPlatformAvgAggregateInputType
    _sum?: PreferredPlatformSumAggregateInputType
    _min?: PreferredPlatformMinAggregateInputType
    _max?: PreferredPlatformMaxAggregateInputType
  }

  export type PreferredPlatformGroupByOutputType = {
    id: number
    memberId: string
    platformId: number
    _count: PreferredPlatformCountAggregateOutputType | null
    _avg: PreferredPlatformAvgAggregateOutputType | null
    _sum: PreferredPlatformSumAggregateOutputType | null
    _min: PreferredPlatformMinAggregateOutputType | null
    _max: PreferredPlatformMaxAggregateOutputType | null
  }

  type GetPreferredPlatformGroupByPayload<T extends PreferredPlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferredPlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferredPlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferredPlatformGroupByOutputType[P]>
            : GetScalarType<T[P], PreferredPlatformGroupByOutputType[P]>
        }
      >
    >


  export type PreferredPlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    platformId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredPlatform"]>

  export type PreferredPlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    platformId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredPlatform"]>

  export type PreferredPlatformSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    platformId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredPlatform"]>

  export type PreferredPlatformSelectScalar = {
    id?: boolean
    memberId?: boolean
    platformId?: boolean
  }

  export type PreferredPlatformOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "platformId", ExtArgs["result"]["preferredPlatform"]>
  export type PreferredPlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }
  export type PreferredPlatformIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }
  export type PreferredPlatformIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }

  export type $PreferredPlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreferredPlatform"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      platform: Prisma.$PlatformPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      platformId: number
    }, ExtArgs["result"]["preferredPlatform"]>
    composites: {}
  }

  type PreferredPlatformGetPayload<S extends boolean | null | undefined | PreferredPlatformDefaultArgs> = $Result.GetResult<Prisma.$PreferredPlatformPayload, S>

  type PreferredPlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreferredPlatformFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreferredPlatformCountAggregateInputType | true
    }

  export interface PreferredPlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreferredPlatform'], meta: { name: 'PreferredPlatform' } }
    /**
     * Find zero or one PreferredPlatform that matches the filter.
     * @param {PreferredPlatformFindUniqueArgs} args - Arguments to find a PreferredPlatform
     * @example
     * // Get one PreferredPlatform
     * const preferredPlatform = await prisma.preferredPlatform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferredPlatformFindUniqueArgs>(args: SelectSubset<T, PreferredPlatformFindUniqueArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreferredPlatform that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreferredPlatformFindUniqueOrThrowArgs} args - Arguments to find a PreferredPlatform
     * @example
     * // Get one PreferredPlatform
     * const preferredPlatform = await prisma.preferredPlatform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferredPlatformFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferredPlatformFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferredPlatform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformFindFirstArgs} args - Arguments to find a PreferredPlatform
     * @example
     * // Get one PreferredPlatform
     * const preferredPlatform = await prisma.preferredPlatform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferredPlatformFindFirstArgs>(args?: SelectSubset<T, PreferredPlatformFindFirstArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferredPlatform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformFindFirstOrThrowArgs} args - Arguments to find a PreferredPlatform
     * @example
     * // Get one PreferredPlatform
     * const preferredPlatform = await prisma.preferredPlatform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferredPlatformFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferredPlatformFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreferredPlatforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreferredPlatforms
     * const preferredPlatforms = await prisma.preferredPlatform.findMany()
     * 
     * // Get first 10 PreferredPlatforms
     * const preferredPlatforms = await prisma.preferredPlatform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preferredPlatformWithIdOnly = await prisma.preferredPlatform.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreferredPlatformFindManyArgs>(args?: SelectSubset<T, PreferredPlatformFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreferredPlatform.
     * @param {PreferredPlatformCreateArgs} args - Arguments to create a PreferredPlatform.
     * @example
     * // Create one PreferredPlatform
     * const PreferredPlatform = await prisma.preferredPlatform.create({
     *   data: {
     *     // ... data to create a PreferredPlatform
     *   }
     * })
     * 
     */
    create<T extends PreferredPlatformCreateArgs>(args: SelectSubset<T, PreferredPlatformCreateArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreferredPlatforms.
     * @param {PreferredPlatformCreateManyArgs} args - Arguments to create many PreferredPlatforms.
     * @example
     * // Create many PreferredPlatforms
     * const preferredPlatform = await prisma.preferredPlatform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferredPlatformCreateManyArgs>(args?: SelectSubset<T, PreferredPlatformCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreferredPlatforms and returns the data saved in the database.
     * @param {PreferredPlatformCreateManyAndReturnArgs} args - Arguments to create many PreferredPlatforms.
     * @example
     * // Create many PreferredPlatforms
     * const preferredPlatform = await prisma.preferredPlatform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreferredPlatforms and only return the `id`
     * const preferredPlatformWithIdOnly = await prisma.preferredPlatform.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferredPlatformCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferredPlatformCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreferredPlatform.
     * @param {PreferredPlatformDeleteArgs} args - Arguments to delete one PreferredPlatform.
     * @example
     * // Delete one PreferredPlatform
     * const PreferredPlatform = await prisma.preferredPlatform.delete({
     *   where: {
     *     // ... filter to delete one PreferredPlatform
     *   }
     * })
     * 
     */
    delete<T extends PreferredPlatformDeleteArgs>(args: SelectSubset<T, PreferredPlatformDeleteArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreferredPlatform.
     * @param {PreferredPlatformUpdateArgs} args - Arguments to update one PreferredPlatform.
     * @example
     * // Update one PreferredPlatform
     * const preferredPlatform = await prisma.preferredPlatform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferredPlatformUpdateArgs>(args: SelectSubset<T, PreferredPlatformUpdateArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreferredPlatforms.
     * @param {PreferredPlatformDeleteManyArgs} args - Arguments to filter PreferredPlatforms to delete.
     * @example
     * // Delete a few PreferredPlatforms
     * const { count } = await prisma.preferredPlatform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferredPlatformDeleteManyArgs>(args?: SelectSubset<T, PreferredPlatformDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferredPlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreferredPlatforms
     * const preferredPlatform = await prisma.preferredPlatform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferredPlatformUpdateManyArgs>(args: SelectSubset<T, PreferredPlatformUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferredPlatforms and returns the data updated in the database.
     * @param {PreferredPlatformUpdateManyAndReturnArgs} args - Arguments to update many PreferredPlatforms.
     * @example
     * // Update many PreferredPlatforms
     * const preferredPlatform = await prisma.preferredPlatform.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreferredPlatforms and only return the `id`
     * const preferredPlatformWithIdOnly = await prisma.preferredPlatform.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreferredPlatformUpdateManyAndReturnArgs>(args: SelectSubset<T, PreferredPlatformUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreferredPlatform.
     * @param {PreferredPlatformUpsertArgs} args - Arguments to update or create a PreferredPlatform.
     * @example
     * // Update or create a PreferredPlatform
     * const preferredPlatform = await prisma.preferredPlatform.upsert({
     *   create: {
     *     // ... data to create a PreferredPlatform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreferredPlatform we want to update
     *   }
     * })
     */
    upsert<T extends PreferredPlatformUpsertArgs>(args: SelectSubset<T, PreferredPlatformUpsertArgs<ExtArgs>>): Prisma__PreferredPlatformClient<$Result.GetResult<Prisma.$PreferredPlatformPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreferredPlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformCountArgs} args - Arguments to filter PreferredPlatforms to count.
     * @example
     * // Count the number of PreferredPlatforms
     * const count = await prisma.preferredPlatform.count({
     *   where: {
     *     // ... the filter for the PreferredPlatforms we want to count
     *   }
     * })
    **/
    count<T extends PreferredPlatformCountArgs>(
      args?: Subset<T, PreferredPlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferredPlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreferredPlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferredPlatformAggregateArgs>(args: Subset<T, PreferredPlatformAggregateArgs>): Prisma.PrismaPromise<GetPreferredPlatformAggregateType<T>>

    /**
     * Group by PreferredPlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredPlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferredPlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferredPlatformGroupByArgs['orderBy'] }
        : { orderBy?: PreferredPlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferredPlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferredPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreferredPlatform model
   */
  readonly fields: PreferredPlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreferredPlatform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferredPlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    platform<T extends PlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlatformDefaultArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreferredPlatform model
   */
  interface PreferredPlatformFieldRefs {
    readonly id: FieldRef<"PreferredPlatform", 'Int'>
    readonly memberId: FieldRef<"PreferredPlatform", 'String'>
    readonly platformId: FieldRef<"PreferredPlatform", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PreferredPlatform findUnique
   */
  export type PreferredPlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * Filter, which PreferredPlatform to fetch.
     */
    where: PreferredPlatformWhereUniqueInput
  }

  /**
   * PreferredPlatform findUniqueOrThrow
   */
  export type PreferredPlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * Filter, which PreferredPlatform to fetch.
     */
    where: PreferredPlatformWhereUniqueInput
  }

  /**
   * PreferredPlatform findFirst
   */
  export type PreferredPlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * Filter, which PreferredPlatform to fetch.
     */
    where?: PreferredPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredPlatforms to fetch.
     */
    orderBy?: PreferredPlatformOrderByWithRelationInput | PreferredPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferredPlatforms.
     */
    cursor?: PreferredPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferredPlatforms.
     */
    distinct?: PreferredPlatformScalarFieldEnum | PreferredPlatformScalarFieldEnum[]
  }

  /**
   * PreferredPlatform findFirstOrThrow
   */
  export type PreferredPlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * Filter, which PreferredPlatform to fetch.
     */
    where?: PreferredPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredPlatforms to fetch.
     */
    orderBy?: PreferredPlatformOrderByWithRelationInput | PreferredPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferredPlatforms.
     */
    cursor?: PreferredPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredPlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferredPlatforms.
     */
    distinct?: PreferredPlatformScalarFieldEnum | PreferredPlatformScalarFieldEnum[]
  }

  /**
   * PreferredPlatform findMany
   */
  export type PreferredPlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * Filter, which PreferredPlatforms to fetch.
     */
    where?: PreferredPlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredPlatforms to fetch.
     */
    orderBy?: PreferredPlatformOrderByWithRelationInput | PreferredPlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreferredPlatforms.
     */
    cursor?: PreferredPlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredPlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredPlatforms.
     */
    skip?: number
    distinct?: PreferredPlatformScalarFieldEnum | PreferredPlatformScalarFieldEnum[]
  }

  /**
   * PreferredPlatform create
   */
  export type PreferredPlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a PreferredPlatform.
     */
    data: XOR<PreferredPlatformCreateInput, PreferredPlatformUncheckedCreateInput>
  }

  /**
   * PreferredPlatform createMany
   */
  export type PreferredPlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreferredPlatforms.
     */
    data: PreferredPlatformCreateManyInput | PreferredPlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreferredPlatform createManyAndReturn
   */
  export type PreferredPlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * The data used to create many PreferredPlatforms.
     */
    data: PreferredPlatformCreateManyInput | PreferredPlatformCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferredPlatform update
   */
  export type PreferredPlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a PreferredPlatform.
     */
    data: XOR<PreferredPlatformUpdateInput, PreferredPlatformUncheckedUpdateInput>
    /**
     * Choose, which PreferredPlatform to update.
     */
    where: PreferredPlatformWhereUniqueInput
  }

  /**
   * PreferredPlatform updateMany
   */
  export type PreferredPlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreferredPlatforms.
     */
    data: XOR<PreferredPlatformUpdateManyMutationInput, PreferredPlatformUncheckedUpdateManyInput>
    /**
     * Filter which PreferredPlatforms to update
     */
    where?: PreferredPlatformWhereInput
    /**
     * Limit how many PreferredPlatforms to update.
     */
    limit?: number
  }

  /**
   * PreferredPlatform updateManyAndReturn
   */
  export type PreferredPlatformUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * The data used to update PreferredPlatforms.
     */
    data: XOR<PreferredPlatformUpdateManyMutationInput, PreferredPlatformUncheckedUpdateManyInput>
    /**
     * Filter which PreferredPlatforms to update
     */
    where?: PreferredPlatformWhereInput
    /**
     * Limit how many PreferredPlatforms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferredPlatform upsert
   */
  export type PreferredPlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the PreferredPlatform to update in case it exists.
     */
    where: PreferredPlatformWhereUniqueInput
    /**
     * In case the PreferredPlatform found by the `where` argument doesn't exist, create a new PreferredPlatform with this data.
     */
    create: XOR<PreferredPlatformCreateInput, PreferredPlatformUncheckedCreateInput>
    /**
     * In case the PreferredPlatform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferredPlatformUpdateInput, PreferredPlatformUncheckedUpdateInput>
  }

  /**
   * PreferredPlatform delete
   */
  export type PreferredPlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
    /**
     * Filter which PreferredPlatform to delete.
     */
    where: PreferredPlatformWhereUniqueInput
  }

  /**
   * PreferredPlatform deleteMany
   */
  export type PreferredPlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferredPlatforms to delete
     */
    where?: PreferredPlatformWhereInput
    /**
     * Limit how many PreferredPlatforms to delete.
     */
    limit?: number
  }

  /**
   * PreferredPlatform without action
   */
  export type PreferredPlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredPlatform
     */
    select?: PreferredPlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredPlatform
     */
    omit?: PreferredPlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredPlatformInclude<ExtArgs> | null
  }


  /**
   * Model PreferredGenre
   */

  export type AggregatePreferredGenre = {
    _count: PreferredGenreCountAggregateOutputType | null
    _avg: PreferredGenreAvgAggregateOutputType | null
    _sum: PreferredGenreSumAggregateOutputType | null
    _min: PreferredGenreMinAggregateOutputType | null
    _max: PreferredGenreMaxAggregateOutputType | null
  }

  export type PreferredGenreAvgAggregateOutputType = {
    id: number | null
    genreId: number | null
  }

  export type PreferredGenreSumAggregateOutputType = {
    id: number | null
    genreId: number | null
  }

  export type PreferredGenreMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    genreId: number | null
  }

  export type PreferredGenreMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    genreId: number | null
  }

  export type PreferredGenreCountAggregateOutputType = {
    id: number
    memberId: number
    genreId: number
    _all: number
  }


  export type PreferredGenreAvgAggregateInputType = {
    id?: true
    genreId?: true
  }

  export type PreferredGenreSumAggregateInputType = {
    id?: true
    genreId?: true
  }

  export type PreferredGenreMinAggregateInputType = {
    id?: true
    memberId?: true
    genreId?: true
  }

  export type PreferredGenreMaxAggregateInputType = {
    id?: true
    memberId?: true
    genreId?: true
  }

  export type PreferredGenreCountAggregateInputType = {
    id?: true
    memberId?: true
    genreId?: true
    _all?: true
  }

  export type PreferredGenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferredGenre to aggregate.
     */
    where?: PreferredGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredGenres to fetch.
     */
    orderBy?: PreferredGenreOrderByWithRelationInput | PreferredGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferredGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreferredGenres
    **/
    _count?: true | PreferredGenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferredGenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferredGenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferredGenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferredGenreMaxAggregateInputType
  }

  export type GetPreferredGenreAggregateType<T extends PreferredGenreAggregateArgs> = {
        [P in keyof T & keyof AggregatePreferredGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreferredGenre[P]>
      : GetScalarType<T[P], AggregatePreferredGenre[P]>
  }




  export type PreferredGenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredGenreWhereInput
    orderBy?: PreferredGenreOrderByWithAggregationInput | PreferredGenreOrderByWithAggregationInput[]
    by: PreferredGenreScalarFieldEnum[] | PreferredGenreScalarFieldEnum
    having?: PreferredGenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferredGenreCountAggregateInputType | true
    _avg?: PreferredGenreAvgAggregateInputType
    _sum?: PreferredGenreSumAggregateInputType
    _min?: PreferredGenreMinAggregateInputType
    _max?: PreferredGenreMaxAggregateInputType
  }

  export type PreferredGenreGroupByOutputType = {
    id: number
    memberId: string
    genreId: number
    _count: PreferredGenreCountAggregateOutputType | null
    _avg: PreferredGenreAvgAggregateOutputType | null
    _sum: PreferredGenreSumAggregateOutputType | null
    _min: PreferredGenreMinAggregateOutputType | null
    _max: PreferredGenreMaxAggregateOutputType | null
  }

  type GetPreferredGenreGroupByPayload<T extends PreferredGenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferredGenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferredGenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferredGenreGroupByOutputType[P]>
            : GetScalarType<T[P], PreferredGenreGroupByOutputType[P]>
        }
      >
    >


  export type PreferredGenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    genreId?: boolean
    genre?: boolean | GenreDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredGenre"]>

  export type PreferredGenreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    genreId?: boolean
    genre?: boolean | GenreDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredGenre"]>

  export type PreferredGenreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    genreId?: boolean
    genre?: boolean | GenreDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredGenre"]>

  export type PreferredGenreSelectScalar = {
    id?: boolean
    memberId?: boolean
    genreId?: boolean
  }

  export type PreferredGenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "genreId", ExtArgs["result"]["preferredGenre"]>
  export type PreferredGenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genre?: boolean | GenreDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type PreferredGenreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genre?: boolean | GenreDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type PreferredGenreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    genre?: boolean | GenreDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $PreferredGenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreferredGenre"
    objects: {
      genre: Prisma.$GenrePayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      genreId: number
    }, ExtArgs["result"]["preferredGenre"]>
    composites: {}
  }

  type PreferredGenreGetPayload<S extends boolean | null | undefined | PreferredGenreDefaultArgs> = $Result.GetResult<Prisma.$PreferredGenrePayload, S>

  type PreferredGenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreferredGenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreferredGenreCountAggregateInputType | true
    }

  export interface PreferredGenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreferredGenre'], meta: { name: 'PreferredGenre' } }
    /**
     * Find zero or one PreferredGenre that matches the filter.
     * @param {PreferredGenreFindUniqueArgs} args - Arguments to find a PreferredGenre
     * @example
     * // Get one PreferredGenre
     * const preferredGenre = await prisma.preferredGenre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferredGenreFindUniqueArgs>(args: SelectSubset<T, PreferredGenreFindUniqueArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreferredGenre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreferredGenreFindUniqueOrThrowArgs} args - Arguments to find a PreferredGenre
     * @example
     * // Get one PreferredGenre
     * const preferredGenre = await prisma.preferredGenre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferredGenreFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferredGenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferredGenre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreFindFirstArgs} args - Arguments to find a PreferredGenre
     * @example
     * // Get one PreferredGenre
     * const preferredGenre = await prisma.preferredGenre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferredGenreFindFirstArgs>(args?: SelectSubset<T, PreferredGenreFindFirstArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferredGenre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreFindFirstOrThrowArgs} args - Arguments to find a PreferredGenre
     * @example
     * // Get one PreferredGenre
     * const preferredGenre = await prisma.preferredGenre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferredGenreFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferredGenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreferredGenres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreferredGenres
     * const preferredGenres = await prisma.preferredGenre.findMany()
     * 
     * // Get first 10 PreferredGenres
     * const preferredGenres = await prisma.preferredGenre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preferredGenreWithIdOnly = await prisma.preferredGenre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreferredGenreFindManyArgs>(args?: SelectSubset<T, PreferredGenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreferredGenre.
     * @param {PreferredGenreCreateArgs} args - Arguments to create a PreferredGenre.
     * @example
     * // Create one PreferredGenre
     * const PreferredGenre = await prisma.preferredGenre.create({
     *   data: {
     *     // ... data to create a PreferredGenre
     *   }
     * })
     * 
     */
    create<T extends PreferredGenreCreateArgs>(args: SelectSubset<T, PreferredGenreCreateArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreferredGenres.
     * @param {PreferredGenreCreateManyArgs} args - Arguments to create many PreferredGenres.
     * @example
     * // Create many PreferredGenres
     * const preferredGenre = await prisma.preferredGenre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferredGenreCreateManyArgs>(args?: SelectSubset<T, PreferredGenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreferredGenres and returns the data saved in the database.
     * @param {PreferredGenreCreateManyAndReturnArgs} args - Arguments to create many PreferredGenres.
     * @example
     * // Create many PreferredGenres
     * const preferredGenre = await prisma.preferredGenre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreferredGenres and only return the `id`
     * const preferredGenreWithIdOnly = await prisma.preferredGenre.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferredGenreCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferredGenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreferredGenre.
     * @param {PreferredGenreDeleteArgs} args - Arguments to delete one PreferredGenre.
     * @example
     * // Delete one PreferredGenre
     * const PreferredGenre = await prisma.preferredGenre.delete({
     *   where: {
     *     // ... filter to delete one PreferredGenre
     *   }
     * })
     * 
     */
    delete<T extends PreferredGenreDeleteArgs>(args: SelectSubset<T, PreferredGenreDeleteArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreferredGenre.
     * @param {PreferredGenreUpdateArgs} args - Arguments to update one PreferredGenre.
     * @example
     * // Update one PreferredGenre
     * const preferredGenre = await prisma.preferredGenre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferredGenreUpdateArgs>(args: SelectSubset<T, PreferredGenreUpdateArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreferredGenres.
     * @param {PreferredGenreDeleteManyArgs} args - Arguments to filter PreferredGenres to delete.
     * @example
     * // Delete a few PreferredGenres
     * const { count } = await prisma.preferredGenre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferredGenreDeleteManyArgs>(args?: SelectSubset<T, PreferredGenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferredGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreferredGenres
     * const preferredGenre = await prisma.preferredGenre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferredGenreUpdateManyArgs>(args: SelectSubset<T, PreferredGenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferredGenres and returns the data updated in the database.
     * @param {PreferredGenreUpdateManyAndReturnArgs} args - Arguments to update many PreferredGenres.
     * @example
     * // Update many PreferredGenres
     * const preferredGenre = await prisma.preferredGenre.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreferredGenres and only return the `id`
     * const preferredGenreWithIdOnly = await prisma.preferredGenre.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreferredGenreUpdateManyAndReturnArgs>(args: SelectSubset<T, PreferredGenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreferredGenre.
     * @param {PreferredGenreUpsertArgs} args - Arguments to update or create a PreferredGenre.
     * @example
     * // Update or create a PreferredGenre
     * const preferredGenre = await prisma.preferredGenre.upsert({
     *   create: {
     *     // ... data to create a PreferredGenre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreferredGenre we want to update
     *   }
     * })
     */
    upsert<T extends PreferredGenreUpsertArgs>(args: SelectSubset<T, PreferredGenreUpsertArgs<ExtArgs>>): Prisma__PreferredGenreClient<$Result.GetResult<Prisma.$PreferredGenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreferredGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreCountArgs} args - Arguments to filter PreferredGenres to count.
     * @example
     * // Count the number of PreferredGenres
     * const count = await prisma.preferredGenre.count({
     *   where: {
     *     // ... the filter for the PreferredGenres we want to count
     *   }
     * })
    **/
    count<T extends PreferredGenreCountArgs>(
      args?: Subset<T, PreferredGenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferredGenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreferredGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferredGenreAggregateArgs>(args: Subset<T, PreferredGenreAggregateArgs>): Prisma.PrismaPromise<GetPreferredGenreAggregateType<T>>

    /**
     * Group by PreferredGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredGenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferredGenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferredGenreGroupByArgs['orderBy'] }
        : { orderBy?: PreferredGenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferredGenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferredGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreferredGenre model
   */
  readonly fields: PreferredGenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreferredGenre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferredGenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    genre<T extends GenreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GenreDefaultArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreferredGenre model
   */
  interface PreferredGenreFieldRefs {
    readonly id: FieldRef<"PreferredGenre", 'Int'>
    readonly memberId: FieldRef<"PreferredGenre", 'String'>
    readonly genreId: FieldRef<"PreferredGenre", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PreferredGenre findUnique
   */
  export type PreferredGenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * Filter, which PreferredGenre to fetch.
     */
    where: PreferredGenreWhereUniqueInput
  }

  /**
   * PreferredGenre findUniqueOrThrow
   */
  export type PreferredGenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * Filter, which PreferredGenre to fetch.
     */
    where: PreferredGenreWhereUniqueInput
  }

  /**
   * PreferredGenre findFirst
   */
  export type PreferredGenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * Filter, which PreferredGenre to fetch.
     */
    where?: PreferredGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredGenres to fetch.
     */
    orderBy?: PreferredGenreOrderByWithRelationInput | PreferredGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferredGenres.
     */
    cursor?: PreferredGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferredGenres.
     */
    distinct?: PreferredGenreScalarFieldEnum | PreferredGenreScalarFieldEnum[]
  }

  /**
   * PreferredGenre findFirstOrThrow
   */
  export type PreferredGenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * Filter, which PreferredGenre to fetch.
     */
    where?: PreferredGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredGenres to fetch.
     */
    orderBy?: PreferredGenreOrderByWithRelationInput | PreferredGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferredGenres.
     */
    cursor?: PreferredGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferredGenres.
     */
    distinct?: PreferredGenreScalarFieldEnum | PreferredGenreScalarFieldEnum[]
  }

  /**
   * PreferredGenre findMany
   */
  export type PreferredGenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * Filter, which PreferredGenres to fetch.
     */
    where?: PreferredGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredGenres to fetch.
     */
    orderBy?: PreferredGenreOrderByWithRelationInput | PreferredGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreferredGenres.
     */
    cursor?: PreferredGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredGenres.
     */
    skip?: number
    distinct?: PreferredGenreScalarFieldEnum | PreferredGenreScalarFieldEnum[]
  }

  /**
   * PreferredGenre create
   */
  export type PreferredGenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * The data needed to create a PreferredGenre.
     */
    data: XOR<PreferredGenreCreateInput, PreferredGenreUncheckedCreateInput>
  }

  /**
   * PreferredGenre createMany
   */
  export type PreferredGenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreferredGenres.
     */
    data: PreferredGenreCreateManyInput | PreferredGenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreferredGenre createManyAndReturn
   */
  export type PreferredGenreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * The data used to create many PreferredGenres.
     */
    data: PreferredGenreCreateManyInput | PreferredGenreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferredGenre update
   */
  export type PreferredGenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * The data needed to update a PreferredGenre.
     */
    data: XOR<PreferredGenreUpdateInput, PreferredGenreUncheckedUpdateInput>
    /**
     * Choose, which PreferredGenre to update.
     */
    where: PreferredGenreWhereUniqueInput
  }

  /**
   * PreferredGenre updateMany
   */
  export type PreferredGenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreferredGenres.
     */
    data: XOR<PreferredGenreUpdateManyMutationInput, PreferredGenreUncheckedUpdateManyInput>
    /**
     * Filter which PreferredGenres to update
     */
    where?: PreferredGenreWhereInput
    /**
     * Limit how many PreferredGenres to update.
     */
    limit?: number
  }

  /**
   * PreferredGenre updateManyAndReturn
   */
  export type PreferredGenreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * The data used to update PreferredGenres.
     */
    data: XOR<PreferredGenreUpdateManyMutationInput, PreferredGenreUncheckedUpdateManyInput>
    /**
     * Filter which PreferredGenres to update
     */
    where?: PreferredGenreWhereInput
    /**
     * Limit how many PreferredGenres to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferredGenre upsert
   */
  export type PreferredGenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * The filter to search for the PreferredGenre to update in case it exists.
     */
    where: PreferredGenreWhereUniqueInput
    /**
     * In case the PreferredGenre found by the `where` argument doesn't exist, create a new PreferredGenre with this data.
     */
    create: XOR<PreferredGenreCreateInput, PreferredGenreUncheckedCreateInput>
    /**
     * In case the PreferredGenre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferredGenreUpdateInput, PreferredGenreUncheckedUpdateInput>
  }

  /**
   * PreferredGenre delete
   */
  export type PreferredGenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
    /**
     * Filter which PreferredGenre to delete.
     */
    where: PreferredGenreWhereUniqueInput
  }

  /**
   * PreferredGenre deleteMany
   */
  export type PreferredGenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferredGenres to delete
     */
    where?: PreferredGenreWhereInput
    /**
     * Limit how many PreferredGenres to delete.
     */
    limit?: number
  }

  /**
   * PreferredGenre without action
   */
  export type PreferredGenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredGenre
     */
    select?: PreferredGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredGenre
     */
    omit?: PreferredGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredGenreInclude<ExtArgs> | null
  }


  /**
   * Model PreferredTheme
   */

  export type AggregatePreferredTheme = {
    _count: PreferredThemeCountAggregateOutputType | null
    _avg: PreferredThemeAvgAggregateOutputType | null
    _sum: PreferredThemeSumAggregateOutputType | null
    _min: PreferredThemeMinAggregateOutputType | null
    _max: PreferredThemeMaxAggregateOutputType | null
  }

  export type PreferredThemeAvgAggregateOutputType = {
    id: number | null
    themeId: number | null
  }

  export type PreferredThemeSumAggregateOutputType = {
    id: number | null
    themeId: number | null
  }

  export type PreferredThemeMinAggregateOutputType = {
    id: number | null
    memberId: string | null
    themeId: number | null
  }

  export type PreferredThemeMaxAggregateOutputType = {
    id: number | null
    memberId: string | null
    themeId: number | null
  }

  export type PreferredThemeCountAggregateOutputType = {
    id: number
    memberId: number
    themeId: number
    _all: number
  }


  export type PreferredThemeAvgAggregateInputType = {
    id?: true
    themeId?: true
  }

  export type PreferredThemeSumAggregateInputType = {
    id?: true
    themeId?: true
  }

  export type PreferredThemeMinAggregateInputType = {
    id?: true
    memberId?: true
    themeId?: true
  }

  export type PreferredThemeMaxAggregateInputType = {
    id?: true
    memberId?: true
    themeId?: true
  }

  export type PreferredThemeCountAggregateInputType = {
    id?: true
    memberId?: true
    themeId?: true
    _all?: true
  }

  export type PreferredThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferredTheme to aggregate.
     */
    where?: PreferredThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredThemes to fetch.
     */
    orderBy?: PreferredThemeOrderByWithRelationInput | PreferredThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PreferredThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PreferredThemes
    **/
    _count?: true | PreferredThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PreferredThemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PreferredThemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PreferredThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PreferredThemeMaxAggregateInputType
  }

  export type GetPreferredThemeAggregateType<T extends PreferredThemeAggregateArgs> = {
        [P in keyof T & keyof AggregatePreferredTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePreferredTheme[P]>
      : GetScalarType<T[P], AggregatePreferredTheme[P]>
  }




  export type PreferredThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PreferredThemeWhereInput
    orderBy?: PreferredThemeOrderByWithAggregationInput | PreferredThemeOrderByWithAggregationInput[]
    by: PreferredThemeScalarFieldEnum[] | PreferredThemeScalarFieldEnum
    having?: PreferredThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PreferredThemeCountAggregateInputType | true
    _avg?: PreferredThemeAvgAggregateInputType
    _sum?: PreferredThemeSumAggregateInputType
    _min?: PreferredThemeMinAggregateInputType
    _max?: PreferredThemeMaxAggregateInputType
  }

  export type PreferredThemeGroupByOutputType = {
    id: number
    memberId: string
    themeId: number
    _count: PreferredThemeCountAggregateOutputType | null
    _avg: PreferredThemeAvgAggregateOutputType | null
    _sum: PreferredThemeSumAggregateOutputType | null
    _min: PreferredThemeMinAggregateOutputType | null
    _max: PreferredThemeMaxAggregateOutputType | null
  }

  type GetPreferredThemeGroupByPayload<T extends PreferredThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PreferredThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PreferredThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PreferredThemeGroupByOutputType[P]>
            : GetScalarType<T[P], PreferredThemeGroupByOutputType[P]>
        }
      >
    >


  export type PreferredThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    themeId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredTheme"]>

  export type PreferredThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    themeId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredTheme"]>

  export type PreferredThemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    memberId?: boolean
    themeId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["preferredTheme"]>

  export type PreferredThemeSelectScalar = {
    id?: boolean
    memberId?: boolean
    themeId?: boolean
  }

  export type PreferredThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "memberId" | "themeId", ExtArgs["result"]["preferredTheme"]>
  export type PreferredThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }
  export type PreferredThemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }
  export type PreferredThemeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }

  export type $PreferredThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PreferredTheme"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      theme: Prisma.$ThemePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      memberId: string
      themeId: number
    }, ExtArgs["result"]["preferredTheme"]>
    composites: {}
  }

  type PreferredThemeGetPayload<S extends boolean | null | undefined | PreferredThemeDefaultArgs> = $Result.GetResult<Prisma.$PreferredThemePayload, S>

  type PreferredThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PreferredThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PreferredThemeCountAggregateInputType | true
    }

  export interface PreferredThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PreferredTheme'], meta: { name: 'PreferredTheme' } }
    /**
     * Find zero or one PreferredTheme that matches the filter.
     * @param {PreferredThemeFindUniqueArgs} args - Arguments to find a PreferredTheme
     * @example
     * // Get one PreferredTheme
     * const preferredTheme = await prisma.preferredTheme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PreferredThemeFindUniqueArgs>(args: SelectSubset<T, PreferredThemeFindUniqueArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PreferredTheme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PreferredThemeFindUniqueOrThrowArgs} args - Arguments to find a PreferredTheme
     * @example
     * // Get one PreferredTheme
     * const preferredTheme = await prisma.preferredTheme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PreferredThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, PreferredThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferredTheme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeFindFirstArgs} args - Arguments to find a PreferredTheme
     * @example
     * // Get one PreferredTheme
     * const preferredTheme = await prisma.preferredTheme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PreferredThemeFindFirstArgs>(args?: SelectSubset<T, PreferredThemeFindFirstArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PreferredTheme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeFindFirstOrThrowArgs} args - Arguments to find a PreferredTheme
     * @example
     * // Get one PreferredTheme
     * const preferredTheme = await prisma.preferredTheme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PreferredThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, PreferredThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PreferredThemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PreferredThemes
     * const preferredThemes = await prisma.preferredTheme.findMany()
     * 
     * // Get first 10 PreferredThemes
     * const preferredThemes = await prisma.preferredTheme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const preferredThemeWithIdOnly = await prisma.preferredTheme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PreferredThemeFindManyArgs>(args?: SelectSubset<T, PreferredThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PreferredTheme.
     * @param {PreferredThemeCreateArgs} args - Arguments to create a PreferredTheme.
     * @example
     * // Create one PreferredTheme
     * const PreferredTheme = await prisma.preferredTheme.create({
     *   data: {
     *     // ... data to create a PreferredTheme
     *   }
     * })
     * 
     */
    create<T extends PreferredThemeCreateArgs>(args: SelectSubset<T, PreferredThemeCreateArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PreferredThemes.
     * @param {PreferredThemeCreateManyArgs} args - Arguments to create many PreferredThemes.
     * @example
     * // Create many PreferredThemes
     * const preferredTheme = await prisma.preferredTheme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PreferredThemeCreateManyArgs>(args?: SelectSubset<T, PreferredThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PreferredThemes and returns the data saved in the database.
     * @param {PreferredThemeCreateManyAndReturnArgs} args - Arguments to create many PreferredThemes.
     * @example
     * // Create many PreferredThemes
     * const preferredTheme = await prisma.preferredTheme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PreferredThemes and only return the `id`
     * const preferredThemeWithIdOnly = await prisma.preferredTheme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PreferredThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, PreferredThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PreferredTheme.
     * @param {PreferredThemeDeleteArgs} args - Arguments to delete one PreferredTheme.
     * @example
     * // Delete one PreferredTheme
     * const PreferredTheme = await prisma.preferredTheme.delete({
     *   where: {
     *     // ... filter to delete one PreferredTheme
     *   }
     * })
     * 
     */
    delete<T extends PreferredThemeDeleteArgs>(args: SelectSubset<T, PreferredThemeDeleteArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PreferredTheme.
     * @param {PreferredThemeUpdateArgs} args - Arguments to update one PreferredTheme.
     * @example
     * // Update one PreferredTheme
     * const preferredTheme = await prisma.preferredTheme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PreferredThemeUpdateArgs>(args: SelectSubset<T, PreferredThemeUpdateArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PreferredThemes.
     * @param {PreferredThemeDeleteManyArgs} args - Arguments to filter PreferredThemes to delete.
     * @example
     * // Delete a few PreferredThemes
     * const { count } = await prisma.preferredTheme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PreferredThemeDeleteManyArgs>(args?: SelectSubset<T, PreferredThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferredThemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PreferredThemes
     * const preferredTheme = await prisma.preferredTheme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PreferredThemeUpdateManyArgs>(args: SelectSubset<T, PreferredThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PreferredThemes and returns the data updated in the database.
     * @param {PreferredThemeUpdateManyAndReturnArgs} args - Arguments to update many PreferredThemes.
     * @example
     * // Update many PreferredThemes
     * const preferredTheme = await prisma.preferredTheme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PreferredThemes and only return the `id`
     * const preferredThemeWithIdOnly = await prisma.preferredTheme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PreferredThemeUpdateManyAndReturnArgs>(args: SelectSubset<T, PreferredThemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PreferredTheme.
     * @param {PreferredThemeUpsertArgs} args - Arguments to update or create a PreferredTheme.
     * @example
     * // Update or create a PreferredTheme
     * const preferredTheme = await prisma.preferredTheme.upsert({
     *   create: {
     *     // ... data to create a PreferredTheme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PreferredTheme we want to update
     *   }
     * })
     */
    upsert<T extends PreferredThemeUpsertArgs>(args: SelectSubset<T, PreferredThemeUpsertArgs<ExtArgs>>): Prisma__PreferredThemeClient<$Result.GetResult<Prisma.$PreferredThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PreferredThemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeCountArgs} args - Arguments to filter PreferredThemes to count.
     * @example
     * // Count the number of PreferredThemes
     * const count = await prisma.preferredTheme.count({
     *   where: {
     *     // ... the filter for the PreferredThemes we want to count
     *   }
     * })
    **/
    count<T extends PreferredThemeCountArgs>(
      args?: Subset<T, PreferredThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PreferredThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PreferredTheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PreferredThemeAggregateArgs>(args: Subset<T, PreferredThemeAggregateArgs>): Prisma.PrismaPromise<GetPreferredThemeAggregateType<T>>

    /**
     * Group by PreferredTheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PreferredThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PreferredThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PreferredThemeGroupByArgs['orderBy'] }
        : { orderBy?: PreferredThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PreferredThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPreferredThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PreferredTheme model
   */
  readonly fields: PreferredThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PreferredTheme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PreferredThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    theme<T extends ThemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThemeDefaultArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PreferredTheme model
   */
  interface PreferredThemeFieldRefs {
    readonly id: FieldRef<"PreferredTheme", 'Int'>
    readonly memberId: FieldRef<"PreferredTheme", 'String'>
    readonly themeId: FieldRef<"PreferredTheme", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PreferredTheme findUnique
   */
  export type PreferredThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * Filter, which PreferredTheme to fetch.
     */
    where: PreferredThemeWhereUniqueInput
  }

  /**
   * PreferredTheme findUniqueOrThrow
   */
  export type PreferredThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * Filter, which PreferredTheme to fetch.
     */
    where: PreferredThemeWhereUniqueInput
  }

  /**
   * PreferredTheme findFirst
   */
  export type PreferredThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * Filter, which PreferredTheme to fetch.
     */
    where?: PreferredThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredThemes to fetch.
     */
    orderBy?: PreferredThemeOrderByWithRelationInput | PreferredThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferredThemes.
     */
    cursor?: PreferredThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferredThemes.
     */
    distinct?: PreferredThemeScalarFieldEnum | PreferredThemeScalarFieldEnum[]
  }

  /**
   * PreferredTheme findFirstOrThrow
   */
  export type PreferredThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * Filter, which PreferredTheme to fetch.
     */
    where?: PreferredThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredThemes to fetch.
     */
    orderBy?: PreferredThemeOrderByWithRelationInput | PreferredThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PreferredThemes.
     */
    cursor?: PreferredThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PreferredThemes.
     */
    distinct?: PreferredThemeScalarFieldEnum | PreferredThemeScalarFieldEnum[]
  }

  /**
   * PreferredTheme findMany
   */
  export type PreferredThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * Filter, which PreferredThemes to fetch.
     */
    where?: PreferredThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PreferredThemes to fetch.
     */
    orderBy?: PreferredThemeOrderByWithRelationInput | PreferredThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PreferredThemes.
     */
    cursor?: PreferredThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PreferredThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PreferredThemes.
     */
    skip?: number
    distinct?: PreferredThemeScalarFieldEnum | PreferredThemeScalarFieldEnum[]
  }

  /**
   * PreferredTheme create
   */
  export type PreferredThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a PreferredTheme.
     */
    data: XOR<PreferredThemeCreateInput, PreferredThemeUncheckedCreateInput>
  }

  /**
   * PreferredTheme createMany
   */
  export type PreferredThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PreferredThemes.
     */
    data: PreferredThemeCreateManyInput | PreferredThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PreferredTheme createManyAndReturn
   */
  export type PreferredThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * The data used to create many PreferredThemes.
     */
    data: PreferredThemeCreateManyInput | PreferredThemeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferredTheme update
   */
  export type PreferredThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a PreferredTheme.
     */
    data: XOR<PreferredThemeUpdateInput, PreferredThemeUncheckedUpdateInput>
    /**
     * Choose, which PreferredTheme to update.
     */
    where: PreferredThemeWhereUniqueInput
  }

  /**
   * PreferredTheme updateMany
   */
  export type PreferredThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PreferredThemes.
     */
    data: XOR<PreferredThemeUpdateManyMutationInput, PreferredThemeUncheckedUpdateManyInput>
    /**
     * Filter which PreferredThemes to update
     */
    where?: PreferredThemeWhereInput
    /**
     * Limit how many PreferredThemes to update.
     */
    limit?: number
  }

  /**
   * PreferredTheme updateManyAndReturn
   */
  export type PreferredThemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * The data used to update PreferredThemes.
     */
    data: XOR<PreferredThemeUpdateManyMutationInput, PreferredThemeUncheckedUpdateManyInput>
    /**
     * Filter which PreferredThemes to update
     */
    where?: PreferredThemeWhereInput
    /**
     * Limit how many PreferredThemes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PreferredTheme upsert
   */
  export type PreferredThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the PreferredTheme to update in case it exists.
     */
    where: PreferredThemeWhereUniqueInput
    /**
     * In case the PreferredTheme found by the `where` argument doesn't exist, create a new PreferredTheme with this data.
     */
    create: XOR<PreferredThemeCreateInput, PreferredThemeUncheckedCreateInput>
    /**
     * In case the PreferredTheme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PreferredThemeUpdateInput, PreferredThemeUncheckedUpdateInput>
  }

  /**
   * PreferredTheme delete
   */
  export type PreferredThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
    /**
     * Filter which PreferredTheme to delete.
     */
    where: PreferredThemeWhereUniqueInput
  }

  /**
   * PreferredTheme deleteMany
   */
  export type PreferredThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PreferredThemes to delete
     */
    where?: PreferredThemeWhereInput
    /**
     * Limit how many PreferredThemes to delete.
     */
    limit?: number
  }

  /**
   * PreferredTheme without action
   */
  export type PreferredThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PreferredTheme
     */
    select?: PreferredThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PreferredTheme
     */
    omit?: PreferredThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PreferredThemeInclude<ExtArgs> | null
  }


  /**
   * Model GamePlatform
   */

  export type AggregateGamePlatform = {
    _count: GamePlatformCountAggregateOutputType | null
    _avg: GamePlatformAvgAggregateOutputType | null
    _sum: GamePlatformSumAggregateOutputType | null
    _min: GamePlatformMinAggregateOutputType | null
    _max: GamePlatformMaxAggregateOutputType | null
  }

  export type GamePlatformAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    platformId: number | null
  }

  export type GamePlatformSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    platformId: number | null
  }

  export type GamePlatformMinAggregateOutputType = {
    id: number | null
    gameId: number | null
    platformId: number | null
  }

  export type GamePlatformMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
    platformId: number | null
  }

  export type GamePlatformCountAggregateOutputType = {
    id: number
    gameId: number
    platformId: number
    _all: number
  }


  export type GamePlatformAvgAggregateInputType = {
    id?: true
    gameId?: true
    platformId?: true
  }

  export type GamePlatformSumAggregateInputType = {
    id?: true
    gameId?: true
    platformId?: true
  }

  export type GamePlatformMinAggregateInputType = {
    id?: true
    gameId?: true
    platformId?: true
  }

  export type GamePlatformMaxAggregateInputType = {
    id?: true
    gameId?: true
    platformId?: true
  }

  export type GamePlatformCountAggregateInputType = {
    id?: true
    gameId?: true
    platformId?: true
    _all?: true
  }

  export type GamePlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GamePlatform to aggregate.
     */
    where?: GamePlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GamePlatforms to fetch.
     */
    orderBy?: GamePlatformOrderByWithRelationInput | GamePlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GamePlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GamePlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GamePlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GamePlatforms
    **/
    _count?: true | GamePlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GamePlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GamePlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GamePlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GamePlatformMaxAggregateInputType
  }

  export type GetGamePlatformAggregateType<T extends GamePlatformAggregateArgs> = {
        [P in keyof T & keyof AggregateGamePlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGamePlatform[P]>
      : GetScalarType<T[P], AggregateGamePlatform[P]>
  }




  export type GamePlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GamePlatformWhereInput
    orderBy?: GamePlatformOrderByWithAggregationInput | GamePlatformOrderByWithAggregationInput[]
    by: GamePlatformScalarFieldEnum[] | GamePlatformScalarFieldEnum
    having?: GamePlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GamePlatformCountAggregateInputType | true
    _avg?: GamePlatformAvgAggregateInputType
    _sum?: GamePlatformSumAggregateInputType
    _min?: GamePlatformMinAggregateInputType
    _max?: GamePlatformMaxAggregateInputType
  }

  export type GamePlatformGroupByOutputType = {
    id: number
    gameId: number
    platformId: number
    _count: GamePlatformCountAggregateOutputType | null
    _avg: GamePlatformAvgAggregateOutputType | null
    _sum: GamePlatformSumAggregateOutputType | null
    _min: GamePlatformMinAggregateOutputType | null
    _max: GamePlatformMaxAggregateOutputType | null
  }

  type GetGamePlatformGroupByPayload<T extends GamePlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GamePlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GamePlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GamePlatformGroupByOutputType[P]>
            : GetScalarType<T[P], GamePlatformGroupByOutputType[P]>
        }
      >
    >


  export type GamePlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    platformId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gamePlatform"]>

  export type GamePlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    platformId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gamePlatform"]>

  export type GamePlatformSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    platformId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gamePlatform"]>

  export type GamePlatformSelectScalar = {
    id?: boolean
    gameId?: boolean
    platformId?: boolean
  }

  export type GamePlatformOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId" | "platformId", ExtArgs["result"]["gamePlatform"]>
  export type GamePlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }
  export type GamePlatformIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }
  export type GamePlatformIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
  }

  export type $GamePlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GamePlatform"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      platform: Prisma.$PlatformPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
      platformId: number
    }, ExtArgs["result"]["gamePlatform"]>
    composites: {}
  }

  type GamePlatformGetPayload<S extends boolean | null | undefined | GamePlatformDefaultArgs> = $Result.GetResult<Prisma.$GamePlatformPayload, S>

  type GamePlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GamePlatformFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GamePlatformCountAggregateInputType | true
    }

  export interface GamePlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GamePlatform'], meta: { name: 'GamePlatform' } }
    /**
     * Find zero or one GamePlatform that matches the filter.
     * @param {GamePlatformFindUniqueArgs} args - Arguments to find a GamePlatform
     * @example
     * // Get one GamePlatform
     * const gamePlatform = await prisma.gamePlatform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GamePlatformFindUniqueArgs>(args: SelectSubset<T, GamePlatformFindUniqueArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GamePlatform that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GamePlatformFindUniqueOrThrowArgs} args - Arguments to find a GamePlatform
     * @example
     * // Get one GamePlatform
     * const gamePlatform = await prisma.gamePlatform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GamePlatformFindUniqueOrThrowArgs>(args: SelectSubset<T, GamePlatformFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GamePlatform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformFindFirstArgs} args - Arguments to find a GamePlatform
     * @example
     * // Get one GamePlatform
     * const gamePlatform = await prisma.gamePlatform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GamePlatformFindFirstArgs>(args?: SelectSubset<T, GamePlatformFindFirstArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GamePlatform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformFindFirstOrThrowArgs} args - Arguments to find a GamePlatform
     * @example
     * // Get one GamePlatform
     * const gamePlatform = await prisma.gamePlatform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GamePlatformFindFirstOrThrowArgs>(args?: SelectSubset<T, GamePlatformFindFirstOrThrowArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GamePlatforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GamePlatforms
     * const gamePlatforms = await prisma.gamePlatform.findMany()
     * 
     * // Get first 10 GamePlatforms
     * const gamePlatforms = await prisma.gamePlatform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gamePlatformWithIdOnly = await prisma.gamePlatform.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GamePlatformFindManyArgs>(args?: SelectSubset<T, GamePlatformFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GamePlatform.
     * @param {GamePlatformCreateArgs} args - Arguments to create a GamePlatform.
     * @example
     * // Create one GamePlatform
     * const GamePlatform = await prisma.gamePlatform.create({
     *   data: {
     *     // ... data to create a GamePlatform
     *   }
     * })
     * 
     */
    create<T extends GamePlatformCreateArgs>(args: SelectSubset<T, GamePlatformCreateArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GamePlatforms.
     * @param {GamePlatformCreateManyArgs} args - Arguments to create many GamePlatforms.
     * @example
     * // Create many GamePlatforms
     * const gamePlatform = await prisma.gamePlatform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GamePlatformCreateManyArgs>(args?: SelectSubset<T, GamePlatformCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GamePlatforms and returns the data saved in the database.
     * @param {GamePlatformCreateManyAndReturnArgs} args - Arguments to create many GamePlatforms.
     * @example
     * // Create many GamePlatforms
     * const gamePlatform = await prisma.gamePlatform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GamePlatforms and only return the `id`
     * const gamePlatformWithIdOnly = await prisma.gamePlatform.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GamePlatformCreateManyAndReturnArgs>(args?: SelectSubset<T, GamePlatformCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GamePlatform.
     * @param {GamePlatformDeleteArgs} args - Arguments to delete one GamePlatform.
     * @example
     * // Delete one GamePlatform
     * const GamePlatform = await prisma.gamePlatform.delete({
     *   where: {
     *     // ... filter to delete one GamePlatform
     *   }
     * })
     * 
     */
    delete<T extends GamePlatformDeleteArgs>(args: SelectSubset<T, GamePlatformDeleteArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GamePlatform.
     * @param {GamePlatformUpdateArgs} args - Arguments to update one GamePlatform.
     * @example
     * // Update one GamePlatform
     * const gamePlatform = await prisma.gamePlatform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GamePlatformUpdateArgs>(args: SelectSubset<T, GamePlatformUpdateArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GamePlatforms.
     * @param {GamePlatformDeleteManyArgs} args - Arguments to filter GamePlatforms to delete.
     * @example
     * // Delete a few GamePlatforms
     * const { count } = await prisma.gamePlatform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GamePlatformDeleteManyArgs>(args?: SelectSubset<T, GamePlatformDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GamePlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GamePlatforms
     * const gamePlatform = await prisma.gamePlatform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GamePlatformUpdateManyArgs>(args: SelectSubset<T, GamePlatformUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GamePlatforms and returns the data updated in the database.
     * @param {GamePlatformUpdateManyAndReturnArgs} args - Arguments to update many GamePlatforms.
     * @example
     * // Update many GamePlatforms
     * const gamePlatform = await prisma.gamePlatform.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GamePlatforms and only return the `id`
     * const gamePlatformWithIdOnly = await prisma.gamePlatform.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GamePlatformUpdateManyAndReturnArgs>(args: SelectSubset<T, GamePlatformUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GamePlatform.
     * @param {GamePlatformUpsertArgs} args - Arguments to update or create a GamePlatform.
     * @example
     * // Update or create a GamePlatform
     * const gamePlatform = await prisma.gamePlatform.upsert({
     *   create: {
     *     // ... data to create a GamePlatform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GamePlatform we want to update
     *   }
     * })
     */
    upsert<T extends GamePlatformUpsertArgs>(args: SelectSubset<T, GamePlatformUpsertArgs<ExtArgs>>): Prisma__GamePlatformClient<$Result.GetResult<Prisma.$GamePlatformPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GamePlatforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformCountArgs} args - Arguments to filter GamePlatforms to count.
     * @example
     * // Count the number of GamePlatforms
     * const count = await prisma.gamePlatform.count({
     *   where: {
     *     // ... the filter for the GamePlatforms we want to count
     *   }
     * })
    **/
    count<T extends GamePlatformCountArgs>(
      args?: Subset<T, GamePlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GamePlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GamePlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GamePlatformAggregateArgs>(args: Subset<T, GamePlatformAggregateArgs>): Prisma.PrismaPromise<GetGamePlatformAggregateType<T>>

    /**
     * Group by GamePlatform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GamePlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GamePlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GamePlatformGroupByArgs['orderBy'] }
        : { orderBy?: GamePlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GamePlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGamePlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GamePlatform model
   */
  readonly fields: GamePlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GamePlatform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GamePlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    platform<T extends PlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlatformDefaultArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GamePlatform model
   */
  interface GamePlatformFieldRefs {
    readonly id: FieldRef<"GamePlatform", 'Int'>
    readonly gameId: FieldRef<"GamePlatform", 'Int'>
    readonly platformId: FieldRef<"GamePlatform", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GamePlatform findUnique
   */
  export type GamePlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * Filter, which GamePlatform to fetch.
     */
    where: GamePlatformWhereUniqueInput
  }

  /**
   * GamePlatform findUniqueOrThrow
   */
  export type GamePlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * Filter, which GamePlatform to fetch.
     */
    where: GamePlatformWhereUniqueInput
  }

  /**
   * GamePlatform findFirst
   */
  export type GamePlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * Filter, which GamePlatform to fetch.
     */
    where?: GamePlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GamePlatforms to fetch.
     */
    orderBy?: GamePlatformOrderByWithRelationInput | GamePlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GamePlatforms.
     */
    cursor?: GamePlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GamePlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GamePlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GamePlatforms.
     */
    distinct?: GamePlatformScalarFieldEnum | GamePlatformScalarFieldEnum[]
  }

  /**
   * GamePlatform findFirstOrThrow
   */
  export type GamePlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * Filter, which GamePlatform to fetch.
     */
    where?: GamePlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GamePlatforms to fetch.
     */
    orderBy?: GamePlatformOrderByWithRelationInput | GamePlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GamePlatforms.
     */
    cursor?: GamePlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GamePlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GamePlatforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GamePlatforms.
     */
    distinct?: GamePlatformScalarFieldEnum | GamePlatformScalarFieldEnum[]
  }

  /**
   * GamePlatform findMany
   */
  export type GamePlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * Filter, which GamePlatforms to fetch.
     */
    where?: GamePlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GamePlatforms to fetch.
     */
    orderBy?: GamePlatformOrderByWithRelationInput | GamePlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GamePlatforms.
     */
    cursor?: GamePlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GamePlatforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GamePlatforms.
     */
    skip?: number
    distinct?: GamePlatformScalarFieldEnum | GamePlatformScalarFieldEnum[]
  }

  /**
   * GamePlatform create
   */
  export type GamePlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a GamePlatform.
     */
    data: XOR<GamePlatformCreateInput, GamePlatformUncheckedCreateInput>
  }

  /**
   * GamePlatform createMany
   */
  export type GamePlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GamePlatforms.
     */
    data: GamePlatformCreateManyInput | GamePlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GamePlatform createManyAndReturn
   */
  export type GamePlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * The data used to create many GamePlatforms.
     */
    data: GamePlatformCreateManyInput | GamePlatformCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GamePlatform update
   */
  export type GamePlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a GamePlatform.
     */
    data: XOR<GamePlatformUpdateInput, GamePlatformUncheckedUpdateInput>
    /**
     * Choose, which GamePlatform to update.
     */
    where: GamePlatformWhereUniqueInput
  }

  /**
   * GamePlatform updateMany
   */
  export type GamePlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GamePlatforms.
     */
    data: XOR<GamePlatformUpdateManyMutationInput, GamePlatformUncheckedUpdateManyInput>
    /**
     * Filter which GamePlatforms to update
     */
    where?: GamePlatformWhereInput
    /**
     * Limit how many GamePlatforms to update.
     */
    limit?: number
  }

  /**
   * GamePlatform updateManyAndReturn
   */
  export type GamePlatformUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * The data used to update GamePlatforms.
     */
    data: XOR<GamePlatformUpdateManyMutationInput, GamePlatformUncheckedUpdateManyInput>
    /**
     * Filter which GamePlatforms to update
     */
    where?: GamePlatformWhereInput
    /**
     * Limit how many GamePlatforms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GamePlatform upsert
   */
  export type GamePlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the GamePlatform to update in case it exists.
     */
    where: GamePlatformWhereUniqueInput
    /**
     * In case the GamePlatform found by the `where` argument doesn't exist, create a new GamePlatform with this data.
     */
    create: XOR<GamePlatformCreateInput, GamePlatformUncheckedCreateInput>
    /**
     * In case the GamePlatform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GamePlatformUpdateInput, GamePlatformUncheckedUpdateInput>
  }

  /**
   * GamePlatform delete
   */
  export type GamePlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
    /**
     * Filter which GamePlatform to delete.
     */
    where: GamePlatformWhereUniqueInput
  }

  /**
   * GamePlatform deleteMany
   */
  export type GamePlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GamePlatforms to delete
     */
    where?: GamePlatformWhereInput
    /**
     * Limit how many GamePlatforms to delete.
     */
    limit?: number
  }

  /**
   * GamePlatform without action
   */
  export type GamePlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GamePlatform
     */
    select?: GamePlatformSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GamePlatform
     */
    omit?: GamePlatformOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GamePlatformInclude<ExtArgs> | null
  }


  /**
   * Model GameGenre
   */

  export type AggregateGameGenre = {
    _count: GameGenreCountAggregateOutputType | null
    _avg: GameGenreAvgAggregateOutputType | null
    _sum: GameGenreSumAggregateOutputType | null
    _min: GameGenreMinAggregateOutputType | null
    _max: GameGenreMaxAggregateOutputType | null
  }

  export type GameGenreAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    genreId: number | null
  }

  export type GameGenreSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    genreId: number | null
  }

  export type GameGenreMinAggregateOutputType = {
    id: number | null
    gameId: number | null
    genreId: number | null
  }

  export type GameGenreMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
    genreId: number | null
  }

  export type GameGenreCountAggregateOutputType = {
    id: number
    gameId: number
    genreId: number
    _all: number
  }


  export type GameGenreAvgAggregateInputType = {
    id?: true
    gameId?: true
    genreId?: true
  }

  export type GameGenreSumAggregateInputType = {
    id?: true
    gameId?: true
    genreId?: true
  }

  export type GameGenreMinAggregateInputType = {
    id?: true
    gameId?: true
    genreId?: true
  }

  export type GameGenreMaxAggregateInputType = {
    id?: true
    gameId?: true
    genreId?: true
  }

  export type GameGenreCountAggregateInputType = {
    id?: true
    gameId?: true
    genreId?: true
    _all?: true
  }

  export type GameGenreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameGenre to aggregate.
     */
    where?: GameGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameGenres to fetch.
     */
    orderBy?: GameGenreOrderByWithRelationInput | GameGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameGenres
    **/
    _count?: true | GameGenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameGenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameGenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameGenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameGenreMaxAggregateInputType
  }

  export type GetGameGenreAggregateType<T extends GameGenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGameGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameGenre[P]>
      : GetScalarType<T[P], AggregateGameGenre[P]>
  }




  export type GameGenreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameGenreWhereInput
    orderBy?: GameGenreOrderByWithAggregationInput | GameGenreOrderByWithAggregationInput[]
    by: GameGenreScalarFieldEnum[] | GameGenreScalarFieldEnum
    having?: GameGenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameGenreCountAggregateInputType | true
    _avg?: GameGenreAvgAggregateInputType
    _sum?: GameGenreSumAggregateInputType
    _min?: GameGenreMinAggregateInputType
    _max?: GameGenreMaxAggregateInputType
  }

  export type GameGenreGroupByOutputType = {
    id: number
    gameId: number
    genreId: number
    _count: GameGenreCountAggregateOutputType | null
    _avg: GameGenreAvgAggregateOutputType | null
    _sum: GameGenreSumAggregateOutputType | null
    _min: GameGenreMinAggregateOutputType | null
    _max: GameGenreMaxAggregateOutputType | null
  }

  type GetGameGenreGroupByPayload<T extends GameGenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGenreGroupByOutputType[P]>
            : GetScalarType<T[P], GameGenreGroupByOutputType[P]>
        }
      >
    >


  export type GameGenreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    genreId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameGenre"]>

  export type GameGenreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    genreId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameGenre"]>

  export type GameGenreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    genreId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameGenre"]>

  export type GameGenreSelectScalar = {
    id?: boolean
    gameId?: boolean
    genreId?: boolean
  }

  export type GameGenreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId" | "genreId", ExtArgs["result"]["gameGenre"]>
  export type GameGenreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }
  export type GameGenreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }
  export type GameGenreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    genre?: boolean | GenreDefaultArgs<ExtArgs>
  }

  export type $GameGenrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameGenre"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      genre: Prisma.$GenrePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
      genreId: number
    }, ExtArgs["result"]["gameGenre"]>
    composites: {}
  }

  type GameGenreGetPayload<S extends boolean | null | undefined | GameGenreDefaultArgs> = $Result.GetResult<Prisma.$GameGenrePayload, S>

  type GameGenreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameGenreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameGenreCountAggregateInputType | true
    }

  export interface GameGenreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameGenre'], meta: { name: 'GameGenre' } }
    /**
     * Find zero or one GameGenre that matches the filter.
     * @param {GameGenreFindUniqueArgs} args - Arguments to find a GameGenre
     * @example
     * // Get one GameGenre
     * const gameGenre = await prisma.gameGenre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameGenreFindUniqueArgs>(args: SelectSubset<T, GameGenreFindUniqueArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameGenre that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameGenreFindUniqueOrThrowArgs} args - Arguments to find a GameGenre
     * @example
     * // Get one GameGenre
     * const gameGenre = await prisma.gameGenre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameGenreFindUniqueOrThrowArgs>(args: SelectSubset<T, GameGenreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameGenre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreFindFirstArgs} args - Arguments to find a GameGenre
     * @example
     * // Get one GameGenre
     * const gameGenre = await prisma.gameGenre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameGenreFindFirstArgs>(args?: SelectSubset<T, GameGenreFindFirstArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameGenre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreFindFirstOrThrowArgs} args - Arguments to find a GameGenre
     * @example
     * // Get one GameGenre
     * const gameGenre = await prisma.gameGenre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameGenreFindFirstOrThrowArgs>(args?: SelectSubset<T, GameGenreFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameGenres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameGenres
     * const gameGenres = await prisma.gameGenre.findMany()
     * 
     * // Get first 10 GameGenres
     * const gameGenres = await prisma.gameGenre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameGenreWithIdOnly = await prisma.gameGenre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameGenreFindManyArgs>(args?: SelectSubset<T, GameGenreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameGenre.
     * @param {GameGenreCreateArgs} args - Arguments to create a GameGenre.
     * @example
     * // Create one GameGenre
     * const GameGenre = await prisma.gameGenre.create({
     *   data: {
     *     // ... data to create a GameGenre
     *   }
     * })
     * 
     */
    create<T extends GameGenreCreateArgs>(args: SelectSubset<T, GameGenreCreateArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameGenres.
     * @param {GameGenreCreateManyArgs} args - Arguments to create many GameGenres.
     * @example
     * // Create many GameGenres
     * const gameGenre = await prisma.gameGenre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameGenreCreateManyArgs>(args?: SelectSubset<T, GameGenreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameGenres and returns the data saved in the database.
     * @param {GameGenreCreateManyAndReturnArgs} args - Arguments to create many GameGenres.
     * @example
     * // Create many GameGenres
     * const gameGenre = await prisma.gameGenre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameGenres and only return the `id`
     * const gameGenreWithIdOnly = await prisma.gameGenre.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameGenreCreateManyAndReturnArgs>(args?: SelectSubset<T, GameGenreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameGenre.
     * @param {GameGenreDeleteArgs} args - Arguments to delete one GameGenre.
     * @example
     * // Delete one GameGenre
     * const GameGenre = await prisma.gameGenre.delete({
     *   where: {
     *     // ... filter to delete one GameGenre
     *   }
     * })
     * 
     */
    delete<T extends GameGenreDeleteArgs>(args: SelectSubset<T, GameGenreDeleteArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameGenre.
     * @param {GameGenreUpdateArgs} args - Arguments to update one GameGenre.
     * @example
     * // Update one GameGenre
     * const gameGenre = await prisma.gameGenre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameGenreUpdateArgs>(args: SelectSubset<T, GameGenreUpdateArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameGenres.
     * @param {GameGenreDeleteManyArgs} args - Arguments to filter GameGenres to delete.
     * @example
     * // Delete a few GameGenres
     * const { count } = await prisma.gameGenre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameGenreDeleteManyArgs>(args?: SelectSubset<T, GameGenreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameGenres
     * const gameGenre = await prisma.gameGenre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameGenreUpdateManyArgs>(args: SelectSubset<T, GameGenreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameGenres and returns the data updated in the database.
     * @param {GameGenreUpdateManyAndReturnArgs} args - Arguments to update many GameGenres.
     * @example
     * // Update many GameGenres
     * const gameGenre = await prisma.gameGenre.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameGenres and only return the `id`
     * const gameGenreWithIdOnly = await prisma.gameGenre.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameGenreUpdateManyAndReturnArgs>(args: SelectSubset<T, GameGenreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameGenre.
     * @param {GameGenreUpsertArgs} args - Arguments to update or create a GameGenre.
     * @example
     * // Update or create a GameGenre
     * const gameGenre = await prisma.gameGenre.upsert({
     *   create: {
     *     // ... data to create a GameGenre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameGenre we want to update
     *   }
     * })
     */
    upsert<T extends GameGenreUpsertArgs>(args: SelectSubset<T, GameGenreUpsertArgs<ExtArgs>>): Prisma__GameGenreClient<$Result.GetResult<Prisma.$GameGenrePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameGenres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreCountArgs} args - Arguments to filter GameGenres to count.
     * @example
     * // Count the number of GameGenres
     * const count = await prisma.gameGenre.count({
     *   where: {
     *     // ... the filter for the GameGenres we want to count
     *   }
     * })
    **/
    count<T extends GameGenreCountArgs>(
      args?: Subset<T, GameGenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameGenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameGenreAggregateArgs>(args: Subset<T, GameGenreAggregateArgs>): Prisma.PrismaPromise<GetGameGenreAggregateType<T>>

    /**
     * Group by GameGenre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGenreGroupByArgs['orderBy'] }
        : { orderBy?: GameGenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameGenre model
   */
  readonly fields: GameGenreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameGenre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameGenreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    genre<T extends GenreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GenreDefaultArgs<ExtArgs>>): Prisma__GenreClient<$Result.GetResult<Prisma.$GenrePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameGenre model
   */
  interface GameGenreFieldRefs {
    readonly id: FieldRef<"GameGenre", 'Int'>
    readonly gameId: FieldRef<"GameGenre", 'Int'>
    readonly genreId: FieldRef<"GameGenre", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GameGenre findUnique
   */
  export type GameGenreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * Filter, which GameGenre to fetch.
     */
    where: GameGenreWhereUniqueInput
  }

  /**
   * GameGenre findUniqueOrThrow
   */
  export type GameGenreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * Filter, which GameGenre to fetch.
     */
    where: GameGenreWhereUniqueInput
  }

  /**
   * GameGenre findFirst
   */
  export type GameGenreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * Filter, which GameGenre to fetch.
     */
    where?: GameGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameGenres to fetch.
     */
    orderBy?: GameGenreOrderByWithRelationInput | GameGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameGenres.
     */
    cursor?: GameGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameGenres.
     */
    distinct?: GameGenreScalarFieldEnum | GameGenreScalarFieldEnum[]
  }

  /**
   * GameGenre findFirstOrThrow
   */
  export type GameGenreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * Filter, which GameGenre to fetch.
     */
    where?: GameGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameGenres to fetch.
     */
    orderBy?: GameGenreOrderByWithRelationInput | GameGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameGenres.
     */
    cursor?: GameGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameGenres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameGenres.
     */
    distinct?: GameGenreScalarFieldEnum | GameGenreScalarFieldEnum[]
  }

  /**
   * GameGenre findMany
   */
  export type GameGenreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * Filter, which GameGenres to fetch.
     */
    where?: GameGenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameGenres to fetch.
     */
    orderBy?: GameGenreOrderByWithRelationInput | GameGenreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameGenres.
     */
    cursor?: GameGenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameGenres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameGenres.
     */
    skip?: number
    distinct?: GameGenreScalarFieldEnum | GameGenreScalarFieldEnum[]
  }

  /**
   * GameGenre create
   */
  export type GameGenreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * The data needed to create a GameGenre.
     */
    data: XOR<GameGenreCreateInput, GameGenreUncheckedCreateInput>
  }

  /**
   * GameGenre createMany
   */
  export type GameGenreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameGenres.
     */
    data: GameGenreCreateManyInput | GameGenreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameGenre createManyAndReturn
   */
  export type GameGenreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * The data used to create many GameGenres.
     */
    data: GameGenreCreateManyInput | GameGenreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameGenre update
   */
  export type GameGenreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * The data needed to update a GameGenre.
     */
    data: XOR<GameGenreUpdateInput, GameGenreUncheckedUpdateInput>
    /**
     * Choose, which GameGenre to update.
     */
    where: GameGenreWhereUniqueInput
  }

  /**
   * GameGenre updateMany
   */
  export type GameGenreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameGenres.
     */
    data: XOR<GameGenreUpdateManyMutationInput, GameGenreUncheckedUpdateManyInput>
    /**
     * Filter which GameGenres to update
     */
    where?: GameGenreWhereInput
    /**
     * Limit how many GameGenres to update.
     */
    limit?: number
  }

  /**
   * GameGenre updateManyAndReturn
   */
  export type GameGenreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * The data used to update GameGenres.
     */
    data: XOR<GameGenreUpdateManyMutationInput, GameGenreUncheckedUpdateManyInput>
    /**
     * Filter which GameGenres to update
     */
    where?: GameGenreWhereInput
    /**
     * Limit how many GameGenres to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameGenre upsert
   */
  export type GameGenreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * The filter to search for the GameGenre to update in case it exists.
     */
    where: GameGenreWhereUniqueInput
    /**
     * In case the GameGenre found by the `where` argument doesn't exist, create a new GameGenre with this data.
     */
    create: XOR<GameGenreCreateInput, GameGenreUncheckedCreateInput>
    /**
     * In case the GameGenre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameGenreUpdateInput, GameGenreUncheckedUpdateInput>
  }

  /**
   * GameGenre delete
   */
  export type GameGenreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
    /**
     * Filter which GameGenre to delete.
     */
    where: GameGenreWhereUniqueInput
  }

  /**
   * GameGenre deleteMany
   */
  export type GameGenreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameGenres to delete
     */
    where?: GameGenreWhereInput
    /**
     * Limit how many GameGenres to delete.
     */
    limit?: number
  }

  /**
   * GameGenre without action
   */
  export type GameGenreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameGenre
     */
    select?: GameGenreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameGenre
     */
    omit?: GameGenreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameGenreInclude<ExtArgs> | null
  }


  /**
   * Model GameTheme
   */

  export type AggregateGameTheme = {
    _count: GameThemeCountAggregateOutputType | null
    _avg: GameThemeAvgAggregateOutputType | null
    _sum: GameThemeSumAggregateOutputType | null
    _min: GameThemeMinAggregateOutputType | null
    _max: GameThemeMaxAggregateOutputType | null
  }

  export type GameThemeAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    themeId: number | null
  }

  export type GameThemeSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    themeId: number | null
  }

  export type GameThemeMinAggregateOutputType = {
    id: number | null
    gameId: number | null
    themeId: number | null
  }

  export type GameThemeMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
    themeId: number | null
  }

  export type GameThemeCountAggregateOutputType = {
    id: number
    gameId: number
    themeId: number
    _all: number
  }


  export type GameThemeAvgAggregateInputType = {
    id?: true
    gameId?: true
    themeId?: true
  }

  export type GameThemeSumAggregateInputType = {
    id?: true
    gameId?: true
    themeId?: true
  }

  export type GameThemeMinAggregateInputType = {
    id?: true
    gameId?: true
    themeId?: true
  }

  export type GameThemeMaxAggregateInputType = {
    id?: true
    gameId?: true
    themeId?: true
  }

  export type GameThemeCountAggregateInputType = {
    id?: true
    gameId?: true
    themeId?: true
    _all?: true
  }

  export type GameThemeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameTheme to aggregate.
     */
    where?: GameThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameThemes to fetch.
     */
    orderBy?: GameThemeOrderByWithRelationInput | GameThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GameThemes
    **/
    _count?: true | GameThemeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameThemeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameThemeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameThemeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameThemeMaxAggregateInputType
  }

  export type GetGameThemeAggregateType<T extends GameThemeAggregateArgs> = {
        [P in keyof T & keyof AggregateGameTheme]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameTheme[P]>
      : GetScalarType<T[P], AggregateGameTheme[P]>
  }




  export type GameThemeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameThemeWhereInput
    orderBy?: GameThemeOrderByWithAggregationInput | GameThemeOrderByWithAggregationInput[]
    by: GameThemeScalarFieldEnum[] | GameThemeScalarFieldEnum
    having?: GameThemeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameThemeCountAggregateInputType | true
    _avg?: GameThemeAvgAggregateInputType
    _sum?: GameThemeSumAggregateInputType
    _min?: GameThemeMinAggregateInputType
    _max?: GameThemeMaxAggregateInputType
  }

  export type GameThemeGroupByOutputType = {
    id: number
    gameId: number
    themeId: number
    _count: GameThemeCountAggregateOutputType | null
    _avg: GameThemeAvgAggregateOutputType | null
    _sum: GameThemeSumAggregateOutputType | null
    _min: GameThemeMinAggregateOutputType | null
    _max: GameThemeMaxAggregateOutputType | null
  }

  type GetGameThemeGroupByPayload<T extends GameThemeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameThemeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameThemeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameThemeGroupByOutputType[P]>
            : GetScalarType<T[P], GameThemeGroupByOutputType[P]>
        }
      >
    >


  export type GameThemeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    themeId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTheme"]>

  export type GameThemeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    themeId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTheme"]>

  export type GameThemeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    themeId?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gameTheme"]>

  export type GameThemeSelectScalar = {
    id?: boolean
    gameId?: boolean
    themeId?: boolean
  }

  export type GameThemeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "gameId" | "themeId", ExtArgs["result"]["gameTheme"]>
  export type GameThemeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }
  export type GameThemeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }
  export type GameThemeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    theme?: boolean | ThemeDefaultArgs<ExtArgs>
  }

  export type $GameThemePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GameTheme"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      theme: Prisma.$ThemePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
      themeId: number
    }, ExtArgs["result"]["gameTheme"]>
    composites: {}
  }

  type GameThemeGetPayload<S extends boolean | null | undefined | GameThemeDefaultArgs> = $Result.GetResult<Prisma.$GameThemePayload, S>

  type GameThemeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GameThemeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameThemeCountAggregateInputType | true
    }

  export interface GameThemeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameTheme'], meta: { name: 'GameTheme' } }
    /**
     * Find zero or one GameTheme that matches the filter.
     * @param {GameThemeFindUniqueArgs} args - Arguments to find a GameTheme
     * @example
     * // Get one GameTheme
     * const gameTheme = await prisma.gameTheme.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameThemeFindUniqueArgs>(args: SelectSubset<T, GameThemeFindUniqueArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GameTheme that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GameThemeFindUniqueOrThrowArgs} args - Arguments to find a GameTheme
     * @example
     * // Get one GameTheme
     * const gameTheme = await prisma.gameTheme.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameThemeFindUniqueOrThrowArgs>(args: SelectSubset<T, GameThemeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameTheme that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeFindFirstArgs} args - Arguments to find a GameTheme
     * @example
     * // Get one GameTheme
     * const gameTheme = await prisma.gameTheme.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameThemeFindFirstArgs>(args?: SelectSubset<T, GameThemeFindFirstArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GameTheme that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeFindFirstOrThrowArgs} args - Arguments to find a GameTheme
     * @example
     * // Get one GameTheme
     * const gameTheme = await prisma.gameTheme.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameThemeFindFirstOrThrowArgs>(args?: SelectSubset<T, GameThemeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GameThemes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameThemes
     * const gameThemes = await prisma.gameTheme.findMany()
     * 
     * // Get first 10 GameThemes
     * const gameThemes = await prisma.gameTheme.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameThemeWithIdOnly = await prisma.gameTheme.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameThemeFindManyArgs>(args?: SelectSubset<T, GameThemeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GameTheme.
     * @param {GameThemeCreateArgs} args - Arguments to create a GameTheme.
     * @example
     * // Create one GameTheme
     * const GameTheme = await prisma.gameTheme.create({
     *   data: {
     *     // ... data to create a GameTheme
     *   }
     * })
     * 
     */
    create<T extends GameThemeCreateArgs>(args: SelectSubset<T, GameThemeCreateArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GameThemes.
     * @param {GameThemeCreateManyArgs} args - Arguments to create many GameThemes.
     * @example
     * // Create many GameThemes
     * const gameTheme = await prisma.gameTheme.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameThemeCreateManyArgs>(args?: SelectSubset<T, GameThemeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GameThemes and returns the data saved in the database.
     * @param {GameThemeCreateManyAndReturnArgs} args - Arguments to create many GameThemes.
     * @example
     * // Create many GameThemes
     * const gameTheme = await prisma.gameTheme.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GameThemes and only return the `id`
     * const gameThemeWithIdOnly = await prisma.gameTheme.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameThemeCreateManyAndReturnArgs>(args?: SelectSubset<T, GameThemeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GameTheme.
     * @param {GameThemeDeleteArgs} args - Arguments to delete one GameTheme.
     * @example
     * // Delete one GameTheme
     * const GameTheme = await prisma.gameTheme.delete({
     *   where: {
     *     // ... filter to delete one GameTheme
     *   }
     * })
     * 
     */
    delete<T extends GameThemeDeleteArgs>(args: SelectSubset<T, GameThemeDeleteArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GameTheme.
     * @param {GameThemeUpdateArgs} args - Arguments to update one GameTheme.
     * @example
     * // Update one GameTheme
     * const gameTheme = await prisma.gameTheme.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameThemeUpdateArgs>(args: SelectSubset<T, GameThemeUpdateArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GameThemes.
     * @param {GameThemeDeleteManyArgs} args - Arguments to filter GameThemes to delete.
     * @example
     * // Delete a few GameThemes
     * const { count } = await prisma.gameTheme.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameThemeDeleteManyArgs>(args?: SelectSubset<T, GameThemeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameThemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameThemes
     * const gameTheme = await prisma.gameTheme.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameThemeUpdateManyArgs>(args: SelectSubset<T, GameThemeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameThemes and returns the data updated in the database.
     * @param {GameThemeUpdateManyAndReturnArgs} args - Arguments to update many GameThemes.
     * @example
     * // Update many GameThemes
     * const gameTheme = await prisma.gameTheme.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GameThemes and only return the `id`
     * const gameThemeWithIdOnly = await prisma.gameTheme.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GameThemeUpdateManyAndReturnArgs>(args: SelectSubset<T, GameThemeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GameTheme.
     * @param {GameThemeUpsertArgs} args - Arguments to update or create a GameTheme.
     * @example
     * // Update or create a GameTheme
     * const gameTheme = await prisma.gameTheme.upsert({
     *   create: {
     *     // ... data to create a GameTheme
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameTheme we want to update
     *   }
     * })
     */
    upsert<T extends GameThemeUpsertArgs>(args: SelectSubset<T, GameThemeUpsertArgs<ExtArgs>>): Prisma__GameThemeClient<$Result.GetResult<Prisma.$GameThemePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GameThemes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeCountArgs} args - Arguments to filter GameThemes to count.
     * @example
     * // Count the number of GameThemes
     * const count = await prisma.gameTheme.count({
     *   where: {
     *     // ... the filter for the GameThemes we want to count
     *   }
     * })
    **/
    count<T extends GameThemeCountArgs>(
      args?: Subset<T, GameThemeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameThemeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameTheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameThemeAggregateArgs>(args: Subset<T, GameThemeAggregateArgs>): Prisma.PrismaPromise<GetGameThemeAggregateType<T>>

    /**
     * Group by GameTheme.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameThemeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameThemeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameThemeGroupByArgs['orderBy'] }
        : { orderBy?: GameThemeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameThemeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameThemeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GameTheme model
   */
  readonly fields: GameThemeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GameTheme.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameThemeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    theme<T extends ThemeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ThemeDefaultArgs<ExtArgs>>): Prisma__ThemeClient<$Result.GetResult<Prisma.$ThemePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GameTheme model
   */
  interface GameThemeFieldRefs {
    readonly id: FieldRef<"GameTheme", 'Int'>
    readonly gameId: FieldRef<"GameTheme", 'Int'>
    readonly themeId: FieldRef<"GameTheme", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GameTheme findUnique
   */
  export type GameThemeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * Filter, which GameTheme to fetch.
     */
    where: GameThemeWhereUniqueInput
  }

  /**
   * GameTheme findUniqueOrThrow
   */
  export type GameThemeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * Filter, which GameTheme to fetch.
     */
    where: GameThemeWhereUniqueInput
  }

  /**
   * GameTheme findFirst
   */
  export type GameThemeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * Filter, which GameTheme to fetch.
     */
    where?: GameThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameThemes to fetch.
     */
    orderBy?: GameThemeOrderByWithRelationInput | GameThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameThemes.
     */
    cursor?: GameThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameThemes.
     */
    distinct?: GameThemeScalarFieldEnum | GameThemeScalarFieldEnum[]
  }

  /**
   * GameTheme findFirstOrThrow
   */
  export type GameThemeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * Filter, which GameTheme to fetch.
     */
    where?: GameThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameThemes to fetch.
     */
    orderBy?: GameThemeOrderByWithRelationInput | GameThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GameThemes.
     */
    cursor?: GameThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameThemes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GameThemes.
     */
    distinct?: GameThemeScalarFieldEnum | GameThemeScalarFieldEnum[]
  }

  /**
   * GameTheme findMany
   */
  export type GameThemeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * Filter, which GameThemes to fetch.
     */
    where?: GameThemeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GameThemes to fetch.
     */
    orderBy?: GameThemeOrderByWithRelationInput | GameThemeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GameThemes.
     */
    cursor?: GameThemeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GameThemes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GameThemes.
     */
    skip?: number
    distinct?: GameThemeScalarFieldEnum | GameThemeScalarFieldEnum[]
  }

  /**
   * GameTheme create
   */
  export type GameThemeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * The data needed to create a GameTheme.
     */
    data: XOR<GameThemeCreateInput, GameThemeUncheckedCreateInput>
  }

  /**
   * GameTheme createMany
   */
  export type GameThemeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GameThemes.
     */
    data: GameThemeCreateManyInput | GameThemeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GameTheme createManyAndReturn
   */
  export type GameThemeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * The data used to create many GameThemes.
     */
    data: GameThemeCreateManyInput | GameThemeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameTheme update
   */
  export type GameThemeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * The data needed to update a GameTheme.
     */
    data: XOR<GameThemeUpdateInput, GameThemeUncheckedUpdateInput>
    /**
     * Choose, which GameTheme to update.
     */
    where: GameThemeWhereUniqueInput
  }

  /**
   * GameTheme updateMany
   */
  export type GameThemeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GameThemes.
     */
    data: XOR<GameThemeUpdateManyMutationInput, GameThemeUncheckedUpdateManyInput>
    /**
     * Filter which GameThemes to update
     */
    where?: GameThemeWhereInput
    /**
     * Limit how many GameThemes to update.
     */
    limit?: number
  }

  /**
   * GameTheme updateManyAndReturn
   */
  export type GameThemeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * The data used to update GameThemes.
     */
    data: XOR<GameThemeUpdateManyMutationInput, GameThemeUncheckedUpdateManyInput>
    /**
     * Filter which GameThemes to update
     */
    where?: GameThemeWhereInput
    /**
     * Limit how many GameThemes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GameTheme upsert
   */
  export type GameThemeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * The filter to search for the GameTheme to update in case it exists.
     */
    where: GameThemeWhereUniqueInput
    /**
     * In case the GameTheme found by the `where` argument doesn't exist, create a new GameTheme with this data.
     */
    create: XOR<GameThemeCreateInput, GameThemeUncheckedCreateInput>
    /**
     * In case the GameTheme was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameThemeUpdateInput, GameThemeUncheckedUpdateInput>
  }

  /**
   * GameTheme delete
   */
  export type GameThemeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
    /**
     * Filter which GameTheme to delete.
     */
    where: GameThemeWhereUniqueInput
  }

  /**
   * GameTheme deleteMany
   */
  export type GameThemeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GameThemes to delete
     */
    where?: GameThemeWhereInput
    /**
     * Limit how many GameThemes to delete.
     */
    limit?: number
  }

  /**
   * GameTheme without action
   */
  export type GameThemeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameTheme
     */
    select?: GameThemeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GameTheme
     */
    omit?: GameThemeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameThemeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MemberScalarFieldEnum: {
    id: 'id',
    nickname: 'nickname',
    email: 'email',
    password: 'password',
    imageUrl: 'imageUrl',
    birthDate: 'birthDate',
    isMale: 'isMale',
    score: 'score',
    lastAttendedDate: 'lastAttendedDate',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    title: 'title',
    developer: 'developer',
    thumbnail: 'thumbnail',
    releaseDate: 'releaseDate'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const WishlistScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    gameId: 'gameId'
  };

  export type WishlistScalarFieldEnum = (typeof WishlistScalarFieldEnum)[keyof typeof WishlistScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    gameId: 'gameId',
    content: 'content',
    rating: 'rating',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ReviewLikeScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    reviewId: 'reviewId'
  };

  export type ReviewLikeScalarFieldEnum = (typeof ReviewLikeScalarFieldEnum)[keyof typeof ReviewLikeScalarFieldEnum]


  export const ArenaScalarFieldEnum: {
    id: 'id',
    creatorId: 'creatorId',
    challengerId: 'challengerId',
    title: 'title',
    description: 'description',
    status: 'status',
    startDate: 'startDate'
  };

  export type ArenaScalarFieldEnum = (typeof ArenaScalarFieldEnum)[keyof typeof ArenaScalarFieldEnum]


  export const ChattingScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    arenaId: 'arenaId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type ChattingScalarFieldEnum = (typeof ChattingScalarFieldEnum)[keyof typeof ChattingScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    arenaId: 'arenaId',
    votedTo: 'votedTo'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const NotificationTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    imageUrl: 'imageUrl'
  };

  export type NotificationTypeScalarFieldEnum = (typeof NotificationTypeScalarFieldEnum)[keyof typeof NotificationTypeScalarFieldEnum]


  export const NotificationRecordScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    typeId: 'typeId',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type NotificationRecordScalarFieldEnum = (typeof NotificationRecordScalarFieldEnum)[keyof typeof NotificationRecordScalarFieldEnum]


  export const ScorePolicyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    score: 'score',
    imageUrl: 'imageUrl'
  };

  export type ScorePolicyScalarFieldEnum = (typeof ScorePolicyScalarFieldEnum)[keyof typeof ScorePolicyScalarFieldEnum]


  export const ScoreRecordScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    policyId: 'policyId',
    createdAt: 'createdAt'
  };

  export type ScoreRecordScalarFieldEnum = (typeof ScoreRecordScalarFieldEnum)[keyof typeof ScoreRecordScalarFieldEnum]


  export const PlatformScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type PlatformScalarFieldEnum = (typeof PlatformScalarFieldEnum)[keyof typeof PlatformScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const ThemeScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ThemeScalarFieldEnum = (typeof ThemeScalarFieldEnum)[keyof typeof ThemeScalarFieldEnum]


  export const PreferredPlatformScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    platformId: 'platformId'
  };

  export type PreferredPlatformScalarFieldEnum = (typeof PreferredPlatformScalarFieldEnum)[keyof typeof PreferredPlatformScalarFieldEnum]


  export const PreferredGenreScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    genreId: 'genreId'
  };

  export type PreferredGenreScalarFieldEnum = (typeof PreferredGenreScalarFieldEnum)[keyof typeof PreferredGenreScalarFieldEnum]


  export const PreferredThemeScalarFieldEnum: {
    id: 'id',
    memberId: 'memberId',
    themeId: 'themeId'
  };

  export type PreferredThemeScalarFieldEnum = (typeof PreferredThemeScalarFieldEnum)[keyof typeof PreferredThemeScalarFieldEnum]


  export const GamePlatformScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    platformId: 'platformId'
  };

  export type GamePlatformScalarFieldEnum = (typeof GamePlatformScalarFieldEnum)[keyof typeof GamePlatformScalarFieldEnum]


  export const GameGenreScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    genreId: 'genreId'
  };

  export type GameGenreScalarFieldEnum = (typeof GameGenreScalarFieldEnum)[keyof typeof GameGenreScalarFieldEnum]


  export const GameThemeScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    themeId: 'themeId'
  };

  export type GameThemeScalarFieldEnum = (typeof GameThemeScalarFieldEnum)[keyof typeof GameThemeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    id?: StringFilter<"Member"> | string
    nickname?: StringFilter<"Member"> | string
    email?: StringFilter<"Member"> | string
    password?: StringFilter<"Member"> | string
    imageUrl?: StringFilter<"Member"> | string
    birthDate?: DateTimeFilter<"Member"> | Date | string
    isMale?: BoolFilter<"Member"> | boolean
    score?: IntFilter<"Member"> | number
    lastAttendedDate?: DateTimeFilter<"Member"> | Date | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Member"> | Date | string | null
    arenasAsChallenger?: ArenaListRelationFilter
    arenasAsCreator?: ArenaListRelationFilter
    chattings?: ChattingListRelationFilter
    notificationRecords?: NotificationRecordListRelationFilter
    preferredGenres?: PreferredGenreListRelationFilter
    preferredPlatforms?: PreferredPlatformListRelationFilter
    preferredThemes?: PreferredThemeListRelationFilter
    reviewLikes?: ReviewLikeListRelationFilter
    reviews?: ReviewListRelationFilter
    scoreRecords?: ScoreRecordListRelationFilter
    votes?: VoteListRelationFilter
    wishlists?: WishlistListRelationFilter
  }

  export type MemberOrderByWithRelationInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    imageUrl?: SortOrder
    birthDate?: SortOrder
    isMale?: SortOrder
    score?: SortOrder
    lastAttendedDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    arenasAsChallenger?: ArenaOrderByRelationAggregateInput
    arenasAsCreator?: ArenaOrderByRelationAggregateInput
    chattings?: ChattingOrderByRelationAggregateInput
    notificationRecords?: NotificationRecordOrderByRelationAggregateInput
    preferredGenres?: PreferredGenreOrderByRelationAggregateInput
    preferredPlatforms?: PreferredPlatformOrderByRelationAggregateInput
    preferredThemes?: PreferredThemeOrderByRelationAggregateInput
    reviewLikes?: ReviewLikeOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    scoreRecords?: ScoreRecordOrderByRelationAggregateInput
    votes?: VoteOrderByRelationAggregateInput
    wishlists?: WishlistOrderByRelationAggregateInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    nickname?: StringFilter<"Member"> | string
    password?: StringFilter<"Member"> | string
    imageUrl?: StringFilter<"Member"> | string
    birthDate?: DateTimeFilter<"Member"> | Date | string
    isMale?: BoolFilter<"Member"> | boolean
    score?: IntFilter<"Member"> | number
    lastAttendedDate?: DateTimeFilter<"Member"> | Date | string
    createdAt?: DateTimeFilter<"Member"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Member"> | Date | string | null
    arenasAsChallenger?: ArenaListRelationFilter
    arenasAsCreator?: ArenaListRelationFilter
    chattings?: ChattingListRelationFilter
    notificationRecords?: NotificationRecordListRelationFilter
    preferredGenres?: PreferredGenreListRelationFilter
    preferredPlatforms?: PreferredPlatformListRelationFilter
    preferredThemes?: PreferredThemeListRelationFilter
    reviewLikes?: ReviewLikeListRelationFilter
    reviews?: ReviewListRelationFilter
    scoreRecords?: ScoreRecordListRelationFilter
    votes?: VoteListRelationFilter
    wishlists?: WishlistListRelationFilter
  }, "id" | "email">

  export type MemberOrderByWithAggregationInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    imageUrl?: SortOrder
    birthDate?: SortOrder
    isMale?: SortOrder
    score?: SortOrder
    lastAttendedDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: MemberCountOrderByAggregateInput
    _avg?: MemberAvgOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
    _sum?: MemberSumOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Member"> | string
    nickname?: StringWithAggregatesFilter<"Member"> | string
    email?: StringWithAggregatesFilter<"Member"> | string
    password?: StringWithAggregatesFilter<"Member"> | string
    imageUrl?: StringWithAggregatesFilter<"Member"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    isMale?: BoolWithAggregatesFilter<"Member"> | boolean
    score?: IntWithAggregatesFilter<"Member"> | number
    lastAttendedDate?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Member"> | Date | string | null
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    title?: StringFilter<"Game"> | string
    developer?: StringNullableFilter<"Game"> | string | null
    thumbnail?: StringNullableFilter<"Game"> | string | null
    releaseDate?: DateTimeNullableFilter<"Game"> | Date | string | null
    gameGenres?: GameGenreListRelationFilter
    gamePlatforms?: GamePlatformListRelationFilter
    gameThemes?: GameThemeListRelationFilter
    reviews?: ReviewListRelationFilter
    wishlists?: WishlistListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    developer?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    releaseDate?: SortOrderInput | SortOrder
    gameGenres?: GameGenreOrderByRelationAggregateInput
    gamePlatforms?: GamePlatformOrderByRelationAggregateInput
    gameThemes?: GameThemeOrderByRelationAggregateInput
    reviews?: ReviewOrderByRelationAggregateInput
    wishlists?: WishlistOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    title?: StringFilter<"Game"> | string
    developer?: StringNullableFilter<"Game"> | string | null
    thumbnail?: StringNullableFilter<"Game"> | string | null
    releaseDate?: DateTimeNullableFilter<"Game"> | Date | string | null
    gameGenres?: GameGenreListRelationFilter
    gamePlatforms?: GamePlatformListRelationFilter
    gameThemes?: GameThemeListRelationFilter
    reviews?: ReviewListRelationFilter
    wishlists?: WishlistListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    developer?: SortOrderInput | SortOrder
    thumbnail?: SortOrderInput | SortOrder
    releaseDate?: SortOrderInput | SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    title?: StringWithAggregatesFilter<"Game"> | string
    developer?: StringNullableWithAggregatesFilter<"Game"> | string | null
    thumbnail?: StringNullableWithAggregatesFilter<"Game"> | string | null
    releaseDate?: DateTimeNullableWithAggregatesFilter<"Game"> | Date | string | null
  }

  export type WishlistWhereInput = {
    AND?: WishlistWhereInput | WishlistWhereInput[]
    OR?: WishlistWhereInput[]
    NOT?: WishlistWhereInput | WishlistWhereInput[]
    id?: IntFilter<"Wishlist"> | number
    memberId?: StringFilter<"Wishlist"> | string
    gameId?: IntFilter<"Wishlist"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type WishlistOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    game?: GameOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type WishlistWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WishlistWhereInput | WishlistWhereInput[]
    OR?: WishlistWhereInput[]
    NOT?: WishlistWhereInput | WishlistWhereInput[]
    memberId?: StringFilter<"Wishlist"> | string
    gameId?: IntFilter<"Wishlist"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type WishlistOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    _count?: WishlistCountOrderByAggregateInput
    _avg?: WishlistAvgOrderByAggregateInput
    _max?: WishlistMaxOrderByAggregateInput
    _min?: WishlistMinOrderByAggregateInput
    _sum?: WishlistSumOrderByAggregateInput
  }

  export type WishlistScalarWhereWithAggregatesInput = {
    AND?: WishlistScalarWhereWithAggregatesInput | WishlistScalarWhereWithAggregatesInput[]
    OR?: WishlistScalarWhereWithAggregatesInput[]
    NOT?: WishlistScalarWhereWithAggregatesInput | WishlistScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Wishlist"> | number
    memberId?: StringWithAggregatesFilter<"Wishlist"> | string
    gameId?: IntWithAggregatesFilter<"Wishlist"> | number
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    memberId?: StringFilter<"Review"> | string
    gameId?: IntFilter<"Review"> | number
    content?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Review"> | Date | string | null
    reviewLikes?: ReviewLikeListRelationFilter
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    content?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    reviewLikes?: ReviewLikeOrderByRelationAggregateInput
    game?: GameOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    memberId?: StringFilter<"Review"> | string
    gameId?: IntFilter<"Review"> | number
    content?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Review"> | Date | string | null
    reviewLikes?: ReviewLikeListRelationFilter
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    content?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    memberId?: StringWithAggregatesFilter<"Review"> | string
    gameId?: IntWithAggregatesFilter<"Review"> | number
    content?: StringWithAggregatesFilter<"Review"> | string
    rating?: IntWithAggregatesFilter<"Review"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Review"> | Date | string | null
  }

  export type ReviewLikeWhereInput = {
    AND?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    OR?: ReviewLikeWhereInput[]
    NOT?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    id?: IntFilter<"ReviewLike"> | number
    memberId?: StringFilter<"ReviewLike"> | string
    reviewId?: IntFilter<"ReviewLike"> | number
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    review?: XOR<ReviewScalarRelationFilter, ReviewWhereInput>
  }

  export type ReviewLikeOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    reviewId?: SortOrder
    member?: MemberOrderByWithRelationInput
    review?: ReviewOrderByWithRelationInput
  }

  export type ReviewLikeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    OR?: ReviewLikeWhereInput[]
    NOT?: ReviewLikeWhereInput | ReviewLikeWhereInput[]
    memberId?: StringFilter<"ReviewLike"> | string
    reviewId?: IntFilter<"ReviewLike"> | number
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    review?: XOR<ReviewScalarRelationFilter, ReviewWhereInput>
  }, "id">

  export type ReviewLikeOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    reviewId?: SortOrder
    _count?: ReviewLikeCountOrderByAggregateInput
    _avg?: ReviewLikeAvgOrderByAggregateInput
    _max?: ReviewLikeMaxOrderByAggregateInput
    _min?: ReviewLikeMinOrderByAggregateInput
    _sum?: ReviewLikeSumOrderByAggregateInput
  }

  export type ReviewLikeScalarWhereWithAggregatesInput = {
    AND?: ReviewLikeScalarWhereWithAggregatesInput | ReviewLikeScalarWhereWithAggregatesInput[]
    OR?: ReviewLikeScalarWhereWithAggregatesInput[]
    NOT?: ReviewLikeScalarWhereWithAggregatesInput | ReviewLikeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReviewLike"> | number
    memberId?: StringWithAggregatesFilter<"ReviewLike"> | string
    reviewId?: IntWithAggregatesFilter<"ReviewLike"> | number
  }

  export type ArenaWhereInput = {
    AND?: ArenaWhereInput | ArenaWhereInput[]
    OR?: ArenaWhereInput[]
    NOT?: ArenaWhereInput | ArenaWhereInput[]
    id?: IntFilter<"Arena"> | number
    creatorId?: StringFilter<"Arena"> | string
    challengerId?: StringNullableFilter<"Arena"> | string | null
    title?: StringFilter<"Arena"> | string
    description?: StringFilter<"Arena"> | string
    status?: IntFilter<"Arena"> | number
    startDate?: DateTimeFilter<"Arena"> | Date | string
    challenger?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    creator?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    chattings?: ChattingListRelationFilter
    votes?: VoteListRelationFilter
  }

  export type ArenaOrderByWithRelationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    challengerId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    challenger?: MemberOrderByWithRelationInput
    creator?: MemberOrderByWithRelationInput
    chattings?: ChattingOrderByRelationAggregateInput
    votes?: VoteOrderByRelationAggregateInput
  }

  export type ArenaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ArenaWhereInput | ArenaWhereInput[]
    OR?: ArenaWhereInput[]
    NOT?: ArenaWhereInput | ArenaWhereInput[]
    creatorId?: StringFilter<"Arena"> | string
    challengerId?: StringNullableFilter<"Arena"> | string | null
    title?: StringFilter<"Arena"> | string
    description?: StringFilter<"Arena"> | string
    status?: IntFilter<"Arena"> | number
    startDate?: DateTimeFilter<"Arena"> | Date | string
    challenger?: XOR<MemberNullableScalarRelationFilter, MemberWhereInput> | null
    creator?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    chattings?: ChattingListRelationFilter
    votes?: VoteListRelationFilter
  }, "id">

  export type ArenaOrderByWithAggregationInput = {
    id?: SortOrder
    creatorId?: SortOrder
    challengerId?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    _count?: ArenaCountOrderByAggregateInput
    _avg?: ArenaAvgOrderByAggregateInput
    _max?: ArenaMaxOrderByAggregateInput
    _min?: ArenaMinOrderByAggregateInput
    _sum?: ArenaSumOrderByAggregateInput
  }

  export type ArenaScalarWhereWithAggregatesInput = {
    AND?: ArenaScalarWhereWithAggregatesInput | ArenaScalarWhereWithAggregatesInput[]
    OR?: ArenaScalarWhereWithAggregatesInput[]
    NOT?: ArenaScalarWhereWithAggregatesInput | ArenaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Arena"> | number
    creatorId?: StringWithAggregatesFilter<"Arena"> | string
    challengerId?: StringNullableWithAggregatesFilter<"Arena"> | string | null
    title?: StringWithAggregatesFilter<"Arena"> | string
    description?: StringWithAggregatesFilter<"Arena"> | string
    status?: IntWithAggregatesFilter<"Arena"> | number
    startDate?: DateTimeWithAggregatesFilter<"Arena"> | Date | string
  }

  export type ChattingWhereInput = {
    AND?: ChattingWhereInput | ChattingWhereInput[]
    OR?: ChattingWhereInput[]
    NOT?: ChattingWhereInput | ChattingWhereInput[]
    id?: IntFilter<"Chatting"> | number
    memberId?: StringFilter<"Chatting"> | string
    arenaId?: IntFilter<"Chatting"> | number
    content?: StringFilter<"Chatting"> | string
    createdAt?: DateTimeFilter<"Chatting"> | Date | string
    arena?: XOR<ArenaScalarRelationFilter, ArenaWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type ChattingOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    arena?: ArenaOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type ChattingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChattingWhereInput | ChattingWhereInput[]
    OR?: ChattingWhereInput[]
    NOT?: ChattingWhereInput | ChattingWhereInput[]
    memberId?: StringFilter<"Chatting"> | string
    arenaId?: IntFilter<"Chatting"> | number
    content?: StringFilter<"Chatting"> | string
    createdAt?: DateTimeFilter<"Chatting"> | Date | string
    arena?: XOR<ArenaScalarRelationFilter, ArenaWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type ChattingOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: ChattingCountOrderByAggregateInput
    _avg?: ChattingAvgOrderByAggregateInput
    _max?: ChattingMaxOrderByAggregateInput
    _min?: ChattingMinOrderByAggregateInput
    _sum?: ChattingSumOrderByAggregateInput
  }

  export type ChattingScalarWhereWithAggregatesInput = {
    AND?: ChattingScalarWhereWithAggregatesInput | ChattingScalarWhereWithAggregatesInput[]
    OR?: ChattingScalarWhereWithAggregatesInput[]
    NOT?: ChattingScalarWhereWithAggregatesInput | ChattingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Chatting"> | number
    memberId?: StringWithAggregatesFilter<"Chatting"> | string
    arenaId?: IntWithAggregatesFilter<"Chatting"> | number
    content?: StringWithAggregatesFilter<"Chatting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Chatting"> | Date | string
  }

  export type VoteWhereInput = {
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    id?: IntFilter<"Vote"> | number
    memberId?: StringFilter<"Vote"> | string
    arenaId?: IntFilter<"Vote"> | number
    votedTo?: StringFilter<"Vote"> | string
    arena?: XOR<ArenaScalarRelationFilter, ArenaWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type VoteOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    votedTo?: SortOrder
    arena?: ArenaOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type VoteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    memberId?: StringFilter<"Vote"> | string
    arenaId?: IntFilter<"Vote"> | number
    votedTo?: StringFilter<"Vote"> | string
    arena?: XOR<ArenaScalarRelationFilter, ArenaWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type VoteOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    votedTo?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _avg?: VoteAvgOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
    _sum?: VoteSumOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    OR?: VoteScalarWhereWithAggregatesInput[]
    NOT?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vote"> | number
    memberId?: StringWithAggregatesFilter<"Vote"> | string
    arenaId?: IntWithAggregatesFilter<"Vote"> | number
    votedTo?: StringWithAggregatesFilter<"Vote"> | string
  }

  export type NotificationTypeWhereInput = {
    AND?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    OR?: NotificationTypeWhereInput[]
    NOT?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    id?: IntFilter<"NotificationType"> | number
    name?: StringFilter<"NotificationType"> | string
    imageUrl?: StringFilter<"NotificationType"> | string
    notificationRecords?: NotificationRecordListRelationFilter
  }

  export type NotificationTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    notificationRecords?: NotificationRecordOrderByRelationAggregateInput
  }

  export type NotificationTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    OR?: NotificationTypeWhereInput[]
    NOT?: NotificationTypeWhereInput | NotificationTypeWhereInput[]
    name?: StringFilter<"NotificationType"> | string
    imageUrl?: StringFilter<"NotificationType"> | string
    notificationRecords?: NotificationRecordListRelationFilter
  }, "id">

  export type NotificationTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
    _count?: NotificationTypeCountOrderByAggregateInput
    _avg?: NotificationTypeAvgOrderByAggregateInput
    _max?: NotificationTypeMaxOrderByAggregateInput
    _min?: NotificationTypeMinOrderByAggregateInput
    _sum?: NotificationTypeSumOrderByAggregateInput
  }

  export type NotificationTypeScalarWhereWithAggregatesInput = {
    AND?: NotificationTypeScalarWhereWithAggregatesInput | NotificationTypeScalarWhereWithAggregatesInput[]
    OR?: NotificationTypeScalarWhereWithAggregatesInput[]
    NOT?: NotificationTypeScalarWhereWithAggregatesInput | NotificationTypeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NotificationType"> | number
    name?: StringWithAggregatesFilter<"NotificationType"> | string
    imageUrl?: StringWithAggregatesFilter<"NotificationType"> | string
  }

  export type NotificationRecordWhereInput = {
    AND?: NotificationRecordWhereInput | NotificationRecordWhereInput[]
    OR?: NotificationRecordWhereInput[]
    NOT?: NotificationRecordWhereInput | NotificationRecordWhereInput[]
    id?: IntFilter<"NotificationRecord"> | number
    memberId?: StringFilter<"NotificationRecord"> | string
    typeId?: IntFilter<"NotificationRecord"> | number
    description?: StringFilter<"NotificationRecord"> | string
    createdAt?: DateTimeFilter<"NotificationRecord"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    type?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }

  export type NotificationRecordOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    typeId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    member?: MemberOrderByWithRelationInput
    type?: NotificationTypeOrderByWithRelationInput
  }

  export type NotificationRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationRecordWhereInput | NotificationRecordWhereInput[]
    OR?: NotificationRecordWhereInput[]
    NOT?: NotificationRecordWhereInput | NotificationRecordWhereInput[]
    memberId?: StringFilter<"NotificationRecord"> | string
    typeId?: IntFilter<"NotificationRecord"> | number
    description?: StringFilter<"NotificationRecord"> | string
    createdAt?: DateTimeFilter<"NotificationRecord"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    type?: XOR<NotificationTypeScalarRelationFilter, NotificationTypeWhereInput>
  }, "id">

  export type NotificationRecordOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    typeId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationRecordCountOrderByAggregateInput
    _avg?: NotificationRecordAvgOrderByAggregateInput
    _max?: NotificationRecordMaxOrderByAggregateInput
    _min?: NotificationRecordMinOrderByAggregateInput
    _sum?: NotificationRecordSumOrderByAggregateInput
  }

  export type NotificationRecordScalarWhereWithAggregatesInput = {
    AND?: NotificationRecordScalarWhereWithAggregatesInput | NotificationRecordScalarWhereWithAggregatesInput[]
    OR?: NotificationRecordScalarWhereWithAggregatesInput[]
    NOT?: NotificationRecordScalarWhereWithAggregatesInput | NotificationRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NotificationRecord"> | number
    memberId?: StringWithAggregatesFilter<"NotificationRecord"> | string
    typeId?: IntWithAggregatesFilter<"NotificationRecord"> | number
    description?: StringWithAggregatesFilter<"NotificationRecord"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NotificationRecord"> | Date | string
  }

  export type ScorePolicyWhereInput = {
    AND?: ScorePolicyWhereInput | ScorePolicyWhereInput[]
    OR?: ScorePolicyWhereInput[]
    NOT?: ScorePolicyWhereInput | ScorePolicyWhereInput[]
    id?: IntFilter<"ScorePolicy"> | number
    name?: StringFilter<"ScorePolicy"> | string
    description?: StringFilter<"ScorePolicy"> | string
    score?: IntFilter<"ScorePolicy"> | number
    imageUrl?: StringFilter<"ScorePolicy"> | string
    scoreRecords?: ScoreRecordListRelationFilter
  }

  export type ScorePolicyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
    scoreRecords?: ScoreRecordOrderByRelationAggregateInput
  }

  export type ScorePolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScorePolicyWhereInput | ScorePolicyWhereInput[]
    OR?: ScorePolicyWhereInput[]
    NOT?: ScorePolicyWhereInput | ScorePolicyWhereInput[]
    name?: StringFilter<"ScorePolicy"> | string
    description?: StringFilter<"ScorePolicy"> | string
    score?: IntFilter<"ScorePolicy"> | number
    imageUrl?: StringFilter<"ScorePolicy"> | string
    scoreRecords?: ScoreRecordListRelationFilter
  }, "id">

  export type ScorePolicyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
    _count?: ScorePolicyCountOrderByAggregateInput
    _avg?: ScorePolicyAvgOrderByAggregateInput
    _max?: ScorePolicyMaxOrderByAggregateInput
    _min?: ScorePolicyMinOrderByAggregateInput
    _sum?: ScorePolicySumOrderByAggregateInput
  }

  export type ScorePolicyScalarWhereWithAggregatesInput = {
    AND?: ScorePolicyScalarWhereWithAggregatesInput | ScorePolicyScalarWhereWithAggregatesInput[]
    OR?: ScorePolicyScalarWhereWithAggregatesInput[]
    NOT?: ScorePolicyScalarWhereWithAggregatesInput | ScorePolicyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScorePolicy"> | number
    name?: StringWithAggregatesFilter<"ScorePolicy"> | string
    description?: StringWithAggregatesFilter<"ScorePolicy"> | string
    score?: IntWithAggregatesFilter<"ScorePolicy"> | number
    imageUrl?: StringWithAggregatesFilter<"ScorePolicy"> | string
  }

  export type ScoreRecordWhereInput = {
    AND?: ScoreRecordWhereInput | ScoreRecordWhereInput[]
    OR?: ScoreRecordWhereInput[]
    NOT?: ScoreRecordWhereInput | ScoreRecordWhereInput[]
    id?: IntFilter<"ScoreRecord"> | number
    memberId?: StringFilter<"ScoreRecord"> | string
    policyId?: IntFilter<"ScoreRecord"> | number
    createdAt?: DateTimeFilter<"ScoreRecord"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    policy?: XOR<ScorePolicyScalarRelationFilter, ScorePolicyWhereInput>
  }

  export type ScoreRecordOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    policyId?: SortOrder
    createdAt?: SortOrder
    member?: MemberOrderByWithRelationInput
    policy?: ScorePolicyOrderByWithRelationInput
  }

  export type ScoreRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ScoreRecordWhereInput | ScoreRecordWhereInput[]
    OR?: ScoreRecordWhereInput[]
    NOT?: ScoreRecordWhereInput | ScoreRecordWhereInput[]
    memberId?: StringFilter<"ScoreRecord"> | string
    policyId?: IntFilter<"ScoreRecord"> | number
    createdAt?: DateTimeFilter<"ScoreRecord"> | Date | string
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    policy?: XOR<ScorePolicyScalarRelationFilter, ScorePolicyWhereInput>
  }, "id">

  export type ScoreRecordOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    policyId?: SortOrder
    createdAt?: SortOrder
    _count?: ScoreRecordCountOrderByAggregateInput
    _avg?: ScoreRecordAvgOrderByAggregateInput
    _max?: ScoreRecordMaxOrderByAggregateInput
    _min?: ScoreRecordMinOrderByAggregateInput
    _sum?: ScoreRecordSumOrderByAggregateInput
  }

  export type ScoreRecordScalarWhereWithAggregatesInput = {
    AND?: ScoreRecordScalarWhereWithAggregatesInput | ScoreRecordScalarWhereWithAggregatesInput[]
    OR?: ScoreRecordScalarWhereWithAggregatesInput[]
    NOT?: ScoreRecordScalarWhereWithAggregatesInput | ScoreRecordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ScoreRecord"> | number
    memberId?: StringWithAggregatesFilter<"ScoreRecord"> | string
    policyId?: IntWithAggregatesFilter<"ScoreRecord"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ScoreRecord"> | Date | string
  }

  export type PlatformWhereInput = {
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    id?: IntFilter<"Platform"> | number
    name?: StringFilter<"Platform"> | string
    gamePlatforms?: GamePlatformListRelationFilter
    preferredPlatforms?: PreferredPlatformListRelationFilter
  }

  export type PlatformOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gamePlatforms?: GamePlatformOrderByRelationAggregateInput
    preferredPlatforms?: PreferredPlatformOrderByRelationAggregateInput
  }

  export type PlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    gamePlatforms?: GamePlatformListRelationFilter
    preferredPlatforms?: PreferredPlatformListRelationFilter
  }, "id" | "name">

  export type PlatformOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: PlatformCountOrderByAggregateInput
    _avg?: PlatformAvgOrderByAggregateInput
    _max?: PlatformMaxOrderByAggregateInput
    _min?: PlatformMinOrderByAggregateInput
    _sum?: PlatformSumOrderByAggregateInput
  }

  export type PlatformScalarWhereWithAggregatesInput = {
    AND?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    OR?: PlatformScalarWhereWithAggregatesInput[]
    NOT?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Platform"> | number
    name?: StringWithAggregatesFilter<"Platform"> | string
  }

  export type GenreWhereInput = {
    AND?: GenreWhereInput | GenreWhereInput[]
    OR?: GenreWhereInput[]
    NOT?: GenreWhereInput | GenreWhereInput[]
    id?: IntFilter<"Genre"> | number
    name?: StringFilter<"Genre"> | string
    gameGenres?: GameGenreListRelationFilter
    preferredGenres?: PreferredGenreListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gameGenres?: GameGenreOrderByRelationAggregateInput
    preferredGenres?: PreferredGenreOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: GenreWhereInput | GenreWhereInput[]
    OR?: GenreWhereInput[]
    NOT?: GenreWhereInput | GenreWhereInput[]
    gameGenres?: GameGenreListRelationFilter
    preferredGenres?: PreferredGenreListRelationFilter
  }, "id" | "name">

  export type GenreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _avg?: GenreAvgOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
    _sum?: GenreSumOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: GenreScalarWhereWithAggregatesInput | GenreScalarWhereWithAggregatesInput[]
    OR?: GenreScalarWhereWithAggregatesInput[]
    NOT?: GenreScalarWhereWithAggregatesInput | GenreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Genre"> | number
    name?: StringWithAggregatesFilter<"Genre"> | string
  }

  export type ThemeWhereInput = {
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    id?: IntFilter<"Theme"> | number
    name?: StringFilter<"Theme"> | string
    gameThemes?: GameThemeListRelationFilter
    preferredThemes?: PreferredThemeListRelationFilter
  }

  export type ThemeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    gameThemes?: GameThemeOrderByRelationAggregateInput
    preferredThemes?: PreferredThemeOrderByRelationAggregateInput
  }

  export type ThemeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ThemeWhereInput | ThemeWhereInput[]
    OR?: ThemeWhereInput[]
    NOT?: ThemeWhereInput | ThemeWhereInput[]
    gameThemes?: GameThemeListRelationFilter
    preferredThemes?: PreferredThemeListRelationFilter
  }, "id" | "name">

  export type ThemeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ThemeCountOrderByAggregateInput
    _avg?: ThemeAvgOrderByAggregateInput
    _max?: ThemeMaxOrderByAggregateInput
    _min?: ThemeMinOrderByAggregateInput
    _sum?: ThemeSumOrderByAggregateInput
  }

  export type ThemeScalarWhereWithAggregatesInput = {
    AND?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    OR?: ThemeScalarWhereWithAggregatesInput[]
    NOT?: ThemeScalarWhereWithAggregatesInput | ThemeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Theme"> | number
    name?: StringWithAggregatesFilter<"Theme"> | string
  }

  export type PreferredPlatformWhereInput = {
    AND?: PreferredPlatformWhereInput | PreferredPlatformWhereInput[]
    OR?: PreferredPlatformWhereInput[]
    NOT?: PreferredPlatformWhereInput | PreferredPlatformWhereInput[]
    id?: IntFilter<"PreferredPlatform"> | number
    memberId?: StringFilter<"PreferredPlatform"> | string
    platformId?: IntFilter<"PreferredPlatform"> | number
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    platform?: XOR<PlatformScalarRelationFilter, PlatformWhereInput>
  }

  export type PreferredPlatformOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    member?: MemberOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
  }

  export type PreferredPlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PreferredPlatformWhereInput | PreferredPlatformWhereInput[]
    OR?: PreferredPlatformWhereInput[]
    NOT?: PreferredPlatformWhereInput | PreferredPlatformWhereInput[]
    memberId?: StringFilter<"PreferredPlatform"> | string
    platformId?: IntFilter<"PreferredPlatform"> | number
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    platform?: XOR<PlatformScalarRelationFilter, PlatformWhereInput>
  }, "id">

  export type PreferredPlatformOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    _count?: PreferredPlatformCountOrderByAggregateInput
    _avg?: PreferredPlatformAvgOrderByAggregateInput
    _max?: PreferredPlatformMaxOrderByAggregateInput
    _min?: PreferredPlatformMinOrderByAggregateInput
    _sum?: PreferredPlatformSumOrderByAggregateInput
  }

  export type PreferredPlatformScalarWhereWithAggregatesInput = {
    AND?: PreferredPlatformScalarWhereWithAggregatesInput | PreferredPlatformScalarWhereWithAggregatesInput[]
    OR?: PreferredPlatformScalarWhereWithAggregatesInput[]
    NOT?: PreferredPlatformScalarWhereWithAggregatesInput | PreferredPlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreferredPlatform"> | number
    memberId?: StringWithAggregatesFilter<"PreferredPlatform"> | string
    platformId?: IntWithAggregatesFilter<"PreferredPlatform"> | number
  }

  export type PreferredGenreWhereInput = {
    AND?: PreferredGenreWhereInput | PreferredGenreWhereInput[]
    OR?: PreferredGenreWhereInput[]
    NOT?: PreferredGenreWhereInput | PreferredGenreWhereInput[]
    id?: IntFilter<"PreferredGenre"> | number
    memberId?: StringFilter<"PreferredGenre"> | string
    genreId?: IntFilter<"PreferredGenre"> | number
    genre?: XOR<GenreScalarRelationFilter, GenreWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }

  export type PreferredGenreOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    genreId?: SortOrder
    genre?: GenreOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type PreferredGenreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PreferredGenreWhereInput | PreferredGenreWhereInput[]
    OR?: PreferredGenreWhereInput[]
    NOT?: PreferredGenreWhereInput | PreferredGenreWhereInput[]
    memberId?: StringFilter<"PreferredGenre"> | string
    genreId?: IntFilter<"PreferredGenre"> | number
    genre?: XOR<GenreScalarRelationFilter, GenreWhereInput>
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
  }, "id">

  export type PreferredGenreOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    genreId?: SortOrder
    _count?: PreferredGenreCountOrderByAggregateInput
    _avg?: PreferredGenreAvgOrderByAggregateInput
    _max?: PreferredGenreMaxOrderByAggregateInput
    _min?: PreferredGenreMinOrderByAggregateInput
    _sum?: PreferredGenreSumOrderByAggregateInput
  }

  export type PreferredGenreScalarWhereWithAggregatesInput = {
    AND?: PreferredGenreScalarWhereWithAggregatesInput | PreferredGenreScalarWhereWithAggregatesInput[]
    OR?: PreferredGenreScalarWhereWithAggregatesInput[]
    NOT?: PreferredGenreScalarWhereWithAggregatesInput | PreferredGenreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreferredGenre"> | number
    memberId?: StringWithAggregatesFilter<"PreferredGenre"> | string
    genreId?: IntWithAggregatesFilter<"PreferredGenre"> | number
  }

  export type PreferredThemeWhereInput = {
    AND?: PreferredThemeWhereInput | PreferredThemeWhereInput[]
    OR?: PreferredThemeWhereInput[]
    NOT?: PreferredThemeWhereInput | PreferredThemeWhereInput[]
    id?: IntFilter<"PreferredTheme"> | number
    memberId?: StringFilter<"PreferredTheme"> | string
    themeId?: IntFilter<"PreferredTheme"> | number
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    theme?: XOR<ThemeScalarRelationFilter, ThemeWhereInput>
  }

  export type PreferredThemeOrderByWithRelationInput = {
    id?: SortOrder
    memberId?: SortOrder
    themeId?: SortOrder
    member?: MemberOrderByWithRelationInput
    theme?: ThemeOrderByWithRelationInput
  }

  export type PreferredThemeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PreferredThemeWhereInput | PreferredThemeWhereInput[]
    OR?: PreferredThemeWhereInput[]
    NOT?: PreferredThemeWhereInput | PreferredThemeWhereInput[]
    memberId?: StringFilter<"PreferredTheme"> | string
    themeId?: IntFilter<"PreferredTheme"> | number
    member?: XOR<MemberScalarRelationFilter, MemberWhereInput>
    theme?: XOR<ThemeScalarRelationFilter, ThemeWhereInput>
  }, "id">

  export type PreferredThemeOrderByWithAggregationInput = {
    id?: SortOrder
    memberId?: SortOrder
    themeId?: SortOrder
    _count?: PreferredThemeCountOrderByAggregateInput
    _avg?: PreferredThemeAvgOrderByAggregateInput
    _max?: PreferredThemeMaxOrderByAggregateInput
    _min?: PreferredThemeMinOrderByAggregateInput
    _sum?: PreferredThemeSumOrderByAggregateInput
  }

  export type PreferredThemeScalarWhereWithAggregatesInput = {
    AND?: PreferredThemeScalarWhereWithAggregatesInput | PreferredThemeScalarWhereWithAggregatesInput[]
    OR?: PreferredThemeScalarWhereWithAggregatesInput[]
    NOT?: PreferredThemeScalarWhereWithAggregatesInput | PreferredThemeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PreferredTheme"> | number
    memberId?: StringWithAggregatesFilter<"PreferredTheme"> | string
    themeId?: IntWithAggregatesFilter<"PreferredTheme"> | number
  }

  export type GamePlatformWhereInput = {
    AND?: GamePlatformWhereInput | GamePlatformWhereInput[]
    OR?: GamePlatformWhereInput[]
    NOT?: GamePlatformWhereInput | GamePlatformWhereInput[]
    id?: IntFilter<"GamePlatform"> | number
    gameId?: IntFilter<"GamePlatform"> | number
    platformId?: IntFilter<"GamePlatform"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    platform?: XOR<PlatformScalarRelationFilter, PlatformWhereInput>
  }

  export type GamePlatformOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
    game?: GameOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
  }

  export type GamePlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GamePlatformWhereInput | GamePlatformWhereInput[]
    OR?: GamePlatformWhereInput[]
    NOT?: GamePlatformWhereInput | GamePlatformWhereInput[]
    gameId?: IntFilter<"GamePlatform"> | number
    platformId?: IntFilter<"GamePlatform"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    platform?: XOR<PlatformScalarRelationFilter, PlatformWhereInput>
  }, "id">

  export type GamePlatformOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
    _count?: GamePlatformCountOrderByAggregateInput
    _avg?: GamePlatformAvgOrderByAggregateInput
    _max?: GamePlatformMaxOrderByAggregateInput
    _min?: GamePlatformMinOrderByAggregateInput
    _sum?: GamePlatformSumOrderByAggregateInput
  }

  export type GamePlatformScalarWhereWithAggregatesInput = {
    AND?: GamePlatformScalarWhereWithAggregatesInput | GamePlatformScalarWhereWithAggregatesInput[]
    OR?: GamePlatformScalarWhereWithAggregatesInput[]
    NOT?: GamePlatformScalarWhereWithAggregatesInput | GamePlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GamePlatform"> | number
    gameId?: IntWithAggregatesFilter<"GamePlatform"> | number
    platformId?: IntWithAggregatesFilter<"GamePlatform"> | number
  }

  export type GameGenreWhereInput = {
    AND?: GameGenreWhereInput | GameGenreWhereInput[]
    OR?: GameGenreWhereInput[]
    NOT?: GameGenreWhereInput | GameGenreWhereInput[]
    id?: IntFilter<"GameGenre"> | number
    gameId?: IntFilter<"GameGenre"> | number
    genreId?: IntFilter<"GameGenre"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    genre?: XOR<GenreScalarRelationFilter, GenreWhereInput>
  }

  export type GameGenreOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
    game?: GameOrderByWithRelationInput
    genre?: GenreOrderByWithRelationInput
  }

  export type GameGenreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameGenreWhereInput | GameGenreWhereInput[]
    OR?: GameGenreWhereInput[]
    NOT?: GameGenreWhereInput | GameGenreWhereInput[]
    gameId?: IntFilter<"GameGenre"> | number
    genreId?: IntFilter<"GameGenre"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    genre?: XOR<GenreScalarRelationFilter, GenreWhereInput>
  }, "id">

  export type GameGenreOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
    _count?: GameGenreCountOrderByAggregateInput
    _avg?: GameGenreAvgOrderByAggregateInput
    _max?: GameGenreMaxOrderByAggregateInput
    _min?: GameGenreMinOrderByAggregateInput
    _sum?: GameGenreSumOrderByAggregateInput
  }

  export type GameGenreScalarWhereWithAggregatesInput = {
    AND?: GameGenreScalarWhereWithAggregatesInput | GameGenreScalarWhereWithAggregatesInput[]
    OR?: GameGenreScalarWhereWithAggregatesInput[]
    NOT?: GameGenreScalarWhereWithAggregatesInput | GameGenreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameGenre"> | number
    gameId?: IntWithAggregatesFilter<"GameGenre"> | number
    genreId?: IntWithAggregatesFilter<"GameGenre"> | number
  }

  export type GameThemeWhereInput = {
    AND?: GameThemeWhereInput | GameThemeWhereInput[]
    OR?: GameThemeWhereInput[]
    NOT?: GameThemeWhereInput | GameThemeWhereInput[]
    id?: IntFilter<"GameTheme"> | number
    gameId?: IntFilter<"GameTheme"> | number
    themeId?: IntFilter<"GameTheme"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    theme?: XOR<ThemeScalarRelationFilter, ThemeWhereInput>
  }

  export type GameThemeOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
    game?: GameOrderByWithRelationInput
    theme?: ThemeOrderByWithRelationInput
  }

  export type GameThemeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameThemeWhereInput | GameThemeWhereInput[]
    OR?: GameThemeWhereInput[]
    NOT?: GameThemeWhereInput | GameThemeWhereInput[]
    gameId?: IntFilter<"GameTheme"> | number
    themeId?: IntFilter<"GameTheme"> | number
    game?: XOR<GameScalarRelationFilter, GameWhereInput>
    theme?: XOR<ThemeScalarRelationFilter, ThemeWhereInput>
  }, "id">

  export type GameThemeOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
    _count?: GameThemeCountOrderByAggregateInput
    _avg?: GameThemeAvgOrderByAggregateInput
    _max?: GameThemeMaxOrderByAggregateInput
    _min?: GameThemeMinOrderByAggregateInput
    _sum?: GameThemeSumOrderByAggregateInput
  }

  export type GameThemeScalarWhereWithAggregatesInput = {
    AND?: GameThemeScalarWhereWithAggregatesInput | GameThemeScalarWhereWithAggregatesInput[]
    OR?: GameThemeScalarWhereWithAggregatesInput[]
    NOT?: GameThemeScalarWhereWithAggregatesInput | GameThemeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GameTheme"> | number
    gameId?: IntWithAggregatesFilter<"GameTheme"> | number
    themeId?: IntWithAggregatesFilter<"GameTheme"> | number
  }

  export type MemberCreateInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateManyInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type MemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameCreateInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeCreateNestedManyWithoutGameInput
    reviews?: ReviewCreateNestedManyWithoutGameInput
    wishlists?: WishlistCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutGameInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutGameInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUpdateManyWithoutGameNestedInput
    reviews?: ReviewUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUncheckedUpdateManyWithoutGameNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
  }

  export type GameUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WishlistCreateInput = {
    game: GameCreateNestedOneWithoutWishlistsInput
    member: MemberCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateInput = {
    id?: number
    memberId: string
    gameId: number
  }

  export type WishlistUpdateInput = {
    game?: GameUpdateOneRequiredWithoutWishlistsNestedInput
    member?: MemberUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type WishlistCreateManyInput = {
    id?: number
    memberId: string
    gameId: number
  }

  export type WishlistUpdateManyMutationInput = {

  }

  export type WishlistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateInput = {
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    reviewLikes?: ReviewLikeCreateNestedManyWithoutReviewInput
    game: GameCreateNestedOneWithoutReviewsInput
    member: MemberCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    memberId: string
    gameId: number
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewLikes?: ReviewLikeUpdateManyWithoutReviewNestedInput
    game?: GameUpdateOneRequiredWithoutReviewsNestedInput
    member?: MemberUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateManyInput = {
    id?: number
    memberId: string
    gameId: number
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ReviewUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReviewLikeCreateInput = {
    member: MemberCreateNestedOneWithoutReviewLikesInput
    review: ReviewCreateNestedOneWithoutReviewLikesInput
  }

  export type ReviewLikeUncheckedCreateInput = {
    id?: number
    memberId: string
    reviewId: number
  }

  export type ReviewLikeUpdateInput = {
    member?: MemberUpdateOneRequiredWithoutReviewLikesNestedInput
    review?: ReviewUpdateOneRequiredWithoutReviewLikesNestedInput
  }

  export type ReviewLikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewLikeCreateManyInput = {
    id?: number
    memberId: string
    reviewId: number
  }

  export type ReviewLikeUpdateManyMutationInput = {

  }

  export type ReviewLikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ArenaCreateInput = {
    title: string
    description: string
    status: number
    startDate: Date | string
    challenger?: MemberCreateNestedOneWithoutArenasAsChallengerInput
    creator: MemberCreateNestedOneWithoutArenasAsCreatorInput
    chattings?: ChattingCreateNestedManyWithoutArenaInput
    votes?: VoteCreateNestedManyWithoutArenaInput
  }

  export type ArenaUncheckedCreateInput = {
    id?: number
    creatorId: string
    challengerId?: string | null
    title: string
    description: string
    status: number
    startDate: Date | string
    chattings?: ChattingUncheckedCreateNestedManyWithoutArenaInput
    votes?: VoteUncheckedCreateNestedManyWithoutArenaInput
  }

  export type ArenaUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    challenger?: MemberUpdateOneWithoutArenasAsChallengerNestedInput
    creator?: MemberUpdateOneRequiredWithoutArenasAsCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutArenaNestedInput
    votes?: VoteUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    challengerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    chattings?: ChattingUncheckedUpdateManyWithoutArenaNestedInput
    votes?: VoteUncheckedUpdateManyWithoutArenaNestedInput
  }

  export type ArenaCreateManyInput = {
    id?: number
    creatorId: string
    challengerId?: string | null
    title: string
    description: string
    status: number
    startDate: Date | string
  }

  export type ArenaUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArenaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    challengerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChattingCreateInput = {
    content: string
    createdAt?: Date | string
    arena: ArenaCreateNestedOneWithoutChattingsInput
    member: MemberCreateNestedOneWithoutChattingsInput
  }

  export type ChattingUncheckedCreateInput = {
    id?: number
    memberId: string
    arenaId: number
    content: string
    createdAt?: Date | string
  }

  export type ChattingUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arena?: ArenaUpdateOneRequiredWithoutChattingsNestedInput
    member?: MemberUpdateOneRequiredWithoutChattingsNestedInput
  }

  export type ChattingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    arenaId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChattingCreateManyInput = {
    id?: number
    memberId: string
    arenaId: number
    content: string
    createdAt?: Date | string
  }

  export type ChattingUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChattingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    arenaId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateInput = {
    votedTo: string
    arena: ArenaCreateNestedOneWithoutVotesInput
    member: MemberCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateInput = {
    id?: number
    memberId: string
    arenaId: number
    votedTo: string
  }

  export type VoteUpdateInput = {
    votedTo?: StringFieldUpdateOperationsInput | string
    arena?: ArenaUpdateOneRequiredWithoutVotesNestedInput
    member?: MemberUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    arenaId?: IntFieldUpdateOperationsInput | number
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type VoteCreateManyInput = {
    id?: number
    memberId: string
    arenaId: number
    votedTo: string
  }

  export type VoteUpdateManyMutationInput = {
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    arenaId?: IntFieldUpdateOperationsInput | number
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationTypeCreateInput = {
    name: string
    imageUrl: string
    notificationRecords?: NotificationRecordCreateNestedManyWithoutTypeInput
  }

  export type NotificationTypeUncheckedCreateInput = {
    id?: number
    name: string
    imageUrl: string
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutTypeInput
  }

  export type NotificationTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    notificationRecords?: NotificationRecordUpdateManyWithoutTypeNestedInput
  }

  export type NotificationTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type NotificationTypeCreateManyInput = {
    id?: number
    name: string
    imageUrl: string
  }

  export type NotificationTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationRecordCreateInput = {
    description: string
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutNotificationRecordsInput
    type: NotificationTypeCreateNestedOneWithoutNotificationRecordsInput
  }

  export type NotificationRecordUncheckedCreateInput = {
    id?: number
    memberId: string
    typeId: number
    description: string
    createdAt?: Date | string
  }

  export type NotificationRecordUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutNotificationRecordsNestedInput
    type?: NotificationTypeUpdateOneRequiredWithoutNotificationRecordsNestedInput
  }

  export type NotificationRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRecordCreateManyInput = {
    id?: number
    memberId: string
    typeId: number
    description: string
    createdAt?: Date | string
  }

  export type NotificationRecordUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScorePolicyCreateInput = {
    name: string
    description: string
    score: number
    imageUrl: string
    scoreRecords?: ScoreRecordCreateNestedManyWithoutPolicyInput
  }

  export type ScorePolicyUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    score: number
    imageUrl: string
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type ScorePolicyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    scoreRecords?: ScoreRecordUpdateManyWithoutPolicyNestedInput
  }

  export type ScorePolicyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type ScorePolicyCreateManyInput = {
    id?: number
    name: string
    description: string
    score: number
    imageUrl: string
  }

  export type ScorePolicyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ScorePolicyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ScoreRecordCreateInput = {
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutScoreRecordsInput
    policy: ScorePolicyCreateNestedOneWithoutScoreRecordsInput
  }

  export type ScoreRecordUncheckedCreateInput = {
    id?: number
    memberId: string
    policyId: number
    createdAt?: Date | string
  }

  export type ScoreRecordUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutScoreRecordsNestedInput
    policy?: ScorePolicyUpdateOneRequiredWithoutScoreRecordsNestedInput
  }

  export type ScoreRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    policyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreRecordCreateManyInput = {
    id?: number
    memberId: string
    policyId: number
    createdAt?: Date | string
  }

  export type ScoreRecordUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    policyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlatformCreateInput = {
    name: string
    gamePlatforms?: GamePlatformCreateNestedManyWithoutPlatformInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateInput = {
    id?: number
    name: string
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutPlatformInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gamePlatforms?: GamePlatformUpdateManyWithoutPlatformNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutPlatformNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformCreateManyInput = {
    id?: number
    name: string
  }

  export type PlatformUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreCreateInput = {
    name: string
    gameGenres?: GameGenreCreateNestedManyWithoutGenreInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateInput = {
    id?: number
    name: string
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGenreInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gameGenres?: GameGenreUpdateManyWithoutGenreNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGenreNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GenreCreateManyInput = {
    id?: number
    name: string
  }

  export type GenreUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeCreateInput = {
    name: string
    gameThemes?: GameThemeCreateNestedManyWithoutThemeInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateInput = {
    id?: number
    name: string
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutThemeInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gameThemes?: GameThemeUpdateManyWithoutThemeNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gameThemes?: GameThemeUncheckedUpdateManyWithoutThemeNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ThemeCreateManyInput = {
    id?: number
    name: string
  }

  export type ThemeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ThemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PreferredPlatformCreateInput = {
    member: MemberCreateNestedOneWithoutPreferredPlatformsInput
    platform: PlatformCreateNestedOneWithoutPreferredPlatformsInput
  }

  export type PreferredPlatformUncheckedCreateInput = {
    id?: number
    memberId: string
    platformId: number
  }

  export type PreferredPlatformUpdateInput = {
    member?: MemberUpdateOneRequiredWithoutPreferredPlatformsNestedInput
    platform?: PlatformUpdateOneRequiredWithoutPreferredPlatformsNestedInput
  }

  export type PreferredPlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredPlatformCreateManyInput = {
    id?: number
    memberId: string
    platformId: number
  }

  export type PreferredPlatformUpdateManyMutationInput = {

  }

  export type PreferredPlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredGenreCreateInput = {
    genre: GenreCreateNestedOneWithoutPreferredGenresInput
    member: MemberCreateNestedOneWithoutPreferredGenresInput
  }

  export type PreferredGenreUncheckedCreateInput = {
    id?: number
    memberId: string
    genreId: number
  }

  export type PreferredGenreUpdateInput = {
    genre?: GenreUpdateOneRequiredWithoutPreferredGenresNestedInput
    member?: MemberUpdateOneRequiredWithoutPreferredGenresNestedInput
  }

  export type PreferredGenreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredGenreCreateManyInput = {
    id?: number
    memberId: string
    genreId: number
  }

  export type PreferredGenreUpdateManyMutationInput = {

  }

  export type PreferredGenreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredThemeCreateInput = {
    member: MemberCreateNestedOneWithoutPreferredThemesInput
    theme: ThemeCreateNestedOneWithoutPreferredThemesInput
  }

  export type PreferredThemeUncheckedCreateInput = {
    id?: number
    memberId: string
    themeId: number
  }

  export type PreferredThemeUpdateInput = {
    member?: MemberUpdateOneRequiredWithoutPreferredThemesNestedInput
    theme?: ThemeUpdateOneRequiredWithoutPreferredThemesNestedInput
  }

  export type PreferredThemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredThemeCreateManyInput = {
    id?: number
    memberId: string
    themeId: number
  }

  export type PreferredThemeUpdateManyMutationInput = {

  }

  export type PreferredThemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type GamePlatformCreateInput = {
    game: GameCreateNestedOneWithoutGamePlatformsInput
    platform: PlatformCreateNestedOneWithoutGamePlatformsInput
  }

  export type GamePlatformUncheckedCreateInput = {
    id?: number
    gameId: number
    platformId: number
  }

  export type GamePlatformUpdateInput = {
    game?: GameUpdateOneRequiredWithoutGamePlatformsNestedInput
    platform?: PlatformUpdateOneRequiredWithoutGamePlatformsNestedInput
  }

  export type GamePlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type GamePlatformCreateManyInput = {
    id?: number
    gameId: number
    platformId: number
  }

  export type GamePlatformUpdateManyMutationInput = {

  }

  export type GamePlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type GameGenreCreateInput = {
    game: GameCreateNestedOneWithoutGameGenresInput
    genre: GenreCreateNestedOneWithoutGameGenresInput
  }

  export type GameGenreUncheckedCreateInput = {
    id?: number
    gameId: number
    genreId: number
  }

  export type GameGenreUpdateInput = {
    game?: GameUpdateOneRequiredWithoutGameGenresNestedInput
    genre?: GenreUpdateOneRequiredWithoutGameGenresNestedInput
  }

  export type GameGenreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type GameGenreCreateManyInput = {
    id?: number
    gameId: number
    genreId: number
  }

  export type GameGenreUpdateManyMutationInput = {

  }

  export type GameGenreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type GameThemeCreateInput = {
    game: GameCreateNestedOneWithoutGameThemesInput
    theme: ThemeCreateNestedOneWithoutGameThemesInput
  }

  export type GameThemeUncheckedCreateInput = {
    id?: number
    gameId: number
    themeId: number
  }

  export type GameThemeUpdateInput = {
    game?: GameUpdateOneRequiredWithoutGameThemesNestedInput
    theme?: ThemeUpdateOneRequiredWithoutGameThemesNestedInput
  }

  export type GameThemeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type GameThemeCreateManyInput = {
    id?: number
    gameId: number
    themeId: number
  }

  export type GameThemeUpdateManyMutationInput = {

  }

  export type GameThemeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ArenaListRelationFilter = {
    every?: ArenaWhereInput
    some?: ArenaWhereInput
    none?: ArenaWhereInput
  }

  export type ChattingListRelationFilter = {
    every?: ChattingWhereInput
    some?: ChattingWhereInput
    none?: ChattingWhereInput
  }

  export type NotificationRecordListRelationFilter = {
    every?: NotificationRecordWhereInput
    some?: NotificationRecordWhereInput
    none?: NotificationRecordWhereInput
  }

  export type PreferredGenreListRelationFilter = {
    every?: PreferredGenreWhereInput
    some?: PreferredGenreWhereInput
    none?: PreferredGenreWhereInput
  }

  export type PreferredPlatformListRelationFilter = {
    every?: PreferredPlatformWhereInput
    some?: PreferredPlatformWhereInput
    none?: PreferredPlatformWhereInput
  }

  export type PreferredThemeListRelationFilter = {
    every?: PreferredThemeWhereInput
    some?: PreferredThemeWhereInput
    none?: PreferredThemeWhereInput
  }

  export type ReviewLikeListRelationFilter = {
    every?: ReviewLikeWhereInput
    some?: ReviewLikeWhereInput
    none?: ReviewLikeWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ScoreRecordListRelationFilter = {
    every?: ScoreRecordWhereInput
    some?: ScoreRecordWhereInput
    none?: ScoreRecordWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type WishlistListRelationFilter = {
    every?: WishlistWhereInput
    some?: WishlistWhereInput
    none?: WishlistWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ArenaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChattingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreferredGenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreferredPlatformOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PreferredThemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScoreRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WishlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    imageUrl?: SortOrder
    birthDate?: SortOrder
    isMale?: SortOrder
    score?: SortOrder
    lastAttendedDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MemberAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    imageUrl?: SortOrder
    birthDate?: SortOrder
    isMale?: SortOrder
    score?: SortOrder
    lastAttendedDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    imageUrl?: SortOrder
    birthDate?: SortOrder
    isMale?: SortOrder
    score?: SortOrder
    lastAttendedDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MemberSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type GameGenreListRelationFilter = {
    every?: GameGenreWhereInput
    some?: GameGenreWhereInput
    none?: GameGenreWhereInput
  }

  export type GamePlatformListRelationFilter = {
    every?: GamePlatformWhereInput
    some?: GamePlatformWhereInput
    none?: GamePlatformWhereInput
  }

  export type GameThemeListRelationFilter = {
    every?: GameThemeWhereInput
    some?: GameThemeWhereInput
    none?: GameThemeWhereInput
  }

  export type GameGenreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GamePlatformOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameThemeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    developer?: SortOrder
    thumbnail?: SortOrder
    releaseDate?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    developer?: SortOrder
    thumbnail?: SortOrder
    releaseDate?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    developer?: SortOrder
    thumbnail?: SortOrder
    releaseDate?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type GameScalarRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type MemberScalarRelationFilter = {
    is?: MemberWhereInput
    isNot?: MemberWhereInput
  }

  export type WishlistCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
  }

  export type WishlistAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type WishlistMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
  }

  export type WishlistMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
  }

  export type WishlistSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    content?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    content?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    gameId?: SortOrder
    content?: SortOrder
    rating?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    rating?: SortOrder
  }

  export type ReviewScalarRelationFilter = {
    is?: ReviewWhereInput
    isNot?: ReviewWhereInput
  }

  export type ReviewLikeCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    reviewId?: SortOrder
  }

  export type ReviewLikeAvgOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
  }

  export type ReviewLikeMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    reviewId?: SortOrder
  }

  export type ReviewLikeMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    reviewId?: SortOrder
  }

  export type ReviewLikeSumOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
  }

  export type MemberNullableScalarRelationFilter = {
    is?: MemberWhereInput | null
    isNot?: MemberWhereInput | null
  }

  export type ArenaCountOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    challengerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
  }

  export type ArenaAvgOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ArenaMaxOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    challengerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
  }

  export type ArenaMinOrderByAggregateInput = {
    id?: SortOrder
    creatorId?: SortOrder
    challengerId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
  }

  export type ArenaSumOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
  }

  export type ArenaScalarRelationFilter = {
    is?: ArenaWhereInput
    isNot?: ArenaWhereInput
  }

  export type ChattingCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ChattingAvgOrderByAggregateInput = {
    id?: SortOrder
    arenaId?: SortOrder
  }

  export type ChattingMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ChattingMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ChattingSumOrderByAggregateInput = {
    id?: SortOrder
    arenaId?: SortOrder
  }

  export type VoteCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    votedTo?: SortOrder
  }

  export type VoteAvgOrderByAggregateInput = {
    id?: SortOrder
    arenaId?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    votedTo?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    arenaId?: SortOrder
    votedTo?: SortOrder
  }

  export type VoteSumOrderByAggregateInput = {
    id?: SortOrder
    arenaId?: SortOrder
  }

  export type NotificationTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type NotificationTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type NotificationTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    imageUrl?: SortOrder
  }

  export type NotificationTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationTypeScalarRelationFilter = {
    is?: NotificationTypeWhereInput
    isNot?: NotificationTypeWhereInput
  }

  export type NotificationRecordCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    typeId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
  }

  export type NotificationRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    typeId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationRecordMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    typeId?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationRecordSumOrderByAggregateInput = {
    id?: SortOrder
    typeId?: SortOrder
  }

  export type ScorePolicyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
  }

  export type ScorePolicyAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type ScorePolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
  }

  export type ScorePolicyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    score?: SortOrder
    imageUrl?: SortOrder
  }

  export type ScorePolicySumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
  }

  export type ScorePolicyScalarRelationFilter = {
    is?: ScorePolicyWhereInput
    isNot?: ScorePolicyWhereInput
  }

  export type ScoreRecordCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    policyId?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
  }

  export type ScoreRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    policyId?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreRecordMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    policyId?: SortOrder
    createdAt?: SortOrder
  }

  export type ScoreRecordSumOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
  }

  export type PlatformCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlatformAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlatformMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type PlatformSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThemeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ThemeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ThemeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ThemeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlatformScalarRelationFilter = {
    is?: PlatformWhereInput
    isNot?: PlatformWhereInput
  }

  export type PreferredPlatformCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
  }

  export type PreferredPlatformAvgOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
  }

  export type PreferredPlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
  }

  export type PreferredPlatformMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
  }

  export type PreferredPlatformSumOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
  }

  export type GenreScalarRelationFilter = {
    is?: GenreWhereInput
    isNot?: GenreWhereInput
  }

  export type PreferredGenreCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    genreId?: SortOrder
  }

  export type PreferredGenreAvgOrderByAggregateInput = {
    id?: SortOrder
    genreId?: SortOrder
  }

  export type PreferredGenreMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    genreId?: SortOrder
  }

  export type PreferredGenreMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    genreId?: SortOrder
  }

  export type PreferredGenreSumOrderByAggregateInput = {
    id?: SortOrder
    genreId?: SortOrder
  }

  export type ThemeScalarRelationFilter = {
    is?: ThemeWhereInput
    isNot?: ThemeWhereInput
  }

  export type PreferredThemeCountOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    themeId?: SortOrder
  }

  export type PreferredThemeAvgOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
  }

  export type PreferredThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    themeId?: SortOrder
  }

  export type PreferredThemeMinOrderByAggregateInput = {
    id?: SortOrder
    memberId?: SortOrder
    themeId?: SortOrder
  }

  export type PreferredThemeSumOrderByAggregateInput = {
    id?: SortOrder
    themeId?: SortOrder
  }

  export type GamePlatformCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
  }

  export type GamePlatformAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
  }

  export type GamePlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
  }

  export type GamePlatformMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
  }

  export type GamePlatformSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    platformId?: SortOrder
  }

  export type GameGenreCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
  }

  export type GameGenreAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
  }

  export type GameGenreMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
  }

  export type GameGenreMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
  }

  export type GameGenreSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    genreId?: SortOrder
  }

  export type GameThemeCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
  }

  export type GameThemeAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
  }

  export type GameThemeMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
  }

  export type GameThemeMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
  }

  export type GameThemeSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    themeId?: SortOrder
  }

  export type ArenaCreateNestedManyWithoutChallengerInput = {
    create?: XOR<ArenaCreateWithoutChallengerInput, ArenaUncheckedCreateWithoutChallengerInput> | ArenaCreateWithoutChallengerInput[] | ArenaUncheckedCreateWithoutChallengerInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutChallengerInput | ArenaCreateOrConnectWithoutChallengerInput[]
    createMany?: ArenaCreateManyChallengerInputEnvelope
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
  }

  export type ArenaCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ArenaCreateWithoutCreatorInput, ArenaUncheckedCreateWithoutCreatorInput> | ArenaCreateWithoutCreatorInput[] | ArenaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutCreatorInput | ArenaCreateOrConnectWithoutCreatorInput[]
    createMany?: ArenaCreateManyCreatorInputEnvelope
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
  }

  export type ChattingCreateNestedManyWithoutMemberInput = {
    create?: XOR<ChattingCreateWithoutMemberInput, ChattingUncheckedCreateWithoutMemberInput> | ChattingCreateWithoutMemberInput[] | ChattingUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutMemberInput | ChattingCreateOrConnectWithoutMemberInput[]
    createMany?: ChattingCreateManyMemberInputEnvelope
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
  }

  export type NotificationRecordCreateNestedManyWithoutMemberInput = {
    create?: XOR<NotificationRecordCreateWithoutMemberInput, NotificationRecordUncheckedCreateWithoutMemberInput> | NotificationRecordCreateWithoutMemberInput[] | NotificationRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutMemberInput | NotificationRecordCreateOrConnectWithoutMemberInput[]
    createMany?: NotificationRecordCreateManyMemberInputEnvelope
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
  }

  export type PreferredGenreCreateNestedManyWithoutMemberInput = {
    create?: XOR<PreferredGenreCreateWithoutMemberInput, PreferredGenreUncheckedCreateWithoutMemberInput> | PreferredGenreCreateWithoutMemberInput[] | PreferredGenreUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutMemberInput | PreferredGenreCreateOrConnectWithoutMemberInput[]
    createMany?: PreferredGenreCreateManyMemberInputEnvelope
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
  }

  export type PreferredPlatformCreateNestedManyWithoutMemberInput = {
    create?: XOR<PreferredPlatformCreateWithoutMemberInput, PreferredPlatformUncheckedCreateWithoutMemberInput> | PreferredPlatformCreateWithoutMemberInput[] | PreferredPlatformUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutMemberInput | PreferredPlatformCreateOrConnectWithoutMemberInput[]
    createMany?: PreferredPlatformCreateManyMemberInputEnvelope
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
  }

  export type PreferredThemeCreateNestedManyWithoutMemberInput = {
    create?: XOR<PreferredThemeCreateWithoutMemberInput, PreferredThemeUncheckedCreateWithoutMemberInput> | PreferredThemeCreateWithoutMemberInput[] | PreferredThemeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutMemberInput | PreferredThemeCreateOrConnectWithoutMemberInput[]
    createMany?: PreferredThemeCreateManyMemberInputEnvelope
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
  }

  export type ReviewLikeCreateNestedManyWithoutMemberInput = {
    create?: XOR<ReviewLikeCreateWithoutMemberInput, ReviewLikeUncheckedCreateWithoutMemberInput> | ReviewLikeCreateWithoutMemberInput[] | ReviewLikeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutMemberInput | ReviewLikeCreateOrConnectWithoutMemberInput[]
    createMany?: ReviewLikeCreateManyMemberInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutMemberInput = {
    create?: XOR<ReviewCreateWithoutMemberInput, ReviewUncheckedCreateWithoutMemberInput> | ReviewCreateWithoutMemberInput[] | ReviewUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutMemberInput | ReviewCreateOrConnectWithoutMemberInput[]
    createMany?: ReviewCreateManyMemberInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ScoreRecordCreateNestedManyWithoutMemberInput = {
    create?: XOR<ScoreRecordCreateWithoutMemberInput, ScoreRecordUncheckedCreateWithoutMemberInput> | ScoreRecordCreateWithoutMemberInput[] | ScoreRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutMemberInput | ScoreRecordCreateOrConnectWithoutMemberInput[]
    createMany?: ScoreRecordCreateManyMemberInputEnvelope
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
  }

  export type VoteCreateNestedManyWithoutMemberInput = {
    create?: XOR<VoteCreateWithoutMemberInput, VoteUncheckedCreateWithoutMemberInput> | VoteCreateWithoutMemberInput[] | VoteUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutMemberInput | VoteCreateOrConnectWithoutMemberInput[]
    createMany?: VoteCreateManyMemberInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type WishlistCreateNestedManyWithoutMemberInput = {
    create?: XOR<WishlistCreateWithoutMemberInput, WishlistUncheckedCreateWithoutMemberInput> | WishlistCreateWithoutMemberInput[] | WishlistUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutMemberInput | WishlistCreateOrConnectWithoutMemberInput[]
    createMany?: WishlistCreateManyMemberInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type ArenaUncheckedCreateNestedManyWithoutChallengerInput = {
    create?: XOR<ArenaCreateWithoutChallengerInput, ArenaUncheckedCreateWithoutChallengerInput> | ArenaCreateWithoutChallengerInput[] | ArenaUncheckedCreateWithoutChallengerInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutChallengerInput | ArenaCreateOrConnectWithoutChallengerInput[]
    createMany?: ArenaCreateManyChallengerInputEnvelope
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
  }

  export type ArenaUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ArenaCreateWithoutCreatorInput, ArenaUncheckedCreateWithoutCreatorInput> | ArenaCreateWithoutCreatorInput[] | ArenaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutCreatorInput | ArenaCreateOrConnectWithoutCreatorInput[]
    createMany?: ArenaCreateManyCreatorInputEnvelope
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
  }

  export type ChattingUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ChattingCreateWithoutMemberInput, ChattingUncheckedCreateWithoutMemberInput> | ChattingCreateWithoutMemberInput[] | ChattingUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutMemberInput | ChattingCreateOrConnectWithoutMemberInput[]
    createMany?: ChattingCreateManyMemberInputEnvelope
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
  }

  export type NotificationRecordUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<NotificationRecordCreateWithoutMemberInput, NotificationRecordUncheckedCreateWithoutMemberInput> | NotificationRecordCreateWithoutMemberInput[] | NotificationRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutMemberInput | NotificationRecordCreateOrConnectWithoutMemberInput[]
    createMany?: NotificationRecordCreateManyMemberInputEnvelope
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
  }

  export type PreferredGenreUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<PreferredGenreCreateWithoutMemberInput, PreferredGenreUncheckedCreateWithoutMemberInput> | PreferredGenreCreateWithoutMemberInput[] | PreferredGenreUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutMemberInput | PreferredGenreCreateOrConnectWithoutMemberInput[]
    createMany?: PreferredGenreCreateManyMemberInputEnvelope
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
  }

  export type PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<PreferredPlatformCreateWithoutMemberInput, PreferredPlatformUncheckedCreateWithoutMemberInput> | PreferredPlatformCreateWithoutMemberInput[] | PreferredPlatformUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutMemberInput | PreferredPlatformCreateOrConnectWithoutMemberInput[]
    createMany?: PreferredPlatformCreateManyMemberInputEnvelope
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
  }

  export type PreferredThemeUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<PreferredThemeCreateWithoutMemberInput, PreferredThemeUncheckedCreateWithoutMemberInput> | PreferredThemeCreateWithoutMemberInput[] | PreferredThemeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutMemberInput | PreferredThemeCreateOrConnectWithoutMemberInput[]
    createMany?: PreferredThemeCreateManyMemberInputEnvelope
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
  }

  export type ReviewLikeUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ReviewLikeCreateWithoutMemberInput, ReviewLikeUncheckedCreateWithoutMemberInput> | ReviewLikeCreateWithoutMemberInput[] | ReviewLikeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutMemberInput | ReviewLikeCreateOrConnectWithoutMemberInput[]
    createMany?: ReviewLikeCreateManyMemberInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ReviewCreateWithoutMemberInput, ReviewUncheckedCreateWithoutMemberInput> | ReviewCreateWithoutMemberInput[] | ReviewUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutMemberInput | ReviewCreateOrConnectWithoutMemberInput[]
    createMany?: ReviewCreateManyMemberInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ScoreRecordUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ScoreRecordCreateWithoutMemberInput, ScoreRecordUncheckedCreateWithoutMemberInput> | ScoreRecordCreateWithoutMemberInput[] | ScoreRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutMemberInput | ScoreRecordCreateOrConnectWithoutMemberInput[]
    createMany?: ScoreRecordCreateManyMemberInputEnvelope
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<VoteCreateWithoutMemberInput, VoteUncheckedCreateWithoutMemberInput> | VoteCreateWithoutMemberInput[] | VoteUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutMemberInput | VoteCreateOrConnectWithoutMemberInput[]
    createMany?: VoteCreateManyMemberInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type WishlistUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<WishlistCreateWithoutMemberInput, WishlistUncheckedCreateWithoutMemberInput> | WishlistCreateWithoutMemberInput[] | WishlistUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutMemberInput | WishlistCreateOrConnectWithoutMemberInput[]
    createMany?: WishlistCreateManyMemberInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ArenaUpdateManyWithoutChallengerNestedInput = {
    create?: XOR<ArenaCreateWithoutChallengerInput, ArenaUncheckedCreateWithoutChallengerInput> | ArenaCreateWithoutChallengerInput[] | ArenaUncheckedCreateWithoutChallengerInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutChallengerInput | ArenaCreateOrConnectWithoutChallengerInput[]
    upsert?: ArenaUpsertWithWhereUniqueWithoutChallengerInput | ArenaUpsertWithWhereUniqueWithoutChallengerInput[]
    createMany?: ArenaCreateManyChallengerInputEnvelope
    set?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    disconnect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    delete?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    update?: ArenaUpdateWithWhereUniqueWithoutChallengerInput | ArenaUpdateWithWhereUniqueWithoutChallengerInput[]
    updateMany?: ArenaUpdateManyWithWhereWithoutChallengerInput | ArenaUpdateManyWithWhereWithoutChallengerInput[]
    deleteMany?: ArenaScalarWhereInput | ArenaScalarWhereInput[]
  }

  export type ArenaUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ArenaCreateWithoutCreatorInput, ArenaUncheckedCreateWithoutCreatorInput> | ArenaCreateWithoutCreatorInput[] | ArenaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutCreatorInput | ArenaCreateOrConnectWithoutCreatorInput[]
    upsert?: ArenaUpsertWithWhereUniqueWithoutCreatorInput | ArenaUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ArenaCreateManyCreatorInputEnvelope
    set?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    disconnect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    delete?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    update?: ArenaUpdateWithWhereUniqueWithoutCreatorInput | ArenaUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ArenaUpdateManyWithWhereWithoutCreatorInput | ArenaUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ArenaScalarWhereInput | ArenaScalarWhereInput[]
  }

  export type ChattingUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ChattingCreateWithoutMemberInput, ChattingUncheckedCreateWithoutMemberInput> | ChattingCreateWithoutMemberInput[] | ChattingUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutMemberInput | ChattingCreateOrConnectWithoutMemberInput[]
    upsert?: ChattingUpsertWithWhereUniqueWithoutMemberInput | ChattingUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ChattingCreateManyMemberInputEnvelope
    set?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    disconnect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    delete?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    update?: ChattingUpdateWithWhereUniqueWithoutMemberInput | ChattingUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ChattingUpdateManyWithWhereWithoutMemberInput | ChattingUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ChattingScalarWhereInput | ChattingScalarWhereInput[]
  }

  export type NotificationRecordUpdateManyWithoutMemberNestedInput = {
    create?: XOR<NotificationRecordCreateWithoutMemberInput, NotificationRecordUncheckedCreateWithoutMemberInput> | NotificationRecordCreateWithoutMemberInput[] | NotificationRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutMemberInput | NotificationRecordCreateOrConnectWithoutMemberInput[]
    upsert?: NotificationRecordUpsertWithWhereUniqueWithoutMemberInput | NotificationRecordUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: NotificationRecordCreateManyMemberInputEnvelope
    set?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    disconnect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    delete?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    update?: NotificationRecordUpdateWithWhereUniqueWithoutMemberInput | NotificationRecordUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: NotificationRecordUpdateManyWithWhereWithoutMemberInput | NotificationRecordUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: NotificationRecordScalarWhereInput | NotificationRecordScalarWhereInput[]
  }

  export type PreferredGenreUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PreferredGenreCreateWithoutMemberInput, PreferredGenreUncheckedCreateWithoutMemberInput> | PreferredGenreCreateWithoutMemberInput[] | PreferredGenreUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutMemberInput | PreferredGenreCreateOrConnectWithoutMemberInput[]
    upsert?: PreferredGenreUpsertWithWhereUniqueWithoutMemberInput | PreferredGenreUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PreferredGenreCreateManyMemberInputEnvelope
    set?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    disconnect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    delete?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    update?: PreferredGenreUpdateWithWhereUniqueWithoutMemberInput | PreferredGenreUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PreferredGenreUpdateManyWithWhereWithoutMemberInput | PreferredGenreUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PreferredGenreScalarWhereInput | PreferredGenreScalarWhereInput[]
  }

  export type PreferredPlatformUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PreferredPlatformCreateWithoutMemberInput, PreferredPlatformUncheckedCreateWithoutMemberInput> | PreferredPlatformCreateWithoutMemberInput[] | PreferredPlatformUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutMemberInput | PreferredPlatformCreateOrConnectWithoutMemberInput[]
    upsert?: PreferredPlatformUpsertWithWhereUniqueWithoutMemberInput | PreferredPlatformUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PreferredPlatformCreateManyMemberInputEnvelope
    set?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    disconnect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    delete?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    update?: PreferredPlatformUpdateWithWhereUniqueWithoutMemberInput | PreferredPlatformUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PreferredPlatformUpdateManyWithWhereWithoutMemberInput | PreferredPlatformUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PreferredPlatformScalarWhereInput | PreferredPlatformScalarWhereInput[]
  }

  export type PreferredThemeUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PreferredThemeCreateWithoutMemberInput, PreferredThemeUncheckedCreateWithoutMemberInput> | PreferredThemeCreateWithoutMemberInput[] | PreferredThemeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutMemberInput | PreferredThemeCreateOrConnectWithoutMemberInput[]
    upsert?: PreferredThemeUpsertWithWhereUniqueWithoutMemberInput | PreferredThemeUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PreferredThemeCreateManyMemberInputEnvelope
    set?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    disconnect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    delete?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    update?: PreferredThemeUpdateWithWhereUniqueWithoutMemberInput | PreferredThemeUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PreferredThemeUpdateManyWithWhereWithoutMemberInput | PreferredThemeUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PreferredThemeScalarWhereInput | PreferredThemeScalarWhereInput[]
  }

  export type ReviewLikeUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutMemberInput, ReviewLikeUncheckedCreateWithoutMemberInput> | ReviewLikeCreateWithoutMemberInput[] | ReviewLikeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutMemberInput | ReviewLikeCreateOrConnectWithoutMemberInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutMemberInput | ReviewLikeUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ReviewLikeCreateManyMemberInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutMemberInput | ReviewLikeUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutMemberInput | ReviewLikeUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ReviewCreateWithoutMemberInput, ReviewUncheckedCreateWithoutMemberInput> | ReviewCreateWithoutMemberInput[] | ReviewUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutMemberInput | ReviewCreateOrConnectWithoutMemberInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutMemberInput | ReviewUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ReviewCreateManyMemberInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutMemberInput | ReviewUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutMemberInput | ReviewUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ScoreRecordUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ScoreRecordCreateWithoutMemberInput, ScoreRecordUncheckedCreateWithoutMemberInput> | ScoreRecordCreateWithoutMemberInput[] | ScoreRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutMemberInput | ScoreRecordCreateOrConnectWithoutMemberInput[]
    upsert?: ScoreRecordUpsertWithWhereUniqueWithoutMemberInput | ScoreRecordUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ScoreRecordCreateManyMemberInputEnvelope
    set?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    disconnect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    delete?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    update?: ScoreRecordUpdateWithWhereUniqueWithoutMemberInput | ScoreRecordUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ScoreRecordUpdateManyWithWhereWithoutMemberInput | ScoreRecordUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ScoreRecordScalarWhereInput | ScoreRecordScalarWhereInput[]
  }

  export type VoteUpdateManyWithoutMemberNestedInput = {
    create?: XOR<VoteCreateWithoutMemberInput, VoteUncheckedCreateWithoutMemberInput> | VoteCreateWithoutMemberInput[] | VoteUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutMemberInput | VoteCreateOrConnectWithoutMemberInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutMemberInput | VoteUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: VoteCreateManyMemberInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutMemberInput | VoteUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutMemberInput | VoteUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type WishlistUpdateManyWithoutMemberNestedInput = {
    create?: XOR<WishlistCreateWithoutMemberInput, WishlistUncheckedCreateWithoutMemberInput> | WishlistCreateWithoutMemberInput[] | WishlistUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutMemberInput | WishlistCreateOrConnectWithoutMemberInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutMemberInput | WishlistUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: WishlistCreateManyMemberInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutMemberInput | WishlistUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutMemberInput | WishlistUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type ArenaUncheckedUpdateManyWithoutChallengerNestedInput = {
    create?: XOR<ArenaCreateWithoutChallengerInput, ArenaUncheckedCreateWithoutChallengerInput> | ArenaCreateWithoutChallengerInput[] | ArenaUncheckedCreateWithoutChallengerInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutChallengerInput | ArenaCreateOrConnectWithoutChallengerInput[]
    upsert?: ArenaUpsertWithWhereUniqueWithoutChallengerInput | ArenaUpsertWithWhereUniqueWithoutChallengerInput[]
    createMany?: ArenaCreateManyChallengerInputEnvelope
    set?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    disconnect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    delete?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    update?: ArenaUpdateWithWhereUniqueWithoutChallengerInput | ArenaUpdateWithWhereUniqueWithoutChallengerInput[]
    updateMany?: ArenaUpdateManyWithWhereWithoutChallengerInput | ArenaUpdateManyWithWhereWithoutChallengerInput[]
    deleteMany?: ArenaScalarWhereInput | ArenaScalarWhereInput[]
  }

  export type ArenaUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ArenaCreateWithoutCreatorInput, ArenaUncheckedCreateWithoutCreatorInput> | ArenaCreateWithoutCreatorInput[] | ArenaUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ArenaCreateOrConnectWithoutCreatorInput | ArenaCreateOrConnectWithoutCreatorInput[]
    upsert?: ArenaUpsertWithWhereUniqueWithoutCreatorInput | ArenaUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ArenaCreateManyCreatorInputEnvelope
    set?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    disconnect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    delete?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    connect?: ArenaWhereUniqueInput | ArenaWhereUniqueInput[]
    update?: ArenaUpdateWithWhereUniqueWithoutCreatorInput | ArenaUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ArenaUpdateManyWithWhereWithoutCreatorInput | ArenaUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ArenaScalarWhereInput | ArenaScalarWhereInput[]
  }

  export type ChattingUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ChattingCreateWithoutMemberInput, ChattingUncheckedCreateWithoutMemberInput> | ChattingCreateWithoutMemberInput[] | ChattingUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutMemberInput | ChattingCreateOrConnectWithoutMemberInput[]
    upsert?: ChattingUpsertWithWhereUniqueWithoutMemberInput | ChattingUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ChattingCreateManyMemberInputEnvelope
    set?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    disconnect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    delete?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    update?: ChattingUpdateWithWhereUniqueWithoutMemberInput | ChattingUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ChattingUpdateManyWithWhereWithoutMemberInput | ChattingUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ChattingScalarWhereInput | ChattingScalarWhereInput[]
  }

  export type NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<NotificationRecordCreateWithoutMemberInput, NotificationRecordUncheckedCreateWithoutMemberInput> | NotificationRecordCreateWithoutMemberInput[] | NotificationRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutMemberInput | NotificationRecordCreateOrConnectWithoutMemberInput[]
    upsert?: NotificationRecordUpsertWithWhereUniqueWithoutMemberInput | NotificationRecordUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: NotificationRecordCreateManyMemberInputEnvelope
    set?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    disconnect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    delete?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    update?: NotificationRecordUpdateWithWhereUniqueWithoutMemberInput | NotificationRecordUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: NotificationRecordUpdateManyWithWhereWithoutMemberInput | NotificationRecordUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: NotificationRecordScalarWhereInput | NotificationRecordScalarWhereInput[]
  }

  export type PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PreferredGenreCreateWithoutMemberInput, PreferredGenreUncheckedCreateWithoutMemberInput> | PreferredGenreCreateWithoutMemberInput[] | PreferredGenreUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutMemberInput | PreferredGenreCreateOrConnectWithoutMemberInput[]
    upsert?: PreferredGenreUpsertWithWhereUniqueWithoutMemberInput | PreferredGenreUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PreferredGenreCreateManyMemberInputEnvelope
    set?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    disconnect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    delete?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    update?: PreferredGenreUpdateWithWhereUniqueWithoutMemberInput | PreferredGenreUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PreferredGenreUpdateManyWithWhereWithoutMemberInput | PreferredGenreUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PreferredGenreScalarWhereInput | PreferredGenreScalarWhereInput[]
  }

  export type PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PreferredPlatformCreateWithoutMemberInput, PreferredPlatformUncheckedCreateWithoutMemberInput> | PreferredPlatformCreateWithoutMemberInput[] | PreferredPlatformUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutMemberInput | PreferredPlatformCreateOrConnectWithoutMemberInput[]
    upsert?: PreferredPlatformUpsertWithWhereUniqueWithoutMemberInput | PreferredPlatformUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PreferredPlatformCreateManyMemberInputEnvelope
    set?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    disconnect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    delete?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    update?: PreferredPlatformUpdateWithWhereUniqueWithoutMemberInput | PreferredPlatformUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PreferredPlatformUpdateManyWithWhereWithoutMemberInput | PreferredPlatformUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PreferredPlatformScalarWhereInput | PreferredPlatformScalarWhereInput[]
  }

  export type PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<PreferredThemeCreateWithoutMemberInput, PreferredThemeUncheckedCreateWithoutMemberInput> | PreferredThemeCreateWithoutMemberInput[] | PreferredThemeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutMemberInput | PreferredThemeCreateOrConnectWithoutMemberInput[]
    upsert?: PreferredThemeUpsertWithWhereUniqueWithoutMemberInput | PreferredThemeUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: PreferredThemeCreateManyMemberInputEnvelope
    set?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    disconnect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    delete?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    update?: PreferredThemeUpdateWithWhereUniqueWithoutMemberInput | PreferredThemeUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: PreferredThemeUpdateManyWithWhereWithoutMemberInput | PreferredThemeUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: PreferredThemeScalarWhereInput | PreferredThemeScalarWhereInput[]
  }

  export type ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutMemberInput, ReviewLikeUncheckedCreateWithoutMemberInput> | ReviewLikeCreateWithoutMemberInput[] | ReviewLikeUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutMemberInput | ReviewLikeCreateOrConnectWithoutMemberInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutMemberInput | ReviewLikeUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ReviewLikeCreateManyMemberInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutMemberInput | ReviewLikeUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutMemberInput | ReviewLikeUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ReviewCreateWithoutMemberInput, ReviewUncheckedCreateWithoutMemberInput> | ReviewCreateWithoutMemberInput[] | ReviewUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutMemberInput | ReviewCreateOrConnectWithoutMemberInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutMemberInput | ReviewUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ReviewCreateManyMemberInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutMemberInput | ReviewUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutMemberInput | ReviewUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ScoreRecordCreateWithoutMemberInput, ScoreRecordUncheckedCreateWithoutMemberInput> | ScoreRecordCreateWithoutMemberInput[] | ScoreRecordUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutMemberInput | ScoreRecordCreateOrConnectWithoutMemberInput[]
    upsert?: ScoreRecordUpsertWithWhereUniqueWithoutMemberInput | ScoreRecordUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ScoreRecordCreateManyMemberInputEnvelope
    set?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    disconnect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    delete?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    update?: ScoreRecordUpdateWithWhereUniqueWithoutMemberInput | ScoreRecordUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ScoreRecordUpdateManyWithWhereWithoutMemberInput | ScoreRecordUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ScoreRecordScalarWhereInput | ScoreRecordScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<VoteCreateWithoutMemberInput, VoteUncheckedCreateWithoutMemberInput> | VoteCreateWithoutMemberInput[] | VoteUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutMemberInput | VoteCreateOrConnectWithoutMemberInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutMemberInput | VoteUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: VoteCreateManyMemberInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutMemberInput | VoteUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutMemberInput | VoteUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type WishlistUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<WishlistCreateWithoutMemberInput, WishlistUncheckedCreateWithoutMemberInput> | WishlistCreateWithoutMemberInput[] | WishlistUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutMemberInput | WishlistCreateOrConnectWithoutMemberInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutMemberInput | WishlistUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: WishlistCreateManyMemberInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutMemberInput | WishlistUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutMemberInput | WishlistUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type GameGenreCreateNestedManyWithoutGameInput = {
    create?: XOR<GameGenreCreateWithoutGameInput, GameGenreUncheckedCreateWithoutGameInput> | GameGenreCreateWithoutGameInput[] | GameGenreUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGameInput | GameGenreCreateOrConnectWithoutGameInput[]
    createMany?: GameGenreCreateManyGameInputEnvelope
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
  }

  export type GamePlatformCreateNestedManyWithoutGameInput = {
    create?: XOR<GamePlatformCreateWithoutGameInput, GamePlatformUncheckedCreateWithoutGameInput> | GamePlatformCreateWithoutGameInput[] | GamePlatformUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutGameInput | GamePlatformCreateOrConnectWithoutGameInput[]
    createMany?: GamePlatformCreateManyGameInputEnvelope
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
  }

  export type GameThemeCreateNestedManyWithoutGameInput = {
    create?: XOR<GameThemeCreateWithoutGameInput, GameThemeUncheckedCreateWithoutGameInput> | GameThemeCreateWithoutGameInput[] | GameThemeUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutGameInput | GameThemeCreateOrConnectWithoutGameInput[]
    createMany?: GameThemeCreateManyGameInputEnvelope
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutGameInput = {
    create?: XOR<ReviewCreateWithoutGameInput, ReviewUncheckedCreateWithoutGameInput> | ReviewCreateWithoutGameInput[] | ReviewUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGameInput | ReviewCreateOrConnectWithoutGameInput[]
    createMany?: ReviewCreateManyGameInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type WishlistCreateNestedManyWithoutGameInput = {
    create?: XOR<WishlistCreateWithoutGameInput, WishlistUncheckedCreateWithoutGameInput> | WishlistCreateWithoutGameInput[] | WishlistUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutGameInput | WishlistCreateOrConnectWithoutGameInput[]
    createMany?: WishlistCreateManyGameInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type GameGenreUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameGenreCreateWithoutGameInput, GameGenreUncheckedCreateWithoutGameInput> | GameGenreCreateWithoutGameInput[] | GameGenreUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGameInput | GameGenreCreateOrConnectWithoutGameInput[]
    createMany?: GameGenreCreateManyGameInputEnvelope
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
  }

  export type GamePlatformUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GamePlatformCreateWithoutGameInput, GamePlatformUncheckedCreateWithoutGameInput> | GamePlatformCreateWithoutGameInput[] | GamePlatformUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutGameInput | GamePlatformCreateOrConnectWithoutGameInput[]
    createMany?: GamePlatformCreateManyGameInputEnvelope
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
  }

  export type GameThemeUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<GameThemeCreateWithoutGameInput, GameThemeUncheckedCreateWithoutGameInput> | GameThemeCreateWithoutGameInput[] | GameThemeUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutGameInput | GameThemeCreateOrConnectWithoutGameInput[]
    createMany?: GameThemeCreateManyGameInputEnvelope
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<ReviewCreateWithoutGameInput, ReviewUncheckedCreateWithoutGameInput> | ReviewCreateWithoutGameInput[] | ReviewUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGameInput | ReviewCreateOrConnectWithoutGameInput[]
    createMany?: ReviewCreateManyGameInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type WishlistUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<WishlistCreateWithoutGameInput, WishlistUncheckedCreateWithoutGameInput> | WishlistCreateWithoutGameInput[] | WishlistUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutGameInput | WishlistCreateOrConnectWithoutGameInput[]
    createMany?: WishlistCreateManyGameInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type GameGenreUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameGenreCreateWithoutGameInput, GameGenreUncheckedCreateWithoutGameInput> | GameGenreCreateWithoutGameInput[] | GameGenreUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGameInput | GameGenreCreateOrConnectWithoutGameInput[]
    upsert?: GameGenreUpsertWithWhereUniqueWithoutGameInput | GameGenreUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameGenreCreateManyGameInputEnvelope
    set?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    disconnect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    delete?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    update?: GameGenreUpdateWithWhereUniqueWithoutGameInput | GameGenreUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameGenreUpdateManyWithWhereWithoutGameInput | GameGenreUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameGenreScalarWhereInput | GameGenreScalarWhereInput[]
  }

  export type GamePlatformUpdateManyWithoutGameNestedInput = {
    create?: XOR<GamePlatformCreateWithoutGameInput, GamePlatformUncheckedCreateWithoutGameInput> | GamePlatformCreateWithoutGameInput[] | GamePlatformUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutGameInput | GamePlatformCreateOrConnectWithoutGameInput[]
    upsert?: GamePlatformUpsertWithWhereUniqueWithoutGameInput | GamePlatformUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GamePlatformCreateManyGameInputEnvelope
    set?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    disconnect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    delete?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    update?: GamePlatformUpdateWithWhereUniqueWithoutGameInput | GamePlatformUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GamePlatformUpdateManyWithWhereWithoutGameInput | GamePlatformUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GamePlatformScalarWhereInput | GamePlatformScalarWhereInput[]
  }

  export type GameThemeUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameThemeCreateWithoutGameInput, GameThemeUncheckedCreateWithoutGameInput> | GameThemeCreateWithoutGameInput[] | GameThemeUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutGameInput | GameThemeCreateOrConnectWithoutGameInput[]
    upsert?: GameThemeUpsertWithWhereUniqueWithoutGameInput | GameThemeUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameThemeCreateManyGameInputEnvelope
    set?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    disconnect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    delete?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    update?: GameThemeUpdateWithWhereUniqueWithoutGameInput | GameThemeUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameThemeUpdateManyWithWhereWithoutGameInput | GameThemeUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameThemeScalarWhereInput | GameThemeScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutGameNestedInput = {
    create?: XOR<ReviewCreateWithoutGameInput, ReviewUncheckedCreateWithoutGameInput> | ReviewCreateWithoutGameInput[] | ReviewUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGameInput | ReviewCreateOrConnectWithoutGameInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutGameInput | ReviewUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: ReviewCreateManyGameInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutGameInput | ReviewUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutGameInput | ReviewUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type WishlistUpdateManyWithoutGameNestedInput = {
    create?: XOR<WishlistCreateWithoutGameInput, WishlistUncheckedCreateWithoutGameInput> | WishlistCreateWithoutGameInput[] | WishlistUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutGameInput | WishlistCreateOrConnectWithoutGameInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutGameInput | WishlistUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: WishlistCreateManyGameInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutGameInput | WishlistUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutGameInput | WishlistUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type GameGenreUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameGenreCreateWithoutGameInput, GameGenreUncheckedCreateWithoutGameInput> | GameGenreCreateWithoutGameInput[] | GameGenreUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGameInput | GameGenreCreateOrConnectWithoutGameInput[]
    upsert?: GameGenreUpsertWithWhereUniqueWithoutGameInput | GameGenreUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameGenreCreateManyGameInputEnvelope
    set?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    disconnect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    delete?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    update?: GameGenreUpdateWithWhereUniqueWithoutGameInput | GameGenreUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameGenreUpdateManyWithWhereWithoutGameInput | GameGenreUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameGenreScalarWhereInput | GameGenreScalarWhereInput[]
  }

  export type GamePlatformUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GamePlatformCreateWithoutGameInput, GamePlatformUncheckedCreateWithoutGameInput> | GamePlatformCreateWithoutGameInput[] | GamePlatformUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutGameInput | GamePlatformCreateOrConnectWithoutGameInput[]
    upsert?: GamePlatformUpsertWithWhereUniqueWithoutGameInput | GamePlatformUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GamePlatformCreateManyGameInputEnvelope
    set?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    disconnect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    delete?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    update?: GamePlatformUpdateWithWhereUniqueWithoutGameInput | GamePlatformUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GamePlatformUpdateManyWithWhereWithoutGameInput | GamePlatformUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GamePlatformScalarWhereInput | GamePlatformScalarWhereInput[]
  }

  export type GameThemeUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<GameThemeCreateWithoutGameInput, GameThemeUncheckedCreateWithoutGameInput> | GameThemeCreateWithoutGameInput[] | GameThemeUncheckedCreateWithoutGameInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutGameInput | GameThemeCreateOrConnectWithoutGameInput[]
    upsert?: GameThemeUpsertWithWhereUniqueWithoutGameInput | GameThemeUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: GameThemeCreateManyGameInputEnvelope
    set?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    disconnect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    delete?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    update?: GameThemeUpdateWithWhereUniqueWithoutGameInput | GameThemeUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: GameThemeUpdateManyWithWhereWithoutGameInput | GameThemeUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: GameThemeScalarWhereInput | GameThemeScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<ReviewCreateWithoutGameInput, ReviewUncheckedCreateWithoutGameInput> | ReviewCreateWithoutGameInput[] | ReviewUncheckedCreateWithoutGameInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutGameInput | ReviewCreateOrConnectWithoutGameInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutGameInput | ReviewUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: ReviewCreateManyGameInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutGameInput | ReviewUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutGameInput | ReviewUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type WishlistUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<WishlistCreateWithoutGameInput, WishlistUncheckedCreateWithoutGameInput> | WishlistCreateWithoutGameInput[] | WishlistUncheckedCreateWithoutGameInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutGameInput | WishlistCreateOrConnectWithoutGameInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutGameInput | WishlistUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: WishlistCreateManyGameInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutGameInput | WishlistUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutGameInput | WishlistUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<GameCreateWithoutWishlistsInput, GameUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: GameCreateOrConnectWithoutWishlistsInput
    connect?: GameWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<MemberCreateWithoutWishlistsInput, MemberUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutWishlistsInput
    connect?: MemberWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<GameCreateWithoutWishlistsInput, GameUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: GameCreateOrConnectWithoutWishlistsInput
    upsert?: GameUpsertWithoutWishlistsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutWishlistsInput, GameUpdateWithoutWishlistsInput>, GameUncheckedUpdateWithoutWishlistsInput>
  }

  export type MemberUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<MemberCreateWithoutWishlistsInput, MemberUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutWishlistsInput
    upsert?: MemberUpsertWithoutWishlistsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutWishlistsInput, MemberUpdateWithoutWishlistsInput>, MemberUncheckedUpdateWithoutWishlistsInput>
  }

  export type ReviewLikeCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type GameCreateNestedOneWithoutReviewsInput = {
    create?: XOR<GameCreateWithoutReviewsInput, GameUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: GameCreateOrConnectWithoutReviewsInput
    connect?: GameWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutReviewsInput = {
    create?: XOR<MemberCreateWithoutReviewsInput, MemberUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutReviewsInput
    connect?: MemberWhereUniqueInput
  }

  export type ReviewLikeUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
  }

  export type ReviewLikeUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutReviewInput | ReviewLikeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutReviewInput | ReviewLikeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutReviewInput | ReviewLikeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type GameUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<GameCreateWithoutReviewsInput, GameUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: GameCreateOrConnectWithoutReviewsInput
    upsert?: GameUpsertWithoutReviewsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutReviewsInput, GameUpdateWithoutReviewsInput>, GameUncheckedUpdateWithoutReviewsInput>
  }

  export type MemberUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<MemberCreateWithoutReviewsInput, MemberUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutReviewsInput
    upsert?: MemberUpsertWithoutReviewsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutReviewsInput, MemberUpdateWithoutReviewsInput>, MemberUncheckedUpdateWithoutReviewsInput>
  }

  export type ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput> | ReviewLikeCreateWithoutReviewInput[] | ReviewLikeUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewLikeCreateOrConnectWithoutReviewInput | ReviewLikeCreateOrConnectWithoutReviewInput[]
    upsert?: ReviewLikeUpsertWithWhereUniqueWithoutReviewInput | ReviewLikeUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReviewLikeCreateManyReviewInputEnvelope
    set?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    disconnect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    delete?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    connect?: ReviewLikeWhereUniqueInput | ReviewLikeWhereUniqueInput[]
    update?: ReviewLikeUpdateWithWhereUniqueWithoutReviewInput | ReviewLikeUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReviewLikeUpdateManyWithWhereWithoutReviewInput | ReviewLikeUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutReviewLikesInput = {
    create?: XOR<MemberCreateWithoutReviewLikesInput, MemberUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutReviewLikesInput
    connect?: MemberWhereUniqueInput
  }

  export type ReviewCreateNestedOneWithoutReviewLikesInput = {
    create?: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewLikesInput
    connect?: ReviewWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutReviewLikesNestedInput = {
    create?: XOR<MemberCreateWithoutReviewLikesInput, MemberUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutReviewLikesInput
    upsert?: MemberUpsertWithoutReviewLikesInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutReviewLikesInput, MemberUpdateWithoutReviewLikesInput>, MemberUncheckedUpdateWithoutReviewLikesInput>
  }

  export type ReviewUpdateOneRequiredWithoutReviewLikesNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewLikesInput
    upsert?: ReviewUpsertWithoutReviewLikesInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewLikesInput, ReviewUpdateWithoutReviewLikesInput>, ReviewUncheckedUpdateWithoutReviewLikesInput>
  }

  export type MemberCreateNestedOneWithoutArenasAsChallengerInput = {
    create?: XOR<MemberCreateWithoutArenasAsChallengerInput, MemberUncheckedCreateWithoutArenasAsChallengerInput>
    connectOrCreate?: MemberCreateOrConnectWithoutArenasAsChallengerInput
    connect?: MemberWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutArenasAsCreatorInput = {
    create?: XOR<MemberCreateWithoutArenasAsCreatorInput, MemberUncheckedCreateWithoutArenasAsCreatorInput>
    connectOrCreate?: MemberCreateOrConnectWithoutArenasAsCreatorInput
    connect?: MemberWhereUniqueInput
  }

  export type ChattingCreateNestedManyWithoutArenaInput = {
    create?: XOR<ChattingCreateWithoutArenaInput, ChattingUncheckedCreateWithoutArenaInput> | ChattingCreateWithoutArenaInput[] | ChattingUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutArenaInput | ChattingCreateOrConnectWithoutArenaInput[]
    createMany?: ChattingCreateManyArenaInputEnvelope
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
  }

  export type VoteCreateNestedManyWithoutArenaInput = {
    create?: XOR<VoteCreateWithoutArenaInput, VoteUncheckedCreateWithoutArenaInput> | VoteCreateWithoutArenaInput[] | VoteUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutArenaInput | VoteCreateOrConnectWithoutArenaInput[]
    createMany?: VoteCreateManyArenaInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type ChattingUncheckedCreateNestedManyWithoutArenaInput = {
    create?: XOR<ChattingCreateWithoutArenaInput, ChattingUncheckedCreateWithoutArenaInput> | ChattingCreateWithoutArenaInput[] | ChattingUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutArenaInput | ChattingCreateOrConnectWithoutArenaInput[]
    createMany?: ChattingCreateManyArenaInputEnvelope
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutArenaInput = {
    create?: XOR<VoteCreateWithoutArenaInput, VoteUncheckedCreateWithoutArenaInput> | VoteCreateWithoutArenaInput[] | VoteUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutArenaInput | VoteCreateOrConnectWithoutArenaInput[]
    createMany?: VoteCreateManyArenaInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type MemberUpdateOneWithoutArenasAsChallengerNestedInput = {
    create?: XOR<MemberCreateWithoutArenasAsChallengerInput, MemberUncheckedCreateWithoutArenasAsChallengerInput>
    connectOrCreate?: MemberCreateOrConnectWithoutArenasAsChallengerInput
    upsert?: MemberUpsertWithoutArenasAsChallengerInput
    disconnect?: MemberWhereInput | boolean
    delete?: MemberWhereInput | boolean
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutArenasAsChallengerInput, MemberUpdateWithoutArenasAsChallengerInput>, MemberUncheckedUpdateWithoutArenasAsChallengerInput>
  }

  export type MemberUpdateOneRequiredWithoutArenasAsCreatorNestedInput = {
    create?: XOR<MemberCreateWithoutArenasAsCreatorInput, MemberUncheckedCreateWithoutArenasAsCreatorInput>
    connectOrCreate?: MemberCreateOrConnectWithoutArenasAsCreatorInput
    upsert?: MemberUpsertWithoutArenasAsCreatorInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutArenasAsCreatorInput, MemberUpdateWithoutArenasAsCreatorInput>, MemberUncheckedUpdateWithoutArenasAsCreatorInput>
  }

  export type ChattingUpdateManyWithoutArenaNestedInput = {
    create?: XOR<ChattingCreateWithoutArenaInput, ChattingUncheckedCreateWithoutArenaInput> | ChattingCreateWithoutArenaInput[] | ChattingUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutArenaInput | ChattingCreateOrConnectWithoutArenaInput[]
    upsert?: ChattingUpsertWithWhereUniqueWithoutArenaInput | ChattingUpsertWithWhereUniqueWithoutArenaInput[]
    createMany?: ChattingCreateManyArenaInputEnvelope
    set?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    disconnect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    delete?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    update?: ChattingUpdateWithWhereUniqueWithoutArenaInput | ChattingUpdateWithWhereUniqueWithoutArenaInput[]
    updateMany?: ChattingUpdateManyWithWhereWithoutArenaInput | ChattingUpdateManyWithWhereWithoutArenaInput[]
    deleteMany?: ChattingScalarWhereInput | ChattingScalarWhereInput[]
  }

  export type VoteUpdateManyWithoutArenaNestedInput = {
    create?: XOR<VoteCreateWithoutArenaInput, VoteUncheckedCreateWithoutArenaInput> | VoteCreateWithoutArenaInput[] | VoteUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutArenaInput | VoteCreateOrConnectWithoutArenaInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutArenaInput | VoteUpsertWithWhereUniqueWithoutArenaInput[]
    createMany?: VoteCreateManyArenaInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutArenaInput | VoteUpdateWithWhereUniqueWithoutArenaInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutArenaInput | VoteUpdateManyWithWhereWithoutArenaInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type ChattingUncheckedUpdateManyWithoutArenaNestedInput = {
    create?: XOR<ChattingCreateWithoutArenaInput, ChattingUncheckedCreateWithoutArenaInput> | ChattingCreateWithoutArenaInput[] | ChattingUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: ChattingCreateOrConnectWithoutArenaInput | ChattingCreateOrConnectWithoutArenaInput[]
    upsert?: ChattingUpsertWithWhereUniqueWithoutArenaInput | ChattingUpsertWithWhereUniqueWithoutArenaInput[]
    createMany?: ChattingCreateManyArenaInputEnvelope
    set?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    disconnect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    delete?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    connect?: ChattingWhereUniqueInput | ChattingWhereUniqueInput[]
    update?: ChattingUpdateWithWhereUniqueWithoutArenaInput | ChattingUpdateWithWhereUniqueWithoutArenaInput[]
    updateMany?: ChattingUpdateManyWithWhereWithoutArenaInput | ChattingUpdateManyWithWhereWithoutArenaInput[]
    deleteMany?: ChattingScalarWhereInput | ChattingScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutArenaNestedInput = {
    create?: XOR<VoteCreateWithoutArenaInput, VoteUncheckedCreateWithoutArenaInput> | VoteCreateWithoutArenaInput[] | VoteUncheckedCreateWithoutArenaInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutArenaInput | VoteCreateOrConnectWithoutArenaInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutArenaInput | VoteUpsertWithWhereUniqueWithoutArenaInput[]
    createMany?: VoteCreateManyArenaInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutArenaInput | VoteUpdateWithWhereUniqueWithoutArenaInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutArenaInput | VoteUpdateManyWithWhereWithoutArenaInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type ArenaCreateNestedOneWithoutChattingsInput = {
    create?: XOR<ArenaCreateWithoutChattingsInput, ArenaUncheckedCreateWithoutChattingsInput>
    connectOrCreate?: ArenaCreateOrConnectWithoutChattingsInput
    connect?: ArenaWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutChattingsInput = {
    create?: XOR<MemberCreateWithoutChattingsInput, MemberUncheckedCreateWithoutChattingsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutChattingsInput
    connect?: MemberWhereUniqueInput
  }

  export type ArenaUpdateOneRequiredWithoutChattingsNestedInput = {
    create?: XOR<ArenaCreateWithoutChattingsInput, ArenaUncheckedCreateWithoutChattingsInput>
    connectOrCreate?: ArenaCreateOrConnectWithoutChattingsInput
    upsert?: ArenaUpsertWithoutChattingsInput
    connect?: ArenaWhereUniqueInput
    update?: XOR<XOR<ArenaUpdateToOneWithWhereWithoutChattingsInput, ArenaUpdateWithoutChattingsInput>, ArenaUncheckedUpdateWithoutChattingsInput>
  }

  export type MemberUpdateOneRequiredWithoutChattingsNestedInput = {
    create?: XOR<MemberCreateWithoutChattingsInput, MemberUncheckedCreateWithoutChattingsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutChattingsInput
    upsert?: MemberUpsertWithoutChattingsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutChattingsInput, MemberUpdateWithoutChattingsInput>, MemberUncheckedUpdateWithoutChattingsInput>
  }

  export type ArenaCreateNestedOneWithoutVotesInput = {
    create?: XOR<ArenaCreateWithoutVotesInput, ArenaUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ArenaCreateOrConnectWithoutVotesInput
    connect?: ArenaWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutVotesInput = {
    create?: XOR<MemberCreateWithoutVotesInput, MemberUncheckedCreateWithoutVotesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutVotesInput
    connect?: MemberWhereUniqueInput
  }

  export type ArenaUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<ArenaCreateWithoutVotesInput, ArenaUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ArenaCreateOrConnectWithoutVotesInput
    upsert?: ArenaUpsertWithoutVotesInput
    connect?: ArenaWhereUniqueInput
    update?: XOR<XOR<ArenaUpdateToOneWithWhereWithoutVotesInput, ArenaUpdateWithoutVotesInput>, ArenaUncheckedUpdateWithoutVotesInput>
  }

  export type MemberUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<MemberCreateWithoutVotesInput, MemberUncheckedCreateWithoutVotesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutVotesInput
    upsert?: MemberUpsertWithoutVotesInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutVotesInput, MemberUpdateWithoutVotesInput>, MemberUncheckedUpdateWithoutVotesInput>
  }

  export type NotificationRecordCreateNestedManyWithoutTypeInput = {
    create?: XOR<NotificationRecordCreateWithoutTypeInput, NotificationRecordUncheckedCreateWithoutTypeInput> | NotificationRecordCreateWithoutTypeInput[] | NotificationRecordUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutTypeInput | NotificationRecordCreateOrConnectWithoutTypeInput[]
    createMany?: NotificationRecordCreateManyTypeInputEnvelope
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
  }

  export type NotificationRecordUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<NotificationRecordCreateWithoutTypeInput, NotificationRecordUncheckedCreateWithoutTypeInput> | NotificationRecordCreateWithoutTypeInput[] | NotificationRecordUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutTypeInput | NotificationRecordCreateOrConnectWithoutTypeInput[]
    createMany?: NotificationRecordCreateManyTypeInputEnvelope
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
  }

  export type NotificationRecordUpdateManyWithoutTypeNestedInput = {
    create?: XOR<NotificationRecordCreateWithoutTypeInput, NotificationRecordUncheckedCreateWithoutTypeInput> | NotificationRecordCreateWithoutTypeInput[] | NotificationRecordUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutTypeInput | NotificationRecordCreateOrConnectWithoutTypeInput[]
    upsert?: NotificationRecordUpsertWithWhereUniqueWithoutTypeInput | NotificationRecordUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: NotificationRecordCreateManyTypeInputEnvelope
    set?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    disconnect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    delete?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    update?: NotificationRecordUpdateWithWhereUniqueWithoutTypeInput | NotificationRecordUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: NotificationRecordUpdateManyWithWhereWithoutTypeInput | NotificationRecordUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: NotificationRecordScalarWhereInput | NotificationRecordScalarWhereInput[]
  }

  export type NotificationRecordUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<NotificationRecordCreateWithoutTypeInput, NotificationRecordUncheckedCreateWithoutTypeInput> | NotificationRecordCreateWithoutTypeInput[] | NotificationRecordUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: NotificationRecordCreateOrConnectWithoutTypeInput | NotificationRecordCreateOrConnectWithoutTypeInput[]
    upsert?: NotificationRecordUpsertWithWhereUniqueWithoutTypeInput | NotificationRecordUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: NotificationRecordCreateManyTypeInputEnvelope
    set?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    disconnect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    delete?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    connect?: NotificationRecordWhereUniqueInput | NotificationRecordWhereUniqueInput[]
    update?: NotificationRecordUpdateWithWhereUniqueWithoutTypeInput | NotificationRecordUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: NotificationRecordUpdateManyWithWhereWithoutTypeInput | NotificationRecordUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: NotificationRecordScalarWhereInput | NotificationRecordScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutNotificationRecordsInput = {
    create?: XOR<MemberCreateWithoutNotificationRecordsInput, MemberUncheckedCreateWithoutNotificationRecordsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutNotificationRecordsInput
    connect?: MemberWhereUniqueInput
  }

  export type NotificationTypeCreateNestedOneWithoutNotificationRecordsInput = {
    create?: XOR<NotificationTypeCreateWithoutNotificationRecordsInput, NotificationTypeUncheckedCreateWithoutNotificationRecordsInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutNotificationRecordsInput
    connect?: NotificationTypeWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutNotificationRecordsNestedInput = {
    create?: XOR<MemberCreateWithoutNotificationRecordsInput, MemberUncheckedCreateWithoutNotificationRecordsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutNotificationRecordsInput
    upsert?: MemberUpsertWithoutNotificationRecordsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutNotificationRecordsInput, MemberUpdateWithoutNotificationRecordsInput>, MemberUncheckedUpdateWithoutNotificationRecordsInput>
  }

  export type NotificationTypeUpdateOneRequiredWithoutNotificationRecordsNestedInput = {
    create?: XOR<NotificationTypeCreateWithoutNotificationRecordsInput, NotificationTypeUncheckedCreateWithoutNotificationRecordsInput>
    connectOrCreate?: NotificationTypeCreateOrConnectWithoutNotificationRecordsInput
    upsert?: NotificationTypeUpsertWithoutNotificationRecordsInput
    connect?: NotificationTypeWhereUniqueInput
    update?: XOR<XOR<NotificationTypeUpdateToOneWithWhereWithoutNotificationRecordsInput, NotificationTypeUpdateWithoutNotificationRecordsInput>, NotificationTypeUncheckedUpdateWithoutNotificationRecordsInput>
  }

  export type ScoreRecordCreateNestedManyWithoutPolicyInput = {
    create?: XOR<ScoreRecordCreateWithoutPolicyInput, ScoreRecordUncheckedCreateWithoutPolicyInput> | ScoreRecordCreateWithoutPolicyInput[] | ScoreRecordUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutPolicyInput | ScoreRecordCreateOrConnectWithoutPolicyInput[]
    createMany?: ScoreRecordCreateManyPolicyInputEnvelope
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
  }

  export type ScoreRecordUncheckedCreateNestedManyWithoutPolicyInput = {
    create?: XOR<ScoreRecordCreateWithoutPolicyInput, ScoreRecordUncheckedCreateWithoutPolicyInput> | ScoreRecordCreateWithoutPolicyInput[] | ScoreRecordUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutPolicyInput | ScoreRecordCreateOrConnectWithoutPolicyInput[]
    createMany?: ScoreRecordCreateManyPolicyInputEnvelope
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
  }

  export type ScoreRecordUpdateManyWithoutPolicyNestedInput = {
    create?: XOR<ScoreRecordCreateWithoutPolicyInput, ScoreRecordUncheckedCreateWithoutPolicyInput> | ScoreRecordCreateWithoutPolicyInput[] | ScoreRecordUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutPolicyInput | ScoreRecordCreateOrConnectWithoutPolicyInput[]
    upsert?: ScoreRecordUpsertWithWhereUniqueWithoutPolicyInput | ScoreRecordUpsertWithWhereUniqueWithoutPolicyInput[]
    createMany?: ScoreRecordCreateManyPolicyInputEnvelope
    set?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    disconnect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    delete?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    update?: ScoreRecordUpdateWithWhereUniqueWithoutPolicyInput | ScoreRecordUpdateWithWhereUniqueWithoutPolicyInput[]
    updateMany?: ScoreRecordUpdateManyWithWhereWithoutPolicyInput | ScoreRecordUpdateManyWithWhereWithoutPolicyInput[]
    deleteMany?: ScoreRecordScalarWhereInput | ScoreRecordScalarWhereInput[]
  }

  export type ScoreRecordUncheckedUpdateManyWithoutPolicyNestedInput = {
    create?: XOR<ScoreRecordCreateWithoutPolicyInput, ScoreRecordUncheckedCreateWithoutPolicyInput> | ScoreRecordCreateWithoutPolicyInput[] | ScoreRecordUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: ScoreRecordCreateOrConnectWithoutPolicyInput | ScoreRecordCreateOrConnectWithoutPolicyInput[]
    upsert?: ScoreRecordUpsertWithWhereUniqueWithoutPolicyInput | ScoreRecordUpsertWithWhereUniqueWithoutPolicyInput[]
    createMany?: ScoreRecordCreateManyPolicyInputEnvelope
    set?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    disconnect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    delete?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    connect?: ScoreRecordWhereUniqueInput | ScoreRecordWhereUniqueInput[]
    update?: ScoreRecordUpdateWithWhereUniqueWithoutPolicyInput | ScoreRecordUpdateWithWhereUniqueWithoutPolicyInput[]
    updateMany?: ScoreRecordUpdateManyWithWhereWithoutPolicyInput | ScoreRecordUpdateManyWithWhereWithoutPolicyInput[]
    deleteMany?: ScoreRecordScalarWhereInput | ScoreRecordScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutScoreRecordsInput = {
    create?: XOR<MemberCreateWithoutScoreRecordsInput, MemberUncheckedCreateWithoutScoreRecordsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutScoreRecordsInput
    connect?: MemberWhereUniqueInput
  }

  export type ScorePolicyCreateNestedOneWithoutScoreRecordsInput = {
    create?: XOR<ScorePolicyCreateWithoutScoreRecordsInput, ScorePolicyUncheckedCreateWithoutScoreRecordsInput>
    connectOrCreate?: ScorePolicyCreateOrConnectWithoutScoreRecordsInput
    connect?: ScorePolicyWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutScoreRecordsNestedInput = {
    create?: XOR<MemberCreateWithoutScoreRecordsInput, MemberUncheckedCreateWithoutScoreRecordsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutScoreRecordsInput
    upsert?: MemberUpsertWithoutScoreRecordsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutScoreRecordsInput, MemberUpdateWithoutScoreRecordsInput>, MemberUncheckedUpdateWithoutScoreRecordsInput>
  }

  export type ScorePolicyUpdateOneRequiredWithoutScoreRecordsNestedInput = {
    create?: XOR<ScorePolicyCreateWithoutScoreRecordsInput, ScorePolicyUncheckedCreateWithoutScoreRecordsInput>
    connectOrCreate?: ScorePolicyCreateOrConnectWithoutScoreRecordsInput
    upsert?: ScorePolicyUpsertWithoutScoreRecordsInput
    connect?: ScorePolicyWhereUniqueInput
    update?: XOR<XOR<ScorePolicyUpdateToOneWithWhereWithoutScoreRecordsInput, ScorePolicyUpdateWithoutScoreRecordsInput>, ScorePolicyUncheckedUpdateWithoutScoreRecordsInput>
  }

  export type GamePlatformCreateNestedManyWithoutPlatformInput = {
    create?: XOR<GamePlatformCreateWithoutPlatformInput, GamePlatformUncheckedCreateWithoutPlatformInput> | GamePlatformCreateWithoutPlatformInput[] | GamePlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutPlatformInput | GamePlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: GamePlatformCreateManyPlatformInputEnvelope
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
  }

  export type PreferredPlatformCreateNestedManyWithoutPlatformInput = {
    create?: XOR<PreferredPlatformCreateWithoutPlatformInput, PreferredPlatformUncheckedCreateWithoutPlatformInput> | PreferredPlatformCreateWithoutPlatformInput[] | PreferredPlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutPlatformInput | PreferredPlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: PreferredPlatformCreateManyPlatformInputEnvelope
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
  }

  export type GamePlatformUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<GamePlatformCreateWithoutPlatformInput, GamePlatformUncheckedCreateWithoutPlatformInput> | GamePlatformCreateWithoutPlatformInput[] | GamePlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutPlatformInput | GamePlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: GamePlatformCreateManyPlatformInputEnvelope
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
  }

  export type PreferredPlatformUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<PreferredPlatformCreateWithoutPlatformInput, PreferredPlatformUncheckedCreateWithoutPlatformInput> | PreferredPlatformCreateWithoutPlatformInput[] | PreferredPlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutPlatformInput | PreferredPlatformCreateOrConnectWithoutPlatformInput[]
    createMany?: PreferredPlatformCreateManyPlatformInputEnvelope
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
  }

  export type GamePlatformUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<GamePlatformCreateWithoutPlatformInput, GamePlatformUncheckedCreateWithoutPlatformInput> | GamePlatformCreateWithoutPlatformInput[] | GamePlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutPlatformInput | GamePlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: GamePlatformUpsertWithWhereUniqueWithoutPlatformInput | GamePlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: GamePlatformCreateManyPlatformInputEnvelope
    set?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    disconnect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    delete?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    update?: GamePlatformUpdateWithWhereUniqueWithoutPlatformInput | GamePlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: GamePlatformUpdateManyWithWhereWithoutPlatformInput | GamePlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: GamePlatformScalarWhereInput | GamePlatformScalarWhereInput[]
  }

  export type PreferredPlatformUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<PreferredPlatformCreateWithoutPlatformInput, PreferredPlatformUncheckedCreateWithoutPlatformInput> | PreferredPlatformCreateWithoutPlatformInput[] | PreferredPlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutPlatformInput | PreferredPlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: PreferredPlatformUpsertWithWhereUniqueWithoutPlatformInput | PreferredPlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: PreferredPlatformCreateManyPlatformInputEnvelope
    set?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    disconnect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    delete?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    update?: PreferredPlatformUpdateWithWhereUniqueWithoutPlatformInput | PreferredPlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: PreferredPlatformUpdateManyWithWhereWithoutPlatformInput | PreferredPlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: PreferredPlatformScalarWhereInput | PreferredPlatformScalarWhereInput[]
  }

  export type GamePlatformUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<GamePlatformCreateWithoutPlatformInput, GamePlatformUncheckedCreateWithoutPlatformInput> | GamePlatformCreateWithoutPlatformInput[] | GamePlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: GamePlatformCreateOrConnectWithoutPlatformInput | GamePlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: GamePlatformUpsertWithWhereUniqueWithoutPlatformInput | GamePlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: GamePlatformCreateManyPlatformInputEnvelope
    set?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    disconnect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    delete?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    connect?: GamePlatformWhereUniqueInput | GamePlatformWhereUniqueInput[]
    update?: GamePlatformUpdateWithWhereUniqueWithoutPlatformInput | GamePlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: GamePlatformUpdateManyWithWhereWithoutPlatformInput | GamePlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: GamePlatformScalarWhereInput | GamePlatformScalarWhereInput[]
  }

  export type PreferredPlatformUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<PreferredPlatformCreateWithoutPlatformInput, PreferredPlatformUncheckedCreateWithoutPlatformInput> | PreferredPlatformCreateWithoutPlatformInput[] | PreferredPlatformUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: PreferredPlatformCreateOrConnectWithoutPlatformInput | PreferredPlatformCreateOrConnectWithoutPlatformInput[]
    upsert?: PreferredPlatformUpsertWithWhereUniqueWithoutPlatformInput | PreferredPlatformUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: PreferredPlatformCreateManyPlatformInputEnvelope
    set?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    disconnect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    delete?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    connect?: PreferredPlatformWhereUniqueInput | PreferredPlatformWhereUniqueInput[]
    update?: PreferredPlatformUpdateWithWhereUniqueWithoutPlatformInput | PreferredPlatformUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: PreferredPlatformUpdateManyWithWhereWithoutPlatformInput | PreferredPlatformUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: PreferredPlatformScalarWhereInput | PreferredPlatformScalarWhereInput[]
  }

  export type GameGenreCreateNestedManyWithoutGenreInput = {
    create?: XOR<GameGenreCreateWithoutGenreInput, GameGenreUncheckedCreateWithoutGenreInput> | GameGenreCreateWithoutGenreInput[] | GameGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGenreInput | GameGenreCreateOrConnectWithoutGenreInput[]
    createMany?: GameGenreCreateManyGenreInputEnvelope
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
  }

  export type PreferredGenreCreateNestedManyWithoutGenreInput = {
    create?: XOR<PreferredGenreCreateWithoutGenreInput, PreferredGenreUncheckedCreateWithoutGenreInput> | PreferredGenreCreateWithoutGenreInput[] | PreferredGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutGenreInput | PreferredGenreCreateOrConnectWithoutGenreInput[]
    createMany?: PreferredGenreCreateManyGenreInputEnvelope
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
  }

  export type GameGenreUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<GameGenreCreateWithoutGenreInput, GameGenreUncheckedCreateWithoutGenreInput> | GameGenreCreateWithoutGenreInput[] | GameGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGenreInput | GameGenreCreateOrConnectWithoutGenreInput[]
    createMany?: GameGenreCreateManyGenreInputEnvelope
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
  }

  export type PreferredGenreUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<PreferredGenreCreateWithoutGenreInput, PreferredGenreUncheckedCreateWithoutGenreInput> | PreferredGenreCreateWithoutGenreInput[] | PreferredGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutGenreInput | PreferredGenreCreateOrConnectWithoutGenreInput[]
    createMany?: PreferredGenreCreateManyGenreInputEnvelope
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
  }

  export type GameGenreUpdateManyWithoutGenreNestedInput = {
    create?: XOR<GameGenreCreateWithoutGenreInput, GameGenreUncheckedCreateWithoutGenreInput> | GameGenreCreateWithoutGenreInput[] | GameGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGenreInput | GameGenreCreateOrConnectWithoutGenreInput[]
    upsert?: GameGenreUpsertWithWhereUniqueWithoutGenreInput | GameGenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: GameGenreCreateManyGenreInputEnvelope
    set?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    disconnect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    delete?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    update?: GameGenreUpdateWithWhereUniqueWithoutGenreInput | GameGenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: GameGenreUpdateManyWithWhereWithoutGenreInput | GameGenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: GameGenreScalarWhereInput | GameGenreScalarWhereInput[]
  }

  export type PreferredGenreUpdateManyWithoutGenreNestedInput = {
    create?: XOR<PreferredGenreCreateWithoutGenreInput, PreferredGenreUncheckedCreateWithoutGenreInput> | PreferredGenreCreateWithoutGenreInput[] | PreferredGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutGenreInput | PreferredGenreCreateOrConnectWithoutGenreInput[]
    upsert?: PreferredGenreUpsertWithWhereUniqueWithoutGenreInput | PreferredGenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: PreferredGenreCreateManyGenreInputEnvelope
    set?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    disconnect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    delete?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    update?: PreferredGenreUpdateWithWhereUniqueWithoutGenreInput | PreferredGenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: PreferredGenreUpdateManyWithWhereWithoutGenreInput | PreferredGenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: PreferredGenreScalarWhereInput | PreferredGenreScalarWhereInput[]
  }

  export type GameGenreUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<GameGenreCreateWithoutGenreInput, GameGenreUncheckedCreateWithoutGenreInput> | GameGenreCreateWithoutGenreInput[] | GameGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: GameGenreCreateOrConnectWithoutGenreInput | GameGenreCreateOrConnectWithoutGenreInput[]
    upsert?: GameGenreUpsertWithWhereUniqueWithoutGenreInput | GameGenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: GameGenreCreateManyGenreInputEnvelope
    set?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    disconnect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    delete?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    connect?: GameGenreWhereUniqueInput | GameGenreWhereUniqueInput[]
    update?: GameGenreUpdateWithWhereUniqueWithoutGenreInput | GameGenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: GameGenreUpdateManyWithWhereWithoutGenreInput | GameGenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: GameGenreScalarWhereInput | GameGenreScalarWhereInput[]
  }

  export type PreferredGenreUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<PreferredGenreCreateWithoutGenreInput, PreferredGenreUncheckedCreateWithoutGenreInput> | PreferredGenreCreateWithoutGenreInput[] | PreferredGenreUncheckedCreateWithoutGenreInput[]
    connectOrCreate?: PreferredGenreCreateOrConnectWithoutGenreInput | PreferredGenreCreateOrConnectWithoutGenreInput[]
    upsert?: PreferredGenreUpsertWithWhereUniqueWithoutGenreInput | PreferredGenreUpsertWithWhereUniqueWithoutGenreInput[]
    createMany?: PreferredGenreCreateManyGenreInputEnvelope
    set?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    disconnect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    delete?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    connect?: PreferredGenreWhereUniqueInput | PreferredGenreWhereUniqueInput[]
    update?: PreferredGenreUpdateWithWhereUniqueWithoutGenreInput | PreferredGenreUpdateWithWhereUniqueWithoutGenreInput[]
    updateMany?: PreferredGenreUpdateManyWithWhereWithoutGenreInput | PreferredGenreUpdateManyWithWhereWithoutGenreInput[]
    deleteMany?: PreferredGenreScalarWhereInput | PreferredGenreScalarWhereInput[]
  }

  export type GameThemeCreateNestedManyWithoutThemeInput = {
    create?: XOR<GameThemeCreateWithoutThemeInput, GameThemeUncheckedCreateWithoutThemeInput> | GameThemeCreateWithoutThemeInput[] | GameThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutThemeInput | GameThemeCreateOrConnectWithoutThemeInput[]
    createMany?: GameThemeCreateManyThemeInputEnvelope
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
  }

  export type PreferredThemeCreateNestedManyWithoutThemeInput = {
    create?: XOR<PreferredThemeCreateWithoutThemeInput, PreferredThemeUncheckedCreateWithoutThemeInput> | PreferredThemeCreateWithoutThemeInput[] | PreferredThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutThemeInput | PreferredThemeCreateOrConnectWithoutThemeInput[]
    createMany?: PreferredThemeCreateManyThemeInputEnvelope
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
  }

  export type GameThemeUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<GameThemeCreateWithoutThemeInput, GameThemeUncheckedCreateWithoutThemeInput> | GameThemeCreateWithoutThemeInput[] | GameThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutThemeInput | GameThemeCreateOrConnectWithoutThemeInput[]
    createMany?: GameThemeCreateManyThemeInputEnvelope
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
  }

  export type PreferredThemeUncheckedCreateNestedManyWithoutThemeInput = {
    create?: XOR<PreferredThemeCreateWithoutThemeInput, PreferredThemeUncheckedCreateWithoutThemeInput> | PreferredThemeCreateWithoutThemeInput[] | PreferredThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutThemeInput | PreferredThemeCreateOrConnectWithoutThemeInput[]
    createMany?: PreferredThemeCreateManyThemeInputEnvelope
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
  }

  export type GameThemeUpdateManyWithoutThemeNestedInput = {
    create?: XOR<GameThemeCreateWithoutThemeInput, GameThemeUncheckedCreateWithoutThemeInput> | GameThemeCreateWithoutThemeInput[] | GameThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutThemeInput | GameThemeCreateOrConnectWithoutThemeInput[]
    upsert?: GameThemeUpsertWithWhereUniqueWithoutThemeInput | GameThemeUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: GameThemeCreateManyThemeInputEnvelope
    set?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    disconnect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    delete?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    update?: GameThemeUpdateWithWhereUniqueWithoutThemeInput | GameThemeUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: GameThemeUpdateManyWithWhereWithoutThemeInput | GameThemeUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: GameThemeScalarWhereInput | GameThemeScalarWhereInput[]
  }

  export type PreferredThemeUpdateManyWithoutThemeNestedInput = {
    create?: XOR<PreferredThemeCreateWithoutThemeInput, PreferredThemeUncheckedCreateWithoutThemeInput> | PreferredThemeCreateWithoutThemeInput[] | PreferredThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutThemeInput | PreferredThemeCreateOrConnectWithoutThemeInput[]
    upsert?: PreferredThemeUpsertWithWhereUniqueWithoutThemeInput | PreferredThemeUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: PreferredThemeCreateManyThemeInputEnvelope
    set?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    disconnect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    delete?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    update?: PreferredThemeUpdateWithWhereUniqueWithoutThemeInput | PreferredThemeUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: PreferredThemeUpdateManyWithWhereWithoutThemeInput | PreferredThemeUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: PreferredThemeScalarWhereInput | PreferredThemeScalarWhereInput[]
  }

  export type GameThemeUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<GameThemeCreateWithoutThemeInput, GameThemeUncheckedCreateWithoutThemeInput> | GameThemeCreateWithoutThemeInput[] | GameThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: GameThemeCreateOrConnectWithoutThemeInput | GameThemeCreateOrConnectWithoutThemeInput[]
    upsert?: GameThemeUpsertWithWhereUniqueWithoutThemeInput | GameThemeUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: GameThemeCreateManyThemeInputEnvelope
    set?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    disconnect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    delete?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    connect?: GameThemeWhereUniqueInput | GameThemeWhereUniqueInput[]
    update?: GameThemeUpdateWithWhereUniqueWithoutThemeInput | GameThemeUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: GameThemeUpdateManyWithWhereWithoutThemeInput | GameThemeUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: GameThemeScalarWhereInput | GameThemeScalarWhereInput[]
  }

  export type PreferredThemeUncheckedUpdateManyWithoutThemeNestedInput = {
    create?: XOR<PreferredThemeCreateWithoutThemeInput, PreferredThemeUncheckedCreateWithoutThemeInput> | PreferredThemeCreateWithoutThemeInput[] | PreferredThemeUncheckedCreateWithoutThemeInput[]
    connectOrCreate?: PreferredThemeCreateOrConnectWithoutThemeInput | PreferredThemeCreateOrConnectWithoutThemeInput[]
    upsert?: PreferredThemeUpsertWithWhereUniqueWithoutThemeInput | PreferredThemeUpsertWithWhereUniqueWithoutThemeInput[]
    createMany?: PreferredThemeCreateManyThemeInputEnvelope
    set?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    disconnect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    delete?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    connect?: PreferredThemeWhereUniqueInput | PreferredThemeWhereUniqueInput[]
    update?: PreferredThemeUpdateWithWhereUniqueWithoutThemeInput | PreferredThemeUpdateWithWhereUniqueWithoutThemeInput[]
    updateMany?: PreferredThemeUpdateManyWithWhereWithoutThemeInput | PreferredThemeUpdateManyWithWhereWithoutThemeInput[]
    deleteMany?: PreferredThemeScalarWhereInput | PreferredThemeScalarWhereInput[]
  }

  export type MemberCreateNestedOneWithoutPreferredPlatformsInput = {
    create?: XOR<MemberCreateWithoutPreferredPlatformsInput, MemberUncheckedCreateWithoutPreferredPlatformsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPreferredPlatformsInput
    connect?: MemberWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutPreferredPlatformsInput = {
    create?: XOR<PlatformCreateWithoutPreferredPlatformsInput, PlatformUncheckedCreateWithoutPreferredPlatformsInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutPreferredPlatformsInput
    connect?: PlatformWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutPreferredPlatformsNestedInput = {
    create?: XOR<MemberCreateWithoutPreferredPlatformsInput, MemberUncheckedCreateWithoutPreferredPlatformsInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPreferredPlatformsInput
    upsert?: MemberUpsertWithoutPreferredPlatformsInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPreferredPlatformsInput, MemberUpdateWithoutPreferredPlatformsInput>, MemberUncheckedUpdateWithoutPreferredPlatformsInput>
  }

  export type PlatformUpdateOneRequiredWithoutPreferredPlatformsNestedInput = {
    create?: XOR<PlatformCreateWithoutPreferredPlatformsInput, PlatformUncheckedCreateWithoutPreferredPlatformsInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutPreferredPlatformsInput
    upsert?: PlatformUpsertWithoutPreferredPlatformsInput
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutPreferredPlatformsInput, PlatformUpdateWithoutPreferredPlatformsInput>, PlatformUncheckedUpdateWithoutPreferredPlatformsInput>
  }

  export type GenreCreateNestedOneWithoutPreferredGenresInput = {
    create?: XOR<GenreCreateWithoutPreferredGenresInput, GenreUncheckedCreateWithoutPreferredGenresInput>
    connectOrCreate?: GenreCreateOrConnectWithoutPreferredGenresInput
    connect?: GenreWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutPreferredGenresInput = {
    create?: XOR<MemberCreateWithoutPreferredGenresInput, MemberUncheckedCreateWithoutPreferredGenresInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPreferredGenresInput
    connect?: MemberWhereUniqueInput
  }

  export type GenreUpdateOneRequiredWithoutPreferredGenresNestedInput = {
    create?: XOR<GenreCreateWithoutPreferredGenresInput, GenreUncheckedCreateWithoutPreferredGenresInput>
    connectOrCreate?: GenreCreateOrConnectWithoutPreferredGenresInput
    upsert?: GenreUpsertWithoutPreferredGenresInput
    connect?: GenreWhereUniqueInput
    update?: XOR<XOR<GenreUpdateToOneWithWhereWithoutPreferredGenresInput, GenreUpdateWithoutPreferredGenresInput>, GenreUncheckedUpdateWithoutPreferredGenresInput>
  }

  export type MemberUpdateOneRequiredWithoutPreferredGenresNestedInput = {
    create?: XOR<MemberCreateWithoutPreferredGenresInput, MemberUncheckedCreateWithoutPreferredGenresInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPreferredGenresInput
    upsert?: MemberUpsertWithoutPreferredGenresInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPreferredGenresInput, MemberUpdateWithoutPreferredGenresInput>, MemberUncheckedUpdateWithoutPreferredGenresInput>
  }

  export type MemberCreateNestedOneWithoutPreferredThemesInput = {
    create?: XOR<MemberCreateWithoutPreferredThemesInput, MemberUncheckedCreateWithoutPreferredThemesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPreferredThemesInput
    connect?: MemberWhereUniqueInput
  }

  export type ThemeCreateNestedOneWithoutPreferredThemesInput = {
    create?: XOR<ThemeCreateWithoutPreferredThemesInput, ThemeUncheckedCreateWithoutPreferredThemesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutPreferredThemesInput
    connect?: ThemeWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutPreferredThemesNestedInput = {
    create?: XOR<MemberCreateWithoutPreferredThemesInput, MemberUncheckedCreateWithoutPreferredThemesInput>
    connectOrCreate?: MemberCreateOrConnectWithoutPreferredThemesInput
    upsert?: MemberUpsertWithoutPreferredThemesInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutPreferredThemesInput, MemberUpdateWithoutPreferredThemesInput>, MemberUncheckedUpdateWithoutPreferredThemesInput>
  }

  export type ThemeUpdateOneRequiredWithoutPreferredThemesNestedInput = {
    create?: XOR<ThemeCreateWithoutPreferredThemesInput, ThemeUncheckedCreateWithoutPreferredThemesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutPreferredThemesInput
    upsert?: ThemeUpsertWithoutPreferredThemesInput
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutPreferredThemesInput, ThemeUpdateWithoutPreferredThemesInput>, ThemeUncheckedUpdateWithoutPreferredThemesInput>
  }

  export type GameCreateNestedOneWithoutGamePlatformsInput = {
    create?: XOR<GameCreateWithoutGamePlatformsInput, GameUncheckedCreateWithoutGamePlatformsInput>
    connectOrCreate?: GameCreateOrConnectWithoutGamePlatformsInput
    connect?: GameWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutGamePlatformsInput = {
    create?: XOR<PlatformCreateWithoutGamePlatformsInput, PlatformUncheckedCreateWithoutGamePlatformsInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutGamePlatformsInput
    connect?: PlatformWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGamePlatformsNestedInput = {
    create?: XOR<GameCreateWithoutGamePlatformsInput, GameUncheckedCreateWithoutGamePlatformsInput>
    connectOrCreate?: GameCreateOrConnectWithoutGamePlatformsInput
    upsert?: GameUpsertWithoutGamePlatformsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGamePlatformsInput, GameUpdateWithoutGamePlatformsInput>, GameUncheckedUpdateWithoutGamePlatformsInput>
  }

  export type PlatformUpdateOneRequiredWithoutGamePlatformsNestedInput = {
    create?: XOR<PlatformCreateWithoutGamePlatformsInput, PlatformUncheckedCreateWithoutGamePlatformsInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutGamePlatformsInput
    upsert?: PlatformUpsertWithoutGamePlatformsInput
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutGamePlatformsInput, PlatformUpdateWithoutGamePlatformsInput>, PlatformUncheckedUpdateWithoutGamePlatformsInput>
  }

  export type GameCreateNestedOneWithoutGameGenresInput = {
    create?: XOR<GameCreateWithoutGameGenresInput, GameUncheckedCreateWithoutGameGenresInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameGenresInput
    connect?: GameWhereUniqueInput
  }

  export type GenreCreateNestedOneWithoutGameGenresInput = {
    create?: XOR<GenreCreateWithoutGameGenresInput, GenreUncheckedCreateWithoutGameGenresInput>
    connectOrCreate?: GenreCreateOrConnectWithoutGameGenresInput
    connect?: GenreWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameGenresNestedInput = {
    create?: XOR<GameCreateWithoutGameGenresInput, GameUncheckedCreateWithoutGameGenresInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameGenresInput
    upsert?: GameUpsertWithoutGameGenresInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameGenresInput, GameUpdateWithoutGameGenresInput>, GameUncheckedUpdateWithoutGameGenresInput>
  }

  export type GenreUpdateOneRequiredWithoutGameGenresNestedInput = {
    create?: XOR<GenreCreateWithoutGameGenresInput, GenreUncheckedCreateWithoutGameGenresInput>
    connectOrCreate?: GenreCreateOrConnectWithoutGameGenresInput
    upsert?: GenreUpsertWithoutGameGenresInput
    connect?: GenreWhereUniqueInput
    update?: XOR<XOR<GenreUpdateToOneWithWhereWithoutGameGenresInput, GenreUpdateWithoutGameGenresInput>, GenreUncheckedUpdateWithoutGameGenresInput>
  }

  export type GameCreateNestedOneWithoutGameThemesInput = {
    create?: XOR<GameCreateWithoutGameThemesInput, GameUncheckedCreateWithoutGameThemesInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameThemesInput
    connect?: GameWhereUniqueInput
  }

  export type ThemeCreateNestedOneWithoutGameThemesInput = {
    create?: XOR<ThemeCreateWithoutGameThemesInput, ThemeUncheckedCreateWithoutGameThemesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutGameThemesInput
    connect?: ThemeWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutGameThemesNestedInput = {
    create?: XOR<GameCreateWithoutGameThemesInput, GameUncheckedCreateWithoutGameThemesInput>
    connectOrCreate?: GameCreateOrConnectWithoutGameThemesInput
    upsert?: GameUpsertWithoutGameThemesInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutGameThemesInput, GameUpdateWithoutGameThemesInput>, GameUncheckedUpdateWithoutGameThemesInput>
  }

  export type ThemeUpdateOneRequiredWithoutGameThemesNestedInput = {
    create?: XOR<ThemeCreateWithoutGameThemesInput, ThemeUncheckedCreateWithoutGameThemesInput>
    connectOrCreate?: ThemeCreateOrConnectWithoutGameThemesInput
    upsert?: ThemeUpsertWithoutGameThemesInput
    connect?: ThemeWhereUniqueInput
    update?: XOR<XOR<ThemeUpdateToOneWithWhereWithoutGameThemesInput, ThemeUpdateWithoutGameThemesInput>, ThemeUncheckedUpdateWithoutGameThemesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ArenaCreateWithoutChallengerInput = {
    title: string
    description: string
    status: number
    startDate: Date | string
    creator: MemberCreateNestedOneWithoutArenasAsCreatorInput
    chattings?: ChattingCreateNestedManyWithoutArenaInput
    votes?: VoteCreateNestedManyWithoutArenaInput
  }

  export type ArenaUncheckedCreateWithoutChallengerInput = {
    id?: number
    creatorId: string
    title: string
    description: string
    status: number
    startDate: Date | string
    chattings?: ChattingUncheckedCreateNestedManyWithoutArenaInput
    votes?: VoteUncheckedCreateNestedManyWithoutArenaInput
  }

  export type ArenaCreateOrConnectWithoutChallengerInput = {
    where: ArenaWhereUniqueInput
    create: XOR<ArenaCreateWithoutChallengerInput, ArenaUncheckedCreateWithoutChallengerInput>
  }

  export type ArenaCreateManyChallengerInputEnvelope = {
    data: ArenaCreateManyChallengerInput | ArenaCreateManyChallengerInput[]
    skipDuplicates?: boolean
  }

  export type ArenaCreateWithoutCreatorInput = {
    title: string
    description: string
    status: number
    startDate: Date | string
    challenger?: MemberCreateNestedOneWithoutArenasAsChallengerInput
    chattings?: ChattingCreateNestedManyWithoutArenaInput
    votes?: VoteCreateNestedManyWithoutArenaInput
  }

  export type ArenaUncheckedCreateWithoutCreatorInput = {
    id?: number
    challengerId?: string | null
    title: string
    description: string
    status: number
    startDate: Date | string
    chattings?: ChattingUncheckedCreateNestedManyWithoutArenaInput
    votes?: VoteUncheckedCreateNestedManyWithoutArenaInput
  }

  export type ArenaCreateOrConnectWithoutCreatorInput = {
    where: ArenaWhereUniqueInput
    create: XOR<ArenaCreateWithoutCreatorInput, ArenaUncheckedCreateWithoutCreatorInput>
  }

  export type ArenaCreateManyCreatorInputEnvelope = {
    data: ArenaCreateManyCreatorInput | ArenaCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ChattingCreateWithoutMemberInput = {
    content: string
    createdAt?: Date | string
    arena: ArenaCreateNestedOneWithoutChattingsInput
  }

  export type ChattingUncheckedCreateWithoutMemberInput = {
    id?: number
    arenaId: number
    content: string
    createdAt?: Date | string
  }

  export type ChattingCreateOrConnectWithoutMemberInput = {
    where: ChattingWhereUniqueInput
    create: XOR<ChattingCreateWithoutMemberInput, ChattingUncheckedCreateWithoutMemberInput>
  }

  export type ChattingCreateManyMemberInputEnvelope = {
    data: ChattingCreateManyMemberInput | ChattingCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type NotificationRecordCreateWithoutMemberInput = {
    description: string
    createdAt?: Date | string
    type: NotificationTypeCreateNestedOneWithoutNotificationRecordsInput
  }

  export type NotificationRecordUncheckedCreateWithoutMemberInput = {
    id?: number
    typeId: number
    description: string
    createdAt?: Date | string
  }

  export type NotificationRecordCreateOrConnectWithoutMemberInput = {
    where: NotificationRecordWhereUniqueInput
    create: XOR<NotificationRecordCreateWithoutMemberInput, NotificationRecordUncheckedCreateWithoutMemberInput>
  }

  export type NotificationRecordCreateManyMemberInputEnvelope = {
    data: NotificationRecordCreateManyMemberInput | NotificationRecordCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type PreferredGenreCreateWithoutMemberInput = {
    genre: GenreCreateNestedOneWithoutPreferredGenresInput
  }

  export type PreferredGenreUncheckedCreateWithoutMemberInput = {
    id?: number
    genreId: number
  }

  export type PreferredGenreCreateOrConnectWithoutMemberInput = {
    where: PreferredGenreWhereUniqueInput
    create: XOR<PreferredGenreCreateWithoutMemberInput, PreferredGenreUncheckedCreateWithoutMemberInput>
  }

  export type PreferredGenreCreateManyMemberInputEnvelope = {
    data: PreferredGenreCreateManyMemberInput | PreferredGenreCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type PreferredPlatformCreateWithoutMemberInput = {
    platform: PlatformCreateNestedOneWithoutPreferredPlatformsInput
  }

  export type PreferredPlatformUncheckedCreateWithoutMemberInput = {
    id?: number
    platformId: number
  }

  export type PreferredPlatformCreateOrConnectWithoutMemberInput = {
    where: PreferredPlatformWhereUniqueInput
    create: XOR<PreferredPlatformCreateWithoutMemberInput, PreferredPlatformUncheckedCreateWithoutMemberInput>
  }

  export type PreferredPlatformCreateManyMemberInputEnvelope = {
    data: PreferredPlatformCreateManyMemberInput | PreferredPlatformCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type PreferredThemeCreateWithoutMemberInput = {
    theme: ThemeCreateNestedOneWithoutPreferredThemesInput
  }

  export type PreferredThemeUncheckedCreateWithoutMemberInput = {
    id?: number
    themeId: number
  }

  export type PreferredThemeCreateOrConnectWithoutMemberInput = {
    where: PreferredThemeWhereUniqueInput
    create: XOR<PreferredThemeCreateWithoutMemberInput, PreferredThemeUncheckedCreateWithoutMemberInput>
  }

  export type PreferredThemeCreateManyMemberInputEnvelope = {
    data: PreferredThemeCreateManyMemberInput | PreferredThemeCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ReviewLikeCreateWithoutMemberInput = {
    review: ReviewCreateNestedOneWithoutReviewLikesInput
  }

  export type ReviewLikeUncheckedCreateWithoutMemberInput = {
    id?: number
    reviewId: number
  }

  export type ReviewLikeCreateOrConnectWithoutMemberInput = {
    where: ReviewLikeWhereUniqueInput
    create: XOR<ReviewLikeCreateWithoutMemberInput, ReviewLikeUncheckedCreateWithoutMemberInput>
  }

  export type ReviewLikeCreateManyMemberInputEnvelope = {
    data: ReviewLikeCreateManyMemberInput | ReviewLikeCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutMemberInput = {
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    reviewLikes?: ReviewLikeCreateNestedManyWithoutReviewInput
    game: GameCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutMemberInput = {
    id?: number
    gameId: number
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutMemberInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutMemberInput, ReviewUncheckedCreateWithoutMemberInput>
  }

  export type ReviewCreateManyMemberInputEnvelope = {
    data: ReviewCreateManyMemberInput | ReviewCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ScoreRecordCreateWithoutMemberInput = {
    createdAt?: Date | string
    policy: ScorePolicyCreateNestedOneWithoutScoreRecordsInput
  }

  export type ScoreRecordUncheckedCreateWithoutMemberInput = {
    id?: number
    policyId: number
    createdAt?: Date | string
  }

  export type ScoreRecordCreateOrConnectWithoutMemberInput = {
    where: ScoreRecordWhereUniqueInput
    create: XOR<ScoreRecordCreateWithoutMemberInput, ScoreRecordUncheckedCreateWithoutMemberInput>
  }

  export type ScoreRecordCreateManyMemberInputEnvelope = {
    data: ScoreRecordCreateManyMemberInput | ScoreRecordCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutMemberInput = {
    votedTo: string
    arena: ArenaCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutMemberInput = {
    id?: number
    arenaId: number
    votedTo: string
  }

  export type VoteCreateOrConnectWithoutMemberInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutMemberInput, VoteUncheckedCreateWithoutMemberInput>
  }

  export type VoteCreateManyMemberInputEnvelope = {
    data: VoteCreateManyMemberInput | VoteCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type WishlistCreateWithoutMemberInput = {
    game: GameCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateWithoutMemberInput = {
    id?: number
    gameId: number
  }

  export type WishlistCreateOrConnectWithoutMemberInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutMemberInput, WishlistUncheckedCreateWithoutMemberInput>
  }

  export type WishlistCreateManyMemberInputEnvelope = {
    data: WishlistCreateManyMemberInput | WishlistCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ArenaUpsertWithWhereUniqueWithoutChallengerInput = {
    where: ArenaWhereUniqueInput
    update: XOR<ArenaUpdateWithoutChallengerInput, ArenaUncheckedUpdateWithoutChallengerInput>
    create: XOR<ArenaCreateWithoutChallengerInput, ArenaUncheckedCreateWithoutChallengerInput>
  }

  export type ArenaUpdateWithWhereUniqueWithoutChallengerInput = {
    where: ArenaWhereUniqueInput
    data: XOR<ArenaUpdateWithoutChallengerInput, ArenaUncheckedUpdateWithoutChallengerInput>
  }

  export type ArenaUpdateManyWithWhereWithoutChallengerInput = {
    where: ArenaScalarWhereInput
    data: XOR<ArenaUpdateManyMutationInput, ArenaUncheckedUpdateManyWithoutChallengerInput>
  }

  export type ArenaScalarWhereInput = {
    AND?: ArenaScalarWhereInput | ArenaScalarWhereInput[]
    OR?: ArenaScalarWhereInput[]
    NOT?: ArenaScalarWhereInput | ArenaScalarWhereInput[]
    id?: IntFilter<"Arena"> | number
    creatorId?: StringFilter<"Arena"> | string
    challengerId?: StringNullableFilter<"Arena"> | string | null
    title?: StringFilter<"Arena"> | string
    description?: StringFilter<"Arena"> | string
    status?: IntFilter<"Arena"> | number
    startDate?: DateTimeFilter<"Arena"> | Date | string
  }

  export type ArenaUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ArenaWhereUniqueInput
    update: XOR<ArenaUpdateWithoutCreatorInput, ArenaUncheckedUpdateWithoutCreatorInput>
    create: XOR<ArenaCreateWithoutCreatorInput, ArenaUncheckedCreateWithoutCreatorInput>
  }

  export type ArenaUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ArenaWhereUniqueInput
    data: XOR<ArenaUpdateWithoutCreatorInput, ArenaUncheckedUpdateWithoutCreatorInput>
  }

  export type ArenaUpdateManyWithWhereWithoutCreatorInput = {
    where: ArenaScalarWhereInput
    data: XOR<ArenaUpdateManyMutationInput, ArenaUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ChattingUpsertWithWhereUniqueWithoutMemberInput = {
    where: ChattingWhereUniqueInput
    update: XOR<ChattingUpdateWithoutMemberInput, ChattingUncheckedUpdateWithoutMemberInput>
    create: XOR<ChattingCreateWithoutMemberInput, ChattingUncheckedCreateWithoutMemberInput>
  }

  export type ChattingUpdateWithWhereUniqueWithoutMemberInput = {
    where: ChattingWhereUniqueInput
    data: XOR<ChattingUpdateWithoutMemberInput, ChattingUncheckedUpdateWithoutMemberInput>
  }

  export type ChattingUpdateManyWithWhereWithoutMemberInput = {
    where: ChattingScalarWhereInput
    data: XOR<ChattingUpdateManyMutationInput, ChattingUncheckedUpdateManyWithoutMemberInput>
  }

  export type ChattingScalarWhereInput = {
    AND?: ChattingScalarWhereInput | ChattingScalarWhereInput[]
    OR?: ChattingScalarWhereInput[]
    NOT?: ChattingScalarWhereInput | ChattingScalarWhereInput[]
    id?: IntFilter<"Chatting"> | number
    memberId?: StringFilter<"Chatting"> | string
    arenaId?: IntFilter<"Chatting"> | number
    content?: StringFilter<"Chatting"> | string
    createdAt?: DateTimeFilter<"Chatting"> | Date | string
  }

  export type NotificationRecordUpsertWithWhereUniqueWithoutMemberInput = {
    where: NotificationRecordWhereUniqueInput
    update: XOR<NotificationRecordUpdateWithoutMemberInput, NotificationRecordUncheckedUpdateWithoutMemberInput>
    create: XOR<NotificationRecordCreateWithoutMemberInput, NotificationRecordUncheckedCreateWithoutMemberInput>
  }

  export type NotificationRecordUpdateWithWhereUniqueWithoutMemberInput = {
    where: NotificationRecordWhereUniqueInput
    data: XOR<NotificationRecordUpdateWithoutMemberInput, NotificationRecordUncheckedUpdateWithoutMemberInput>
  }

  export type NotificationRecordUpdateManyWithWhereWithoutMemberInput = {
    where: NotificationRecordScalarWhereInput
    data: XOR<NotificationRecordUpdateManyMutationInput, NotificationRecordUncheckedUpdateManyWithoutMemberInput>
  }

  export type NotificationRecordScalarWhereInput = {
    AND?: NotificationRecordScalarWhereInput | NotificationRecordScalarWhereInput[]
    OR?: NotificationRecordScalarWhereInput[]
    NOT?: NotificationRecordScalarWhereInput | NotificationRecordScalarWhereInput[]
    id?: IntFilter<"NotificationRecord"> | number
    memberId?: StringFilter<"NotificationRecord"> | string
    typeId?: IntFilter<"NotificationRecord"> | number
    description?: StringFilter<"NotificationRecord"> | string
    createdAt?: DateTimeFilter<"NotificationRecord"> | Date | string
  }

  export type PreferredGenreUpsertWithWhereUniqueWithoutMemberInput = {
    where: PreferredGenreWhereUniqueInput
    update: XOR<PreferredGenreUpdateWithoutMemberInput, PreferredGenreUncheckedUpdateWithoutMemberInput>
    create: XOR<PreferredGenreCreateWithoutMemberInput, PreferredGenreUncheckedCreateWithoutMemberInput>
  }

  export type PreferredGenreUpdateWithWhereUniqueWithoutMemberInput = {
    where: PreferredGenreWhereUniqueInput
    data: XOR<PreferredGenreUpdateWithoutMemberInput, PreferredGenreUncheckedUpdateWithoutMemberInput>
  }

  export type PreferredGenreUpdateManyWithWhereWithoutMemberInput = {
    where: PreferredGenreScalarWhereInput
    data: XOR<PreferredGenreUpdateManyMutationInput, PreferredGenreUncheckedUpdateManyWithoutMemberInput>
  }

  export type PreferredGenreScalarWhereInput = {
    AND?: PreferredGenreScalarWhereInput | PreferredGenreScalarWhereInput[]
    OR?: PreferredGenreScalarWhereInput[]
    NOT?: PreferredGenreScalarWhereInput | PreferredGenreScalarWhereInput[]
    id?: IntFilter<"PreferredGenre"> | number
    memberId?: StringFilter<"PreferredGenre"> | string
    genreId?: IntFilter<"PreferredGenre"> | number
  }

  export type PreferredPlatformUpsertWithWhereUniqueWithoutMemberInput = {
    where: PreferredPlatformWhereUniqueInput
    update: XOR<PreferredPlatformUpdateWithoutMemberInput, PreferredPlatformUncheckedUpdateWithoutMemberInput>
    create: XOR<PreferredPlatformCreateWithoutMemberInput, PreferredPlatformUncheckedCreateWithoutMemberInput>
  }

  export type PreferredPlatformUpdateWithWhereUniqueWithoutMemberInput = {
    where: PreferredPlatformWhereUniqueInput
    data: XOR<PreferredPlatformUpdateWithoutMemberInput, PreferredPlatformUncheckedUpdateWithoutMemberInput>
  }

  export type PreferredPlatformUpdateManyWithWhereWithoutMemberInput = {
    where: PreferredPlatformScalarWhereInput
    data: XOR<PreferredPlatformUpdateManyMutationInput, PreferredPlatformUncheckedUpdateManyWithoutMemberInput>
  }

  export type PreferredPlatformScalarWhereInput = {
    AND?: PreferredPlatformScalarWhereInput | PreferredPlatformScalarWhereInput[]
    OR?: PreferredPlatformScalarWhereInput[]
    NOT?: PreferredPlatformScalarWhereInput | PreferredPlatformScalarWhereInput[]
    id?: IntFilter<"PreferredPlatform"> | number
    memberId?: StringFilter<"PreferredPlatform"> | string
    platformId?: IntFilter<"PreferredPlatform"> | number
  }

  export type PreferredThemeUpsertWithWhereUniqueWithoutMemberInput = {
    where: PreferredThemeWhereUniqueInput
    update: XOR<PreferredThemeUpdateWithoutMemberInput, PreferredThemeUncheckedUpdateWithoutMemberInput>
    create: XOR<PreferredThemeCreateWithoutMemberInput, PreferredThemeUncheckedCreateWithoutMemberInput>
  }

  export type PreferredThemeUpdateWithWhereUniqueWithoutMemberInput = {
    where: PreferredThemeWhereUniqueInput
    data: XOR<PreferredThemeUpdateWithoutMemberInput, PreferredThemeUncheckedUpdateWithoutMemberInput>
  }

  export type PreferredThemeUpdateManyWithWhereWithoutMemberInput = {
    where: PreferredThemeScalarWhereInput
    data: XOR<PreferredThemeUpdateManyMutationInput, PreferredThemeUncheckedUpdateManyWithoutMemberInput>
  }

  export type PreferredThemeScalarWhereInput = {
    AND?: PreferredThemeScalarWhereInput | PreferredThemeScalarWhereInput[]
    OR?: PreferredThemeScalarWhereInput[]
    NOT?: PreferredThemeScalarWhereInput | PreferredThemeScalarWhereInput[]
    id?: IntFilter<"PreferredTheme"> | number
    memberId?: StringFilter<"PreferredTheme"> | string
    themeId?: IntFilter<"PreferredTheme"> | number
  }

  export type ReviewLikeUpsertWithWhereUniqueWithoutMemberInput = {
    where: ReviewLikeWhereUniqueInput
    update: XOR<ReviewLikeUpdateWithoutMemberInput, ReviewLikeUncheckedUpdateWithoutMemberInput>
    create: XOR<ReviewLikeCreateWithoutMemberInput, ReviewLikeUncheckedCreateWithoutMemberInput>
  }

  export type ReviewLikeUpdateWithWhereUniqueWithoutMemberInput = {
    where: ReviewLikeWhereUniqueInput
    data: XOR<ReviewLikeUpdateWithoutMemberInput, ReviewLikeUncheckedUpdateWithoutMemberInput>
  }

  export type ReviewLikeUpdateManyWithWhereWithoutMemberInput = {
    where: ReviewLikeScalarWhereInput
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyWithoutMemberInput>
  }

  export type ReviewLikeScalarWhereInput = {
    AND?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
    OR?: ReviewLikeScalarWhereInput[]
    NOT?: ReviewLikeScalarWhereInput | ReviewLikeScalarWhereInput[]
    id?: IntFilter<"ReviewLike"> | number
    memberId?: StringFilter<"ReviewLike"> | string
    reviewId?: IntFilter<"ReviewLike"> | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutMemberInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutMemberInput, ReviewUncheckedUpdateWithoutMemberInput>
    create: XOR<ReviewCreateWithoutMemberInput, ReviewUncheckedCreateWithoutMemberInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutMemberInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutMemberInput, ReviewUncheckedUpdateWithoutMemberInput>
  }

  export type ReviewUpdateManyWithWhereWithoutMemberInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutMemberInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    memberId?: StringFilter<"Review"> | string
    gameId?: IntFilter<"Review"> | number
    content?: StringFilter<"Review"> | string
    rating?: IntFilter<"Review"> | number
    createdAt?: DateTimeFilter<"Review"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Review"> | Date | string | null
  }

  export type ScoreRecordUpsertWithWhereUniqueWithoutMemberInput = {
    where: ScoreRecordWhereUniqueInput
    update: XOR<ScoreRecordUpdateWithoutMemberInput, ScoreRecordUncheckedUpdateWithoutMemberInput>
    create: XOR<ScoreRecordCreateWithoutMemberInput, ScoreRecordUncheckedCreateWithoutMemberInput>
  }

  export type ScoreRecordUpdateWithWhereUniqueWithoutMemberInput = {
    where: ScoreRecordWhereUniqueInput
    data: XOR<ScoreRecordUpdateWithoutMemberInput, ScoreRecordUncheckedUpdateWithoutMemberInput>
  }

  export type ScoreRecordUpdateManyWithWhereWithoutMemberInput = {
    where: ScoreRecordScalarWhereInput
    data: XOR<ScoreRecordUpdateManyMutationInput, ScoreRecordUncheckedUpdateManyWithoutMemberInput>
  }

  export type ScoreRecordScalarWhereInput = {
    AND?: ScoreRecordScalarWhereInput | ScoreRecordScalarWhereInput[]
    OR?: ScoreRecordScalarWhereInput[]
    NOT?: ScoreRecordScalarWhereInput | ScoreRecordScalarWhereInput[]
    id?: IntFilter<"ScoreRecord"> | number
    memberId?: StringFilter<"ScoreRecord"> | string
    policyId?: IntFilter<"ScoreRecord"> | number
    createdAt?: DateTimeFilter<"ScoreRecord"> | Date | string
  }

  export type VoteUpsertWithWhereUniqueWithoutMemberInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutMemberInput, VoteUncheckedUpdateWithoutMemberInput>
    create: XOR<VoteCreateWithoutMemberInput, VoteUncheckedCreateWithoutMemberInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutMemberInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutMemberInput, VoteUncheckedUpdateWithoutMemberInput>
  }

  export type VoteUpdateManyWithWhereWithoutMemberInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutMemberInput>
  }

  export type VoteScalarWhereInput = {
    AND?: VoteScalarWhereInput | VoteScalarWhereInput[]
    OR?: VoteScalarWhereInput[]
    NOT?: VoteScalarWhereInput | VoteScalarWhereInput[]
    id?: IntFilter<"Vote"> | number
    memberId?: StringFilter<"Vote"> | string
    arenaId?: IntFilter<"Vote"> | number
    votedTo?: StringFilter<"Vote"> | string
  }

  export type WishlistUpsertWithWhereUniqueWithoutMemberInput = {
    where: WishlistWhereUniqueInput
    update: XOR<WishlistUpdateWithoutMemberInput, WishlistUncheckedUpdateWithoutMemberInput>
    create: XOR<WishlistCreateWithoutMemberInput, WishlistUncheckedCreateWithoutMemberInput>
  }

  export type WishlistUpdateWithWhereUniqueWithoutMemberInput = {
    where: WishlistWhereUniqueInput
    data: XOR<WishlistUpdateWithoutMemberInput, WishlistUncheckedUpdateWithoutMemberInput>
  }

  export type WishlistUpdateManyWithWhereWithoutMemberInput = {
    where: WishlistScalarWhereInput
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyWithoutMemberInput>
  }

  export type WishlistScalarWhereInput = {
    AND?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
    OR?: WishlistScalarWhereInput[]
    NOT?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
    id?: IntFilter<"Wishlist"> | number
    memberId?: StringFilter<"Wishlist"> | string
    gameId?: IntFilter<"Wishlist"> | number
  }

  export type GameGenreCreateWithoutGameInput = {
    genre: GenreCreateNestedOneWithoutGameGenresInput
  }

  export type GameGenreUncheckedCreateWithoutGameInput = {
    id?: number
    genreId: number
  }

  export type GameGenreCreateOrConnectWithoutGameInput = {
    where: GameGenreWhereUniqueInput
    create: XOR<GameGenreCreateWithoutGameInput, GameGenreUncheckedCreateWithoutGameInput>
  }

  export type GameGenreCreateManyGameInputEnvelope = {
    data: GameGenreCreateManyGameInput | GameGenreCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GamePlatformCreateWithoutGameInput = {
    platform: PlatformCreateNestedOneWithoutGamePlatformsInput
  }

  export type GamePlatformUncheckedCreateWithoutGameInput = {
    id?: number
    platformId: number
  }

  export type GamePlatformCreateOrConnectWithoutGameInput = {
    where: GamePlatformWhereUniqueInput
    create: XOR<GamePlatformCreateWithoutGameInput, GamePlatformUncheckedCreateWithoutGameInput>
  }

  export type GamePlatformCreateManyGameInputEnvelope = {
    data: GamePlatformCreateManyGameInput | GamePlatformCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameThemeCreateWithoutGameInput = {
    theme: ThemeCreateNestedOneWithoutGameThemesInput
  }

  export type GameThemeUncheckedCreateWithoutGameInput = {
    id?: number
    themeId: number
  }

  export type GameThemeCreateOrConnectWithoutGameInput = {
    where: GameThemeWhereUniqueInput
    create: XOR<GameThemeCreateWithoutGameInput, GameThemeUncheckedCreateWithoutGameInput>
  }

  export type GameThemeCreateManyGameInputEnvelope = {
    data: GameThemeCreateManyGameInput | GameThemeCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutGameInput = {
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    reviewLikes?: ReviewLikeCreateNestedManyWithoutReviewInput
    member: MemberCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutGameInput = {
    id?: number
    memberId: string
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutGameInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutGameInput, ReviewUncheckedCreateWithoutGameInput>
  }

  export type ReviewCreateManyGameInputEnvelope = {
    data: ReviewCreateManyGameInput | ReviewCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type WishlistCreateWithoutGameInput = {
    member: MemberCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateWithoutGameInput = {
    id?: number
    memberId: string
  }

  export type WishlistCreateOrConnectWithoutGameInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutGameInput, WishlistUncheckedCreateWithoutGameInput>
  }

  export type WishlistCreateManyGameInputEnvelope = {
    data: WishlistCreateManyGameInput | WishlistCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type GameGenreUpsertWithWhereUniqueWithoutGameInput = {
    where: GameGenreWhereUniqueInput
    update: XOR<GameGenreUpdateWithoutGameInput, GameGenreUncheckedUpdateWithoutGameInput>
    create: XOR<GameGenreCreateWithoutGameInput, GameGenreUncheckedCreateWithoutGameInput>
  }

  export type GameGenreUpdateWithWhereUniqueWithoutGameInput = {
    where: GameGenreWhereUniqueInput
    data: XOR<GameGenreUpdateWithoutGameInput, GameGenreUncheckedUpdateWithoutGameInput>
  }

  export type GameGenreUpdateManyWithWhereWithoutGameInput = {
    where: GameGenreScalarWhereInput
    data: XOR<GameGenreUpdateManyMutationInput, GameGenreUncheckedUpdateManyWithoutGameInput>
  }

  export type GameGenreScalarWhereInput = {
    AND?: GameGenreScalarWhereInput | GameGenreScalarWhereInput[]
    OR?: GameGenreScalarWhereInput[]
    NOT?: GameGenreScalarWhereInput | GameGenreScalarWhereInput[]
    id?: IntFilter<"GameGenre"> | number
    gameId?: IntFilter<"GameGenre"> | number
    genreId?: IntFilter<"GameGenre"> | number
  }

  export type GamePlatformUpsertWithWhereUniqueWithoutGameInput = {
    where: GamePlatformWhereUniqueInput
    update: XOR<GamePlatformUpdateWithoutGameInput, GamePlatformUncheckedUpdateWithoutGameInput>
    create: XOR<GamePlatformCreateWithoutGameInput, GamePlatformUncheckedCreateWithoutGameInput>
  }

  export type GamePlatformUpdateWithWhereUniqueWithoutGameInput = {
    where: GamePlatformWhereUniqueInput
    data: XOR<GamePlatformUpdateWithoutGameInput, GamePlatformUncheckedUpdateWithoutGameInput>
  }

  export type GamePlatformUpdateManyWithWhereWithoutGameInput = {
    where: GamePlatformScalarWhereInput
    data: XOR<GamePlatformUpdateManyMutationInput, GamePlatformUncheckedUpdateManyWithoutGameInput>
  }

  export type GamePlatformScalarWhereInput = {
    AND?: GamePlatformScalarWhereInput | GamePlatformScalarWhereInput[]
    OR?: GamePlatformScalarWhereInput[]
    NOT?: GamePlatformScalarWhereInput | GamePlatformScalarWhereInput[]
    id?: IntFilter<"GamePlatform"> | number
    gameId?: IntFilter<"GamePlatform"> | number
    platformId?: IntFilter<"GamePlatform"> | number
  }

  export type GameThemeUpsertWithWhereUniqueWithoutGameInput = {
    where: GameThemeWhereUniqueInput
    update: XOR<GameThemeUpdateWithoutGameInput, GameThemeUncheckedUpdateWithoutGameInput>
    create: XOR<GameThemeCreateWithoutGameInput, GameThemeUncheckedCreateWithoutGameInput>
  }

  export type GameThemeUpdateWithWhereUniqueWithoutGameInput = {
    where: GameThemeWhereUniqueInput
    data: XOR<GameThemeUpdateWithoutGameInput, GameThemeUncheckedUpdateWithoutGameInput>
  }

  export type GameThemeUpdateManyWithWhereWithoutGameInput = {
    where: GameThemeScalarWhereInput
    data: XOR<GameThemeUpdateManyMutationInput, GameThemeUncheckedUpdateManyWithoutGameInput>
  }

  export type GameThemeScalarWhereInput = {
    AND?: GameThemeScalarWhereInput | GameThemeScalarWhereInput[]
    OR?: GameThemeScalarWhereInput[]
    NOT?: GameThemeScalarWhereInput | GameThemeScalarWhereInput[]
    id?: IntFilter<"GameTheme"> | number
    gameId?: IntFilter<"GameTheme"> | number
    themeId?: IntFilter<"GameTheme"> | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutGameInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutGameInput, ReviewUncheckedUpdateWithoutGameInput>
    create: XOR<ReviewCreateWithoutGameInput, ReviewUncheckedCreateWithoutGameInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutGameInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutGameInput, ReviewUncheckedUpdateWithoutGameInput>
  }

  export type ReviewUpdateManyWithWhereWithoutGameInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutGameInput>
  }

  export type WishlistUpsertWithWhereUniqueWithoutGameInput = {
    where: WishlistWhereUniqueInput
    update: XOR<WishlistUpdateWithoutGameInput, WishlistUncheckedUpdateWithoutGameInput>
    create: XOR<WishlistCreateWithoutGameInput, WishlistUncheckedCreateWithoutGameInput>
  }

  export type WishlistUpdateWithWhereUniqueWithoutGameInput = {
    where: WishlistWhereUniqueInput
    data: XOR<WishlistUpdateWithoutGameInput, WishlistUncheckedUpdateWithoutGameInput>
  }

  export type WishlistUpdateManyWithWhereWithoutGameInput = {
    where: WishlistScalarWhereInput
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyWithoutGameInput>
  }

  export type GameCreateWithoutWishlistsInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeCreateNestedManyWithoutGameInput
    reviews?: ReviewCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutWishlistsInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutGameInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutWishlistsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutWishlistsInput, GameUncheckedCreateWithoutWishlistsInput>
  }

  export type MemberCreateWithoutWishlistsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutWishlistsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutWishlistsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutWishlistsInput, MemberUncheckedCreateWithoutWishlistsInput>
  }

  export type GameUpsertWithoutWishlistsInput = {
    update: XOR<GameUpdateWithoutWishlistsInput, GameUncheckedUpdateWithoutWishlistsInput>
    create: XOR<GameCreateWithoutWishlistsInput, GameUncheckedCreateWithoutWishlistsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutWishlistsInput, GameUncheckedUpdateWithoutWishlistsInput>
  }

  export type GameUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUpdateManyWithoutGameNestedInput
    reviews?: ReviewUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutWishlistsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUncheckedUpdateManyWithoutGameNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutGameNestedInput
  }

  export type MemberUpsertWithoutWishlistsInput = {
    update: XOR<MemberUpdateWithoutWishlistsInput, MemberUncheckedUpdateWithoutWishlistsInput>
    create: XOR<MemberCreateWithoutWishlistsInput, MemberUncheckedCreateWithoutWishlistsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutWishlistsInput, MemberUncheckedUpdateWithoutWishlistsInput>
  }

  export type MemberUpdateWithoutWishlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutWishlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ReviewLikeCreateWithoutReviewInput = {
    member: MemberCreateNestedOneWithoutReviewLikesInput
  }

  export type ReviewLikeUncheckedCreateWithoutReviewInput = {
    id?: number
    memberId: string
  }

  export type ReviewLikeCreateOrConnectWithoutReviewInput = {
    where: ReviewLikeWhereUniqueInput
    create: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput>
  }

  export type ReviewLikeCreateManyReviewInputEnvelope = {
    data: ReviewLikeCreateManyReviewInput | ReviewLikeCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutReviewsInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeCreateNestedManyWithoutGameInput
    wishlists?: WishlistCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutReviewsInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutGameInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutReviewsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutReviewsInput, GameUncheckedCreateWithoutReviewsInput>
  }

  export type MemberCreateWithoutReviewsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutReviewsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutReviewsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutReviewsInput, MemberUncheckedCreateWithoutReviewsInput>
  }

  export type ReviewLikeUpsertWithWhereUniqueWithoutReviewInput = {
    where: ReviewLikeWhereUniqueInput
    update: XOR<ReviewLikeUpdateWithoutReviewInput, ReviewLikeUncheckedUpdateWithoutReviewInput>
    create: XOR<ReviewLikeCreateWithoutReviewInput, ReviewLikeUncheckedCreateWithoutReviewInput>
  }

  export type ReviewLikeUpdateWithWhereUniqueWithoutReviewInput = {
    where: ReviewLikeWhereUniqueInput
    data: XOR<ReviewLikeUpdateWithoutReviewInput, ReviewLikeUncheckedUpdateWithoutReviewInput>
  }

  export type ReviewLikeUpdateManyWithWhereWithoutReviewInput = {
    where: ReviewLikeScalarWhereInput
    data: XOR<ReviewLikeUpdateManyMutationInput, ReviewLikeUncheckedUpdateManyWithoutReviewInput>
  }

  export type GameUpsertWithoutReviewsInput = {
    update: XOR<GameUpdateWithoutReviewsInput, GameUncheckedUpdateWithoutReviewsInput>
    create: XOR<GameCreateWithoutReviewsInput, GameUncheckedCreateWithoutReviewsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutReviewsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutReviewsInput, GameUncheckedUpdateWithoutReviewsInput>
  }

  export type GameUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUncheckedUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutGameNestedInput
  }

  export type MemberUpsertWithoutReviewsInput = {
    update: XOR<MemberUpdateWithoutReviewsInput, MemberUncheckedUpdateWithoutReviewsInput>
    create: XOR<MemberCreateWithoutReviewsInput, MemberUncheckedCreateWithoutReviewsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutReviewsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutReviewsInput, MemberUncheckedUpdateWithoutReviewsInput>
  }

  export type MemberUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateWithoutReviewLikesInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutReviewLikesInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutReviewLikesInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutReviewLikesInput, MemberUncheckedCreateWithoutReviewLikesInput>
  }

  export type ReviewCreateWithoutReviewLikesInput = {
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
    game: GameCreateNestedOneWithoutReviewsInput
    member: MemberCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutReviewLikesInput = {
    id?: number
    memberId: string
    gameId: number
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ReviewCreateOrConnectWithoutReviewLikesInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
  }

  export type MemberUpsertWithoutReviewLikesInput = {
    update: XOR<MemberUpdateWithoutReviewLikesInput, MemberUncheckedUpdateWithoutReviewLikesInput>
    create: XOR<MemberCreateWithoutReviewLikesInput, MemberUncheckedCreateWithoutReviewLikesInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutReviewLikesInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutReviewLikesInput, MemberUncheckedUpdateWithoutReviewLikesInput>
  }

  export type MemberUpdateWithoutReviewLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutReviewLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ReviewUpsertWithoutReviewLikesInput = {
    update: XOR<ReviewUpdateWithoutReviewLikesInput, ReviewUncheckedUpdateWithoutReviewLikesInput>
    create: XOR<ReviewCreateWithoutReviewLikesInput, ReviewUncheckedCreateWithoutReviewLikesInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewLikesInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewLikesInput, ReviewUncheckedUpdateWithoutReviewLikesInput>
  }

  export type ReviewUpdateWithoutReviewLikesInput = {
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    game?: GameUpdateOneRequiredWithoutReviewsNestedInput
    member?: MemberUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    gameId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MemberCreateWithoutArenasAsChallengerInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutArenasAsChallengerInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutArenasAsChallengerInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutArenasAsChallengerInput, MemberUncheckedCreateWithoutArenasAsChallengerInput>
  }

  export type MemberCreateWithoutArenasAsCreatorInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutArenasAsCreatorInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutArenasAsCreatorInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutArenasAsCreatorInput, MemberUncheckedCreateWithoutArenasAsCreatorInput>
  }

  export type ChattingCreateWithoutArenaInput = {
    content: string
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutChattingsInput
  }

  export type ChattingUncheckedCreateWithoutArenaInput = {
    id?: number
    memberId: string
    content: string
    createdAt?: Date | string
  }

  export type ChattingCreateOrConnectWithoutArenaInput = {
    where: ChattingWhereUniqueInput
    create: XOR<ChattingCreateWithoutArenaInput, ChattingUncheckedCreateWithoutArenaInput>
  }

  export type ChattingCreateManyArenaInputEnvelope = {
    data: ChattingCreateManyArenaInput | ChattingCreateManyArenaInput[]
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutArenaInput = {
    votedTo: string
    member: MemberCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutArenaInput = {
    id?: number
    memberId: string
    votedTo: string
  }

  export type VoteCreateOrConnectWithoutArenaInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutArenaInput, VoteUncheckedCreateWithoutArenaInput>
  }

  export type VoteCreateManyArenaInputEnvelope = {
    data: VoteCreateManyArenaInput | VoteCreateManyArenaInput[]
    skipDuplicates?: boolean
  }

  export type MemberUpsertWithoutArenasAsChallengerInput = {
    update: XOR<MemberUpdateWithoutArenasAsChallengerInput, MemberUncheckedUpdateWithoutArenasAsChallengerInput>
    create: XOR<MemberCreateWithoutArenasAsChallengerInput, MemberUncheckedCreateWithoutArenasAsChallengerInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutArenasAsChallengerInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutArenasAsChallengerInput, MemberUncheckedUpdateWithoutArenasAsChallengerInput>
  }

  export type MemberUpdateWithoutArenasAsChallengerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutArenasAsChallengerInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberUpsertWithoutArenasAsCreatorInput = {
    update: XOR<MemberUpdateWithoutArenasAsCreatorInput, MemberUncheckedUpdateWithoutArenasAsCreatorInput>
    create: XOR<MemberCreateWithoutArenasAsCreatorInput, MemberUncheckedCreateWithoutArenasAsCreatorInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutArenasAsCreatorInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutArenasAsCreatorInput, MemberUncheckedUpdateWithoutArenasAsCreatorInput>
  }

  export type MemberUpdateWithoutArenasAsCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutArenasAsCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ChattingUpsertWithWhereUniqueWithoutArenaInput = {
    where: ChattingWhereUniqueInput
    update: XOR<ChattingUpdateWithoutArenaInput, ChattingUncheckedUpdateWithoutArenaInput>
    create: XOR<ChattingCreateWithoutArenaInput, ChattingUncheckedCreateWithoutArenaInput>
  }

  export type ChattingUpdateWithWhereUniqueWithoutArenaInput = {
    where: ChattingWhereUniqueInput
    data: XOR<ChattingUpdateWithoutArenaInput, ChattingUncheckedUpdateWithoutArenaInput>
  }

  export type ChattingUpdateManyWithWhereWithoutArenaInput = {
    where: ChattingScalarWhereInput
    data: XOR<ChattingUpdateManyMutationInput, ChattingUncheckedUpdateManyWithoutArenaInput>
  }

  export type VoteUpsertWithWhereUniqueWithoutArenaInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutArenaInput, VoteUncheckedUpdateWithoutArenaInput>
    create: XOR<VoteCreateWithoutArenaInput, VoteUncheckedCreateWithoutArenaInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutArenaInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutArenaInput, VoteUncheckedUpdateWithoutArenaInput>
  }

  export type VoteUpdateManyWithWhereWithoutArenaInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutArenaInput>
  }

  export type ArenaCreateWithoutChattingsInput = {
    title: string
    description: string
    status: number
    startDate: Date | string
    challenger?: MemberCreateNestedOneWithoutArenasAsChallengerInput
    creator: MemberCreateNestedOneWithoutArenasAsCreatorInput
    votes?: VoteCreateNestedManyWithoutArenaInput
  }

  export type ArenaUncheckedCreateWithoutChattingsInput = {
    id?: number
    creatorId: string
    challengerId?: string | null
    title: string
    description: string
    status: number
    startDate: Date | string
    votes?: VoteUncheckedCreateNestedManyWithoutArenaInput
  }

  export type ArenaCreateOrConnectWithoutChattingsInput = {
    where: ArenaWhereUniqueInput
    create: XOR<ArenaCreateWithoutChattingsInput, ArenaUncheckedCreateWithoutChattingsInput>
  }

  export type MemberCreateWithoutChattingsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutChattingsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutChattingsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutChattingsInput, MemberUncheckedCreateWithoutChattingsInput>
  }

  export type ArenaUpsertWithoutChattingsInput = {
    update: XOR<ArenaUpdateWithoutChattingsInput, ArenaUncheckedUpdateWithoutChattingsInput>
    create: XOR<ArenaCreateWithoutChattingsInput, ArenaUncheckedCreateWithoutChattingsInput>
    where?: ArenaWhereInput
  }

  export type ArenaUpdateToOneWithWhereWithoutChattingsInput = {
    where?: ArenaWhereInput
    data: XOR<ArenaUpdateWithoutChattingsInput, ArenaUncheckedUpdateWithoutChattingsInput>
  }

  export type ArenaUpdateWithoutChattingsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    challenger?: MemberUpdateOneWithoutArenasAsChallengerNestedInput
    creator?: MemberUpdateOneRequiredWithoutArenasAsCreatorNestedInput
    votes?: VoteUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateWithoutChattingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    challengerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    votes?: VoteUncheckedUpdateManyWithoutArenaNestedInput
  }

  export type MemberUpsertWithoutChattingsInput = {
    update: XOR<MemberUpdateWithoutChattingsInput, MemberUncheckedUpdateWithoutChattingsInput>
    create: XOR<MemberCreateWithoutChattingsInput, MemberUncheckedCreateWithoutChattingsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutChattingsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutChattingsInput, MemberUncheckedUpdateWithoutChattingsInput>
  }

  export type MemberUpdateWithoutChattingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutChattingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ArenaCreateWithoutVotesInput = {
    title: string
    description: string
    status: number
    startDate: Date | string
    challenger?: MemberCreateNestedOneWithoutArenasAsChallengerInput
    creator: MemberCreateNestedOneWithoutArenasAsCreatorInput
    chattings?: ChattingCreateNestedManyWithoutArenaInput
  }

  export type ArenaUncheckedCreateWithoutVotesInput = {
    id?: number
    creatorId: string
    challengerId?: string | null
    title: string
    description: string
    status: number
    startDate: Date | string
    chattings?: ChattingUncheckedCreateNestedManyWithoutArenaInput
  }

  export type ArenaCreateOrConnectWithoutVotesInput = {
    where: ArenaWhereUniqueInput
    create: XOR<ArenaCreateWithoutVotesInput, ArenaUncheckedCreateWithoutVotesInput>
  }

  export type MemberCreateWithoutVotesInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutVotesInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutVotesInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutVotesInput, MemberUncheckedCreateWithoutVotesInput>
  }

  export type ArenaUpsertWithoutVotesInput = {
    update: XOR<ArenaUpdateWithoutVotesInput, ArenaUncheckedUpdateWithoutVotesInput>
    create: XOR<ArenaCreateWithoutVotesInput, ArenaUncheckedCreateWithoutVotesInput>
    where?: ArenaWhereInput
  }

  export type ArenaUpdateToOneWithWhereWithoutVotesInput = {
    where?: ArenaWhereInput
    data: XOR<ArenaUpdateWithoutVotesInput, ArenaUncheckedUpdateWithoutVotesInput>
  }

  export type ArenaUpdateWithoutVotesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    challenger?: MemberUpdateOneWithoutArenasAsChallengerNestedInput
    creator?: MemberUpdateOneRequiredWithoutArenasAsCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateWithoutVotesInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    challengerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    chattings?: ChattingUncheckedUpdateManyWithoutArenaNestedInput
  }

  export type MemberUpsertWithoutVotesInput = {
    update: XOR<MemberUpdateWithoutVotesInput, MemberUncheckedUpdateWithoutVotesInput>
    create: XOR<MemberCreateWithoutVotesInput, MemberUncheckedCreateWithoutVotesInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutVotesInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutVotesInput, MemberUncheckedUpdateWithoutVotesInput>
  }

  export type MemberUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type NotificationRecordCreateWithoutTypeInput = {
    description: string
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutNotificationRecordsInput
  }

  export type NotificationRecordUncheckedCreateWithoutTypeInput = {
    id?: number
    memberId: string
    description: string
    createdAt?: Date | string
  }

  export type NotificationRecordCreateOrConnectWithoutTypeInput = {
    where: NotificationRecordWhereUniqueInput
    create: XOR<NotificationRecordCreateWithoutTypeInput, NotificationRecordUncheckedCreateWithoutTypeInput>
  }

  export type NotificationRecordCreateManyTypeInputEnvelope = {
    data: NotificationRecordCreateManyTypeInput | NotificationRecordCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type NotificationRecordUpsertWithWhereUniqueWithoutTypeInput = {
    where: NotificationRecordWhereUniqueInput
    update: XOR<NotificationRecordUpdateWithoutTypeInput, NotificationRecordUncheckedUpdateWithoutTypeInput>
    create: XOR<NotificationRecordCreateWithoutTypeInput, NotificationRecordUncheckedCreateWithoutTypeInput>
  }

  export type NotificationRecordUpdateWithWhereUniqueWithoutTypeInput = {
    where: NotificationRecordWhereUniqueInput
    data: XOR<NotificationRecordUpdateWithoutTypeInput, NotificationRecordUncheckedUpdateWithoutTypeInput>
  }

  export type NotificationRecordUpdateManyWithWhereWithoutTypeInput = {
    where: NotificationRecordScalarWhereInput
    data: XOR<NotificationRecordUpdateManyMutationInput, NotificationRecordUncheckedUpdateManyWithoutTypeInput>
  }

  export type MemberCreateWithoutNotificationRecordsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutNotificationRecordsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutNotificationRecordsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutNotificationRecordsInput, MemberUncheckedCreateWithoutNotificationRecordsInput>
  }

  export type NotificationTypeCreateWithoutNotificationRecordsInput = {
    name: string
    imageUrl: string
  }

  export type NotificationTypeUncheckedCreateWithoutNotificationRecordsInput = {
    id?: number
    name: string
    imageUrl: string
  }

  export type NotificationTypeCreateOrConnectWithoutNotificationRecordsInput = {
    where: NotificationTypeWhereUniqueInput
    create: XOR<NotificationTypeCreateWithoutNotificationRecordsInput, NotificationTypeUncheckedCreateWithoutNotificationRecordsInput>
  }

  export type MemberUpsertWithoutNotificationRecordsInput = {
    update: XOR<MemberUpdateWithoutNotificationRecordsInput, MemberUncheckedUpdateWithoutNotificationRecordsInput>
    create: XOR<MemberCreateWithoutNotificationRecordsInput, MemberUncheckedCreateWithoutNotificationRecordsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutNotificationRecordsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutNotificationRecordsInput, MemberUncheckedUpdateWithoutNotificationRecordsInput>
  }

  export type MemberUpdateWithoutNotificationRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutNotificationRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type NotificationTypeUpsertWithoutNotificationRecordsInput = {
    update: XOR<NotificationTypeUpdateWithoutNotificationRecordsInput, NotificationTypeUncheckedUpdateWithoutNotificationRecordsInput>
    create: XOR<NotificationTypeCreateWithoutNotificationRecordsInput, NotificationTypeUncheckedCreateWithoutNotificationRecordsInput>
    where?: NotificationTypeWhereInput
  }

  export type NotificationTypeUpdateToOneWithWhereWithoutNotificationRecordsInput = {
    where?: NotificationTypeWhereInput
    data: XOR<NotificationTypeUpdateWithoutNotificationRecordsInput, NotificationTypeUncheckedUpdateWithoutNotificationRecordsInput>
  }

  export type NotificationTypeUpdateWithoutNotificationRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationTypeUncheckedUpdateWithoutNotificationRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ScoreRecordCreateWithoutPolicyInput = {
    createdAt?: Date | string
    member: MemberCreateNestedOneWithoutScoreRecordsInput
  }

  export type ScoreRecordUncheckedCreateWithoutPolicyInput = {
    id?: number
    memberId: string
    createdAt?: Date | string
  }

  export type ScoreRecordCreateOrConnectWithoutPolicyInput = {
    where: ScoreRecordWhereUniqueInput
    create: XOR<ScoreRecordCreateWithoutPolicyInput, ScoreRecordUncheckedCreateWithoutPolicyInput>
  }

  export type ScoreRecordCreateManyPolicyInputEnvelope = {
    data: ScoreRecordCreateManyPolicyInput | ScoreRecordCreateManyPolicyInput[]
    skipDuplicates?: boolean
  }

  export type ScoreRecordUpsertWithWhereUniqueWithoutPolicyInput = {
    where: ScoreRecordWhereUniqueInput
    update: XOR<ScoreRecordUpdateWithoutPolicyInput, ScoreRecordUncheckedUpdateWithoutPolicyInput>
    create: XOR<ScoreRecordCreateWithoutPolicyInput, ScoreRecordUncheckedCreateWithoutPolicyInput>
  }

  export type ScoreRecordUpdateWithWhereUniqueWithoutPolicyInput = {
    where: ScoreRecordWhereUniqueInput
    data: XOR<ScoreRecordUpdateWithoutPolicyInput, ScoreRecordUncheckedUpdateWithoutPolicyInput>
  }

  export type ScoreRecordUpdateManyWithWhereWithoutPolicyInput = {
    where: ScoreRecordScalarWhereInput
    data: XOR<ScoreRecordUpdateManyMutationInput, ScoreRecordUncheckedUpdateManyWithoutPolicyInput>
  }

  export type MemberCreateWithoutScoreRecordsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutScoreRecordsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutScoreRecordsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutScoreRecordsInput, MemberUncheckedCreateWithoutScoreRecordsInput>
  }

  export type ScorePolicyCreateWithoutScoreRecordsInput = {
    name: string
    description: string
    score: number
    imageUrl: string
  }

  export type ScorePolicyUncheckedCreateWithoutScoreRecordsInput = {
    id?: number
    name: string
    description: string
    score: number
    imageUrl: string
  }

  export type ScorePolicyCreateOrConnectWithoutScoreRecordsInput = {
    where: ScorePolicyWhereUniqueInput
    create: XOR<ScorePolicyCreateWithoutScoreRecordsInput, ScorePolicyUncheckedCreateWithoutScoreRecordsInput>
  }

  export type MemberUpsertWithoutScoreRecordsInput = {
    update: XOR<MemberUpdateWithoutScoreRecordsInput, MemberUncheckedUpdateWithoutScoreRecordsInput>
    create: XOR<MemberCreateWithoutScoreRecordsInput, MemberUncheckedCreateWithoutScoreRecordsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutScoreRecordsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutScoreRecordsInput, MemberUncheckedUpdateWithoutScoreRecordsInput>
  }

  export type MemberUpdateWithoutScoreRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutScoreRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ScorePolicyUpsertWithoutScoreRecordsInput = {
    update: XOR<ScorePolicyUpdateWithoutScoreRecordsInput, ScorePolicyUncheckedUpdateWithoutScoreRecordsInput>
    create: XOR<ScorePolicyCreateWithoutScoreRecordsInput, ScorePolicyUncheckedCreateWithoutScoreRecordsInput>
    where?: ScorePolicyWhereInput
  }

  export type ScorePolicyUpdateToOneWithWhereWithoutScoreRecordsInput = {
    where?: ScorePolicyWhereInput
    data: XOR<ScorePolicyUpdateWithoutScoreRecordsInput, ScorePolicyUncheckedUpdateWithoutScoreRecordsInput>
  }

  export type ScorePolicyUpdateWithoutScoreRecordsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ScorePolicyUncheckedUpdateWithoutScoreRecordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type GamePlatformCreateWithoutPlatformInput = {
    game: GameCreateNestedOneWithoutGamePlatformsInput
  }

  export type GamePlatformUncheckedCreateWithoutPlatformInput = {
    id?: number
    gameId: number
  }

  export type GamePlatformCreateOrConnectWithoutPlatformInput = {
    where: GamePlatformWhereUniqueInput
    create: XOR<GamePlatformCreateWithoutPlatformInput, GamePlatformUncheckedCreateWithoutPlatformInput>
  }

  export type GamePlatformCreateManyPlatformInputEnvelope = {
    data: GamePlatformCreateManyPlatformInput | GamePlatformCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type PreferredPlatformCreateWithoutPlatformInput = {
    member: MemberCreateNestedOneWithoutPreferredPlatformsInput
  }

  export type PreferredPlatformUncheckedCreateWithoutPlatformInput = {
    id?: number
    memberId: string
  }

  export type PreferredPlatformCreateOrConnectWithoutPlatformInput = {
    where: PreferredPlatformWhereUniqueInput
    create: XOR<PreferredPlatformCreateWithoutPlatformInput, PreferredPlatformUncheckedCreateWithoutPlatformInput>
  }

  export type PreferredPlatformCreateManyPlatformInputEnvelope = {
    data: PreferredPlatformCreateManyPlatformInput | PreferredPlatformCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type GamePlatformUpsertWithWhereUniqueWithoutPlatformInput = {
    where: GamePlatformWhereUniqueInput
    update: XOR<GamePlatformUpdateWithoutPlatformInput, GamePlatformUncheckedUpdateWithoutPlatformInput>
    create: XOR<GamePlatformCreateWithoutPlatformInput, GamePlatformUncheckedCreateWithoutPlatformInput>
  }

  export type GamePlatformUpdateWithWhereUniqueWithoutPlatformInput = {
    where: GamePlatformWhereUniqueInput
    data: XOR<GamePlatformUpdateWithoutPlatformInput, GamePlatformUncheckedUpdateWithoutPlatformInput>
  }

  export type GamePlatformUpdateManyWithWhereWithoutPlatformInput = {
    where: GamePlatformScalarWhereInput
    data: XOR<GamePlatformUpdateManyMutationInput, GamePlatformUncheckedUpdateManyWithoutPlatformInput>
  }

  export type PreferredPlatformUpsertWithWhereUniqueWithoutPlatformInput = {
    where: PreferredPlatformWhereUniqueInput
    update: XOR<PreferredPlatformUpdateWithoutPlatformInput, PreferredPlatformUncheckedUpdateWithoutPlatformInput>
    create: XOR<PreferredPlatformCreateWithoutPlatformInput, PreferredPlatformUncheckedCreateWithoutPlatformInput>
  }

  export type PreferredPlatformUpdateWithWhereUniqueWithoutPlatformInput = {
    where: PreferredPlatformWhereUniqueInput
    data: XOR<PreferredPlatformUpdateWithoutPlatformInput, PreferredPlatformUncheckedUpdateWithoutPlatformInput>
  }

  export type PreferredPlatformUpdateManyWithWhereWithoutPlatformInput = {
    where: PreferredPlatformScalarWhereInput
    data: XOR<PreferredPlatformUpdateManyMutationInput, PreferredPlatformUncheckedUpdateManyWithoutPlatformInput>
  }

  export type GameGenreCreateWithoutGenreInput = {
    game: GameCreateNestedOneWithoutGameGenresInput
  }

  export type GameGenreUncheckedCreateWithoutGenreInput = {
    id?: number
    gameId: number
  }

  export type GameGenreCreateOrConnectWithoutGenreInput = {
    where: GameGenreWhereUniqueInput
    create: XOR<GameGenreCreateWithoutGenreInput, GameGenreUncheckedCreateWithoutGenreInput>
  }

  export type GameGenreCreateManyGenreInputEnvelope = {
    data: GameGenreCreateManyGenreInput | GameGenreCreateManyGenreInput[]
    skipDuplicates?: boolean
  }

  export type PreferredGenreCreateWithoutGenreInput = {
    member: MemberCreateNestedOneWithoutPreferredGenresInput
  }

  export type PreferredGenreUncheckedCreateWithoutGenreInput = {
    id?: number
    memberId: string
  }

  export type PreferredGenreCreateOrConnectWithoutGenreInput = {
    where: PreferredGenreWhereUniqueInput
    create: XOR<PreferredGenreCreateWithoutGenreInput, PreferredGenreUncheckedCreateWithoutGenreInput>
  }

  export type PreferredGenreCreateManyGenreInputEnvelope = {
    data: PreferredGenreCreateManyGenreInput | PreferredGenreCreateManyGenreInput[]
    skipDuplicates?: boolean
  }

  export type GameGenreUpsertWithWhereUniqueWithoutGenreInput = {
    where: GameGenreWhereUniqueInput
    update: XOR<GameGenreUpdateWithoutGenreInput, GameGenreUncheckedUpdateWithoutGenreInput>
    create: XOR<GameGenreCreateWithoutGenreInput, GameGenreUncheckedCreateWithoutGenreInput>
  }

  export type GameGenreUpdateWithWhereUniqueWithoutGenreInput = {
    where: GameGenreWhereUniqueInput
    data: XOR<GameGenreUpdateWithoutGenreInput, GameGenreUncheckedUpdateWithoutGenreInput>
  }

  export type GameGenreUpdateManyWithWhereWithoutGenreInput = {
    where: GameGenreScalarWhereInput
    data: XOR<GameGenreUpdateManyMutationInput, GameGenreUncheckedUpdateManyWithoutGenreInput>
  }

  export type PreferredGenreUpsertWithWhereUniqueWithoutGenreInput = {
    where: PreferredGenreWhereUniqueInput
    update: XOR<PreferredGenreUpdateWithoutGenreInput, PreferredGenreUncheckedUpdateWithoutGenreInput>
    create: XOR<PreferredGenreCreateWithoutGenreInput, PreferredGenreUncheckedCreateWithoutGenreInput>
  }

  export type PreferredGenreUpdateWithWhereUniqueWithoutGenreInput = {
    where: PreferredGenreWhereUniqueInput
    data: XOR<PreferredGenreUpdateWithoutGenreInput, PreferredGenreUncheckedUpdateWithoutGenreInput>
  }

  export type PreferredGenreUpdateManyWithWhereWithoutGenreInput = {
    where: PreferredGenreScalarWhereInput
    data: XOR<PreferredGenreUpdateManyMutationInput, PreferredGenreUncheckedUpdateManyWithoutGenreInput>
  }

  export type GameThemeCreateWithoutThemeInput = {
    game: GameCreateNestedOneWithoutGameThemesInput
  }

  export type GameThemeUncheckedCreateWithoutThemeInput = {
    id?: number
    gameId: number
  }

  export type GameThemeCreateOrConnectWithoutThemeInput = {
    where: GameThemeWhereUniqueInput
    create: XOR<GameThemeCreateWithoutThemeInput, GameThemeUncheckedCreateWithoutThemeInput>
  }

  export type GameThemeCreateManyThemeInputEnvelope = {
    data: GameThemeCreateManyThemeInput | GameThemeCreateManyThemeInput[]
    skipDuplicates?: boolean
  }

  export type PreferredThemeCreateWithoutThemeInput = {
    member: MemberCreateNestedOneWithoutPreferredThemesInput
  }

  export type PreferredThemeUncheckedCreateWithoutThemeInput = {
    id?: number
    memberId: string
  }

  export type PreferredThemeCreateOrConnectWithoutThemeInput = {
    where: PreferredThemeWhereUniqueInput
    create: XOR<PreferredThemeCreateWithoutThemeInput, PreferredThemeUncheckedCreateWithoutThemeInput>
  }

  export type PreferredThemeCreateManyThemeInputEnvelope = {
    data: PreferredThemeCreateManyThemeInput | PreferredThemeCreateManyThemeInput[]
    skipDuplicates?: boolean
  }

  export type GameThemeUpsertWithWhereUniqueWithoutThemeInput = {
    where: GameThemeWhereUniqueInput
    update: XOR<GameThemeUpdateWithoutThemeInput, GameThemeUncheckedUpdateWithoutThemeInput>
    create: XOR<GameThemeCreateWithoutThemeInput, GameThemeUncheckedCreateWithoutThemeInput>
  }

  export type GameThemeUpdateWithWhereUniqueWithoutThemeInput = {
    where: GameThemeWhereUniqueInput
    data: XOR<GameThemeUpdateWithoutThemeInput, GameThemeUncheckedUpdateWithoutThemeInput>
  }

  export type GameThemeUpdateManyWithWhereWithoutThemeInput = {
    where: GameThemeScalarWhereInput
    data: XOR<GameThemeUpdateManyMutationInput, GameThemeUncheckedUpdateManyWithoutThemeInput>
  }

  export type PreferredThemeUpsertWithWhereUniqueWithoutThemeInput = {
    where: PreferredThemeWhereUniqueInput
    update: XOR<PreferredThemeUpdateWithoutThemeInput, PreferredThemeUncheckedUpdateWithoutThemeInput>
    create: XOR<PreferredThemeCreateWithoutThemeInput, PreferredThemeUncheckedCreateWithoutThemeInput>
  }

  export type PreferredThemeUpdateWithWhereUniqueWithoutThemeInput = {
    where: PreferredThemeWhereUniqueInput
    data: XOR<PreferredThemeUpdateWithoutThemeInput, PreferredThemeUncheckedUpdateWithoutThemeInput>
  }

  export type PreferredThemeUpdateManyWithWhereWithoutThemeInput = {
    where: PreferredThemeScalarWhereInput
    data: XOR<PreferredThemeUpdateManyMutationInput, PreferredThemeUncheckedUpdateManyWithoutThemeInput>
  }

  export type MemberCreateWithoutPreferredPlatformsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutPreferredPlatformsInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutPreferredPlatformsInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPreferredPlatformsInput, MemberUncheckedCreateWithoutPreferredPlatformsInput>
  }

  export type PlatformCreateWithoutPreferredPlatformsInput = {
    name: string
    gamePlatforms?: GamePlatformCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateWithoutPreferredPlatformsInput = {
    id?: number
    name: string
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformCreateOrConnectWithoutPreferredPlatformsInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutPreferredPlatformsInput, PlatformUncheckedCreateWithoutPreferredPlatformsInput>
  }

  export type MemberUpsertWithoutPreferredPlatformsInput = {
    update: XOR<MemberUpdateWithoutPreferredPlatformsInput, MemberUncheckedUpdateWithoutPreferredPlatformsInput>
    create: XOR<MemberCreateWithoutPreferredPlatformsInput, MemberUncheckedCreateWithoutPreferredPlatformsInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPreferredPlatformsInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPreferredPlatformsInput, MemberUncheckedUpdateWithoutPreferredPlatformsInput>
  }

  export type MemberUpdateWithoutPreferredPlatformsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutPreferredPlatformsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type PlatformUpsertWithoutPreferredPlatformsInput = {
    update: XOR<PlatformUpdateWithoutPreferredPlatformsInput, PlatformUncheckedUpdateWithoutPreferredPlatformsInput>
    create: XOR<PlatformCreateWithoutPreferredPlatformsInput, PlatformUncheckedCreateWithoutPreferredPlatformsInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutPreferredPlatformsInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutPreferredPlatformsInput, PlatformUncheckedUpdateWithoutPreferredPlatformsInput>
  }

  export type PlatformUpdateWithoutPreferredPlatformsInput = {
    name?: StringFieldUpdateOperationsInput | string
    gamePlatforms?: GamePlatformUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateWithoutPreferredPlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type GenreCreateWithoutPreferredGenresInput = {
    name: string
    gameGenres?: GameGenreCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateWithoutPreferredGenresInput = {
    id?: number
    name: string
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreCreateOrConnectWithoutPreferredGenresInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutPreferredGenresInput, GenreUncheckedCreateWithoutPreferredGenresInput>
  }

  export type MemberCreateWithoutPreferredGenresInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutPreferredGenresInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutPreferredGenresInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPreferredGenresInput, MemberUncheckedCreateWithoutPreferredGenresInput>
  }

  export type GenreUpsertWithoutPreferredGenresInput = {
    update: XOR<GenreUpdateWithoutPreferredGenresInput, GenreUncheckedUpdateWithoutPreferredGenresInput>
    create: XOR<GenreCreateWithoutPreferredGenresInput, GenreUncheckedCreateWithoutPreferredGenresInput>
    where?: GenreWhereInput
  }

  export type GenreUpdateToOneWithWhereWithoutPreferredGenresInput = {
    where?: GenreWhereInput
    data: XOR<GenreUpdateWithoutPreferredGenresInput, GenreUncheckedUpdateWithoutPreferredGenresInput>
  }

  export type GenreUpdateWithoutPreferredGenresInput = {
    name?: StringFieldUpdateOperationsInput | string
    gameGenres?: GameGenreUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateWithoutPreferredGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type MemberUpsertWithoutPreferredGenresInput = {
    update: XOR<MemberUpdateWithoutPreferredGenresInput, MemberUncheckedUpdateWithoutPreferredGenresInput>
    create: XOR<MemberCreateWithoutPreferredGenresInput, MemberUncheckedCreateWithoutPreferredGenresInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPreferredGenresInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPreferredGenresInput, MemberUncheckedUpdateWithoutPreferredGenresInput>
  }

  export type MemberUpdateWithoutPreferredGenresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutPreferredGenresInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateWithoutPreferredThemesInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaCreateNestedManyWithoutCreatorInput
    chattings?: ChattingCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeCreateNestedManyWithoutMemberInput
    reviews?: ReviewCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordCreateNestedManyWithoutMemberInput
    votes?: VoteCreateNestedManyWithoutMemberInput
    wishlists?: WishlistCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutPreferredThemesInput = {
    id?: string
    nickname: string
    email: string
    password: string
    imageUrl: string
    birthDate: Date | string
    isMale: boolean
    score?: number
    lastAttendedDate?: Date | string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    arenasAsChallenger?: ArenaUncheckedCreateNestedManyWithoutChallengerInput
    arenasAsCreator?: ArenaUncheckedCreateNestedManyWithoutCreatorInput
    chattings?: ChattingUncheckedCreateNestedManyWithoutMemberInput
    notificationRecords?: NotificationRecordUncheckedCreateNestedManyWithoutMemberInput
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutMemberInput
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutMemberInput
    reviewLikes?: ReviewLikeUncheckedCreateNestedManyWithoutMemberInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutMemberInput
    scoreRecords?: ScoreRecordUncheckedCreateNestedManyWithoutMemberInput
    votes?: VoteUncheckedCreateNestedManyWithoutMemberInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutPreferredThemesInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutPreferredThemesInput, MemberUncheckedCreateWithoutPreferredThemesInput>
  }

  export type ThemeCreateWithoutPreferredThemesInput = {
    name: string
    gameThemes?: GameThemeCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutPreferredThemesInput = {
    id?: number
    name: string
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutPreferredThemesInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutPreferredThemesInput, ThemeUncheckedCreateWithoutPreferredThemesInput>
  }

  export type MemberUpsertWithoutPreferredThemesInput = {
    update: XOR<MemberUpdateWithoutPreferredThemesInput, MemberUncheckedUpdateWithoutPreferredThemesInput>
    create: XOR<MemberCreateWithoutPreferredThemesInput, MemberUncheckedCreateWithoutPreferredThemesInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutPreferredThemesInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutPreferredThemesInput, MemberUncheckedUpdateWithoutPreferredThemesInput>
  }

  export type MemberUpdateWithoutPreferredThemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUpdateManyWithoutMemberNestedInput
    votes?: VoteUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutPreferredThemesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isMale?: BoolFieldUpdateOperationsInput | boolean
    score?: IntFieldUpdateOperationsInput | number
    lastAttendedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    arenasAsChallenger?: ArenaUncheckedUpdateManyWithoutChallengerNestedInput
    arenasAsCreator?: ArenaUncheckedUpdateManyWithoutCreatorNestedInput
    chattings?: ChattingUncheckedUpdateManyWithoutMemberNestedInput
    notificationRecords?: NotificationRecordUncheckedUpdateManyWithoutMemberNestedInput
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutMemberNestedInput
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutMemberNestedInput
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutMemberNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutMemberNestedInput
    scoreRecords?: ScoreRecordUncheckedUpdateManyWithoutMemberNestedInput
    votes?: VoteUncheckedUpdateManyWithoutMemberNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type ThemeUpsertWithoutPreferredThemesInput = {
    update: XOR<ThemeUpdateWithoutPreferredThemesInput, ThemeUncheckedUpdateWithoutPreferredThemesInput>
    create: XOR<ThemeCreateWithoutPreferredThemesInput, ThemeUncheckedCreateWithoutPreferredThemesInput>
    where?: ThemeWhereInput
  }

  export type ThemeUpdateToOneWithWhereWithoutPreferredThemesInput = {
    where?: ThemeWhereInput
    data: XOR<ThemeUpdateWithoutPreferredThemesInput, ThemeUncheckedUpdateWithoutPreferredThemesInput>
  }

  export type ThemeUpdateWithoutPreferredThemesInput = {
    name?: StringFieldUpdateOperationsInput | string
    gameThemes?: GameThemeUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutPreferredThemesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gameThemes?: GameThemeUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type GameCreateWithoutGamePlatformsInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeCreateNestedManyWithoutGameInput
    reviews?: ReviewCreateNestedManyWithoutGameInput
    wishlists?: WishlistCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGamePlatformsInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutGameInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutGameInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGamePlatformsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGamePlatformsInput, GameUncheckedCreateWithoutGamePlatformsInput>
  }

  export type PlatformCreateWithoutGamePlatformsInput = {
    name: string
    preferredPlatforms?: PreferredPlatformCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateWithoutGamePlatformsInput = {
    id?: number
    name: string
    preferredPlatforms?: PreferredPlatformUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformCreateOrConnectWithoutGamePlatformsInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutGamePlatformsInput, PlatformUncheckedCreateWithoutGamePlatformsInput>
  }

  export type GameUpsertWithoutGamePlatformsInput = {
    update: XOR<GameUpdateWithoutGamePlatformsInput, GameUncheckedUpdateWithoutGamePlatformsInput>
    create: XOR<GameCreateWithoutGamePlatformsInput, GameUncheckedCreateWithoutGamePlatformsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGamePlatformsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGamePlatformsInput, GameUncheckedUpdateWithoutGamePlatformsInput>
  }

  export type GameUpdateWithoutGamePlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUpdateManyWithoutGameNestedInput
    reviews?: ReviewUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGamePlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUncheckedUpdateManyWithoutGameNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutGameNestedInput
  }

  export type PlatformUpsertWithoutGamePlatformsInput = {
    update: XOR<PlatformUpdateWithoutGamePlatformsInput, PlatformUncheckedUpdateWithoutGamePlatformsInput>
    create: XOR<PlatformCreateWithoutGamePlatformsInput, PlatformUncheckedCreateWithoutGamePlatformsInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutGamePlatformsInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutGamePlatformsInput, PlatformUncheckedUpdateWithoutGamePlatformsInput>
  }

  export type PlatformUpdateWithoutGamePlatformsInput = {
    name?: StringFieldUpdateOperationsInput | string
    preferredPlatforms?: PreferredPlatformUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateWithoutGamePlatformsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    preferredPlatforms?: PreferredPlatformUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type GameCreateWithoutGameGenresInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gamePlatforms?: GamePlatformCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeCreateNestedManyWithoutGameInput
    reviews?: ReviewCreateNestedManyWithoutGameInput
    wishlists?: WishlistCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameGenresInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutGameInput
    gameThemes?: GameThemeUncheckedCreateNestedManyWithoutGameInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutGameInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameGenresInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameGenresInput, GameUncheckedCreateWithoutGameGenresInput>
  }

  export type GenreCreateWithoutGameGenresInput = {
    name: string
    preferredGenres?: PreferredGenreCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateWithoutGameGenresInput = {
    id?: number
    name: string
    preferredGenres?: PreferredGenreUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreCreateOrConnectWithoutGameGenresInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutGameGenresInput, GenreUncheckedCreateWithoutGameGenresInput>
  }

  export type GameUpsertWithoutGameGenresInput = {
    update: XOR<GameUpdateWithoutGameGenresInput, GameUncheckedUpdateWithoutGameGenresInput>
    create: XOR<GameCreateWithoutGameGenresInput, GameUncheckedCreateWithoutGameGenresInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameGenresInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameGenresInput, GameUncheckedUpdateWithoutGameGenresInput>
  }

  export type GameUpdateWithoutGameGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gamePlatforms?: GamePlatformUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUpdateManyWithoutGameNestedInput
    reviews?: ReviewUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutGameNestedInput
    gameThemes?: GameThemeUncheckedUpdateManyWithoutGameNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GenreUpsertWithoutGameGenresInput = {
    update: XOR<GenreUpdateWithoutGameGenresInput, GenreUncheckedUpdateWithoutGameGenresInput>
    create: XOR<GenreCreateWithoutGameGenresInput, GenreUncheckedCreateWithoutGameGenresInput>
    where?: GenreWhereInput
  }

  export type GenreUpdateToOneWithWhereWithoutGameGenresInput = {
    where?: GenreWhereInput
    data: XOR<GenreUpdateWithoutGameGenresInput, GenreUncheckedUpdateWithoutGameGenresInput>
  }

  export type GenreUpdateWithoutGameGenresInput = {
    name?: StringFieldUpdateOperationsInput | string
    preferredGenres?: PreferredGenreUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateWithoutGameGenresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    preferredGenres?: PreferredGenreUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GameCreateWithoutGameThemesInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformCreateNestedManyWithoutGameInput
    reviews?: ReviewCreateNestedManyWithoutGameInput
    wishlists?: WishlistCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutGameThemesInput = {
    id: number
    title: string
    developer?: string | null
    thumbnail?: string | null
    releaseDate?: Date | string | null
    gameGenres?: GameGenreUncheckedCreateNestedManyWithoutGameInput
    gamePlatforms?: GamePlatformUncheckedCreateNestedManyWithoutGameInput
    reviews?: ReviewUncheckedCreateNestedManyWithoutGameInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutGameThemesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutGameThemesInput, GameUncheckedCreateWithoutGameThemesInput>
  }

  export type ThemeCreateWithoutGameThemesInput = {
    name: string
    preferredThemes?: PreferredThemeCreateNestedManyWithoutThemeInput
  }

  export type ThemeUncheckedCreateWithoutGameThemesInput = {
    id?: number
    name: string
    preferredThemes?: PreferredThemeUncheckedCreateNestedManyWithoutThemeInput
  }

  export type ThemeCreateOrConnectWithoutGameThemesInput = {
    where: ThemeWhereUniqueInput
    create: XOR<ThemeCreateWithoutGameThemesInput, ThemeUncheckedCreateWithoutGameThemesInput>
  }

  export type GameUpsertWithoutGameThemesInput = {
    update: XOR<GameUpdateWithoutGameThemesInput, GameUncheckedUpdateWithoutGameThemesInput>
    create: XOR<GameCreateWithoutGameThemesInput, GameUncheckedCreateWithoutGameThemesInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutGameThemesInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutGameThemesInput, GameUncheckedUpdateWithoutGameThemesInput>
  }

  export type GameUpdateWithoutGameThemesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUpdateManyWithoutGameNestedInput
    reviews?: ReviewUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutGameThemesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    developer?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnail?: NullableStringFieldUpdateOperationsInput | string | null
    releaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gameGenres?: GameGenreUncheckedUpdateManyWithoutGameNestedInput
    gamePlatforms?: GamePlatformUncheckedUpdateManyWithoutGameNestedInput
    reviews?: ReviewUncheckedUpdateManyWithoutGameNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutGameNestedInput
  }

  export type ThemeUpsertWithoutGameThemesInput = {
    update: XOR<ThemeUpdateWithoutGameThemesInput, ThemeUncheckedUpdateWithoutGameThemesInput>
    create: XOR<ThemeCreateWithoutGameThemesInput, ThemeUncheckedCreateWithoutGameThemesInput>
    where?: ThemeWhereInput
  }

  export type ThemeUpdateToOneWithWhereWithoutGameThemesInput = {
    where?: ThemeWhereInput
    data: XOR<ThemeUpdateWithoutGameThemesInput, ThemeUncheckedUpdateWithoutGameThemesInput>
  }

  export type ThemeUpdateWithoutGameThemesInput = {
    name?: StringFieldUpdateOperationsInput | string
    preferredThemes?: PreferredThemeUpdateManyWithoutThemeNestedInput
  }

  export type ThemeUncheckedUpdateWithoutGameThemesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    preferredThemes?: PreferredThemeUncheckedUpdateManyWithoutThemeNestedInput
  }

  export type ArenaCreateManyChallengerInput = {
    id?: number
    creatorId: string
    title: string
    description: string
    status: number
    startDate: Date | string
  }

  export type ArenaCreateManyCreatorInput = {
    id?: number
    challengerId?: string | null
    title: string
    description: string
    status: number
    startDate: Date | string
  }

  export type ChattingCreateManyMemberInput = {
    id?: number
    arenaId: number
    content: string
    createdAt?: Date | string
  }

  export type NotificationRecordCreateManyMemberInput = {
    id?: number
    typeId: number
    description: string
    createdAt?: Date | string
  }

  export type PreferredGenreCreateManyMemberInput = {
    id?: number
    genreId: number
  }

  export type PreferredPlatformCreateManyMemberInput = {
    id?: number
    platformId: number
  }

  export type PreferredThemeCreateManyMemberInput = {
    id?: number
    themeId: number
  }

  export type ReviewLikeCreateManyMemberInput = {
    id?: number
    reviewId: number
  }

  export type ReviewCreateManyMemberInput = {
    id?: number
    gameId: number
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ScoreRecordCreateManyMemberInput = {
    id?: number
    policyId: number
    createdAt?: Date | string
  }

  export type VoteCreateManyMemberInput = {
    id?: number
    arenaId: number
    votedTo: string
  }

  export type WishlistCreateManyMemberInput = {
    id?: number
    gameId: number
  }

  export type ArenaUpdateWithoutChallengerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: MemberUpdateOneRequiredWithoutArenasAsCreatorNestedInput
    chattings?: ChattingUpdateManyWithoutArenaNestedInput
    votes?: VoteUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateWithoutChallengerInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    chattings?: ChattingUncheckedUpdateManyWithoutArenaNestedInput
    votes?: VoteUncheckedUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateManyWithoutChallengerInput = {
    id?: IntFieldUpdateOperationsInput | number
    creatorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArenaUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    challenger?: MemberUpdateOneWithoutArenasAsChallengerNestedInput
    chattings?: ChattingUpdateManyWithoutArenaNestedInput
    votes?: VoteUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    challengerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    chattings?: ChattingUncheckedUpdateManyWithoutArenaNestedInput
    votes?: VoteUncheckedUpdateManyWithoutArenaNestedInput
  }

  export type ArenaUncheckedUpdateManyWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    challengerId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChattingUpdateWithoutMemberInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    arena?: ArenaUpdateOneRequiredWithoutChattingsNestedInput
  }

  export type ChattingUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    arenaId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChattingUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    arenaId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRecordUpdateWithoutMemberInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: NotificationTypeUpdateOneRequiredWithoutNotificationRecordsNestedInput
  }

  export type NotificationRecordUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRecordUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PreferredGenreUpdateWithoutMemberInput = {
    genre?: GenreUpdateOneRequiredWithoutPreferredGenresNestedInput
  }

  export type PreferredGenreUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredGenreUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredPlatformUpdateWithoutMemberInput = {
    platform?: PlatformUpdateOneRequiredWithoutPreferredPlatformsNestedInput
  }

  export type PreferredPlatformUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredPlatformUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredThemeUpdateWithoutMemberInput = {
    theme?: ThemeUpdateOneRequiredWithoutPreferredThemesNestedInput
  }

  export type PreferredThemeUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredThemeUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewLikeUpdateWithoutMemberInput = {
    review?: ReviewUpdateOneRequiredWithoutReviewLikesNestedInput
  }

  export type ReviewLikeUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewLikeUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutMemberInput = {
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewLikes?: ReviewLikeUpdateManyWithoutReviewNestedInput
    game?: GameUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScoreRecordUpdateWithoutMemberInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policy?: ScorePolicyUpdateOneRequiredWithoutScoreRecordsNestedInput
  }

  export type ScoreRecordUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    policyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreRecordUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    policyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutMemberInput = {
    votedTo?: StringFieldUpdateOperationsInput | string
    arena?: ArenaUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    arenaId?: IntFieldUpdateOperationsInput | number
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    arenaId?: IntFieldUpdateOperationsInput | number
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type WishlistUpdateWithoutMemberInput = {
    game?: GameUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type WishlistUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type GameGenreCreateManyGameInput = {
    id?: number
    genreId: number
  }

  export type GamePlatformCreateManyGameInput = {
    id?: number
    platformId: number
  }

  export type GameThemeCreateManyGameInput = {
    id?: number
    themeId: number
  }

  export type ReviewCreateManyGameInput = {
    id?: number
    memberId: string
    content: string
    rating: number
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type WishlistCreateManyGameInput = {
    id?: number
    memberId: string
  }

  export type GameGenreUpdateWithoutGameInput = {
    genre?: GenreUpdateOneRequiredWithoutGameGenresNestedInput
  }

  export type GameGenreUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type GameGenreUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type GamePlatformUpdateWithoutGameInput = {
    platform?: PlatformUpdateOneRequiredWithoutGamePlatformsNestedInput
  }

  export type GamePlatformUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type GamePlatformUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type GameThemeUpdateWithoutGameInput = {
    theme?: ThemeUpdateOneRequiredWithoutGameThemesNestedInput
  }

  export type GameThemeUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type GameThemeUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    themeId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutGameInput = {
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewLikes?: ReviewLikeUpdateManyWithoutReviewNestedInput
    member?: MemberUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewLikes?: ReviewLikeUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WishlistUpdateWithoutGameInput = {
    member?: MemberUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type WishlistUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewLikeCreateManyReviewInput = {
    id?: number
    memberId: string
  }

  export type ReviewLikeUpdateWithoutReviewInput = {
    member?: MemberUpdateOneRequiredWithoutReviewLikesNestedInput
  }

  export type ReviewLikeUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewLikeUncheckedUpdateManyWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type ChattingCreateManyArenaInput = {
    id?: number
    memberId: string
    content: string
    createdAt?: Date | string
  }

  export type VoteCreateManyArenaInput = {
    id?: number
    memberId: string
    votedTo: string
  }

  export type ChattingUpdateWithoutArenaInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutChattingsNestedInput
  }

  export type ChattingUncheckedUpdateWithoutArenaInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChattingUncheckedUpdateManyWithoutArenaInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutArenaInput = {
    votedTo?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutArenaInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type VoteUncheckedUpdateManyWithoutArenaInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    votedTo?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationRecordCreateManyTypeInput = {
    id?: number
    memberId: string
    description: string
    createdAt?: Date | string
  }

  export type NotificationRecordUpdateWithoutTypeInput = {
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutNotificationRecordsNestedInput
  }

  export type NotificationRecordUncheckedUpdateWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationRecordUncheckedUpdateManyWithoutTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreRecordCreateManyPolicyInput = {
    id?: number
    memberId: string
    createdAt?: Date | string
  }

  export type ScoreRecordUpdateWithoutPolicyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutScoreRecordsNestedInput
  }

  export type ScoreRecordUncheckedUpdateWithoutPolicyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScoreRecordUncheckedUpdateManyWithoutPolicyInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GamePlatformCreateManyPlatformInput = {
    id?: number
    gameId: number
  }

  export type PreferredPlatformCreateManyPlatformInput = {
    id?: number
    memberId: string
  }

  export type GamePlatformUpdateWithoutPlatformInput = {
    game?: GameUpdateOneRequiredWithoutGamePlatformsNestedInput
  }

  export type GamePlatformUncheckedUpdateWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type GamePlatformUncheckedUpdateManyWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredPlatformUpdateWithoutPlatformInput = {
    member?: MemberUpdateOneRequiredWithoutPreferredPlatformsNestedInput
  }

  export type PreferredPlatformUncheckedUpdateWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type PreferredPlatformUncheckedUpdateManyWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type GameGenreCreateManyGenreInput = {
    id?: number
    gameId: number
  }

  export type PreferredGenreCreateManyGenreInput = {
    id?: number
    memberId: string
  }

  export type GameGenreUpdateWithoutGenreInput = {
    game?: GameUpdateOneRequiredWithoutGameGenresNestedInput
  }

  export type GameGenreUncheckedUpdateWithoutGenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type GameGenreUncheckedUpdateManyWithoutGenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredGenreUpdateWithoutGenreInput = {
    member?: MemberUpdateOneRequiredWithoutPreferredGenresNestedInput
  }

  export type PreferredGenreUncheckedUpdateWithoutGenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type PreferredGenreUncheckedUpdateManyWithoutGenreInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type GameThemeCreateManyThemeInput = {
    id?: number
    gameId: number
  }

  export type PreferredThemeCreateManyThemeInput = {
    id?: number
    memberId: string
  }

  export type GameThemeUpdateWithoutThemeInput = {
    game?: GameUpdateOneRequiredWithoutGameThemesNestedInput
  }

  export type GameThemeUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type GameThemeUncheckedUpdateManyWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
  }

  export type PreferredThemeUpdateWithoutThemeInput = {
    member?: MemberUpdateOneRequiredWithoutPreferredThemesNestedInput
  }

  export type PreferredThemeUncheckedUpdateWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type PreferredThemeUncheckedUpdateManyWithoutThemeInput = {
    id?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}