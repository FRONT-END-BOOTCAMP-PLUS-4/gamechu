generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                  String               @id @default(uuid())
  nickname            String
  email               String               @unique
  password            String
  imageUrl            String               @map("image_url")
  birthDate           DateTime             @map("birth_date")
  isMale              Boolean
  score               Int                  @default(500)
  createdAt           DateTime             @default(now()) @map("created_at")
  deletedAt           DateTime?            @map("deleted_at")
  last_attended_date  DateTime             @default(now())
  arenasAsChallenger  Arena[]              @relation("ArenaChallenger")
  arenasAsCreator     Arena[]              @relation("ArenaCreator")
  chattings           Chatting[]
  notificationRecords NotificationRecord[]
  preferredGenres     PreferredGenre[]
  preferredPlatforms  PreferredPlatform[]
  preferredThemes     PreferredTheme[]
  reviewLikes         ReviewLike[]
  reviews             Review[]
  scoreRecords        ScoreRecord[]
  votes               Vote[]
  wishlists           Wishlist[]

  @@map("members")
}

model Game {
  id            Int            @id @default(autoincrement())
  title         String
  developer     String?
  thumbnail     String?
  releaseDate   DateTime       @map("release_date")
  gameGenres    GameGenre[]
  gamePlatforms GamePlatform[]
  gameThemes    GameTheme[]
  reviews       Review[]
  wishlists     Wishlist[]

  @@map("games")
}

model Wishlist {
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  gameId   Int    @map("game_id")
  game     Game   @relation(fields: [gameId], references: [id])
  member   Member @relation(fields: [memberId], references: [id])

  @@map("wishlists")
}

model Review {
  id          Int          @id @default(autoincrement())
  memberId    String       @map("member_id")
  gameId      Int          @map("game_id")
  content     String
  rating      Int
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @map("updated_at")
  reviewLikes ReviewLike[]
  game        Game         @relation(fields: [gameId], references: [id])
  member      Member       @relation(fields: [memberId], references: [id])

  @@map("reviews")
}

model ReviewLike {
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  reviewId Int    @map("review_id")
  member   Member @relation(fields: [memberId], references: [id])
  review   Review @relation(fields: [reviewId], references: [id])

  @@map("review_likes")
}

model Arena {
  id           Int        @id @default(autoincrement())
  creatorId    String     @map("creator_id")
  challengerId String?    @map("challenger_id")
  title        String
  description  String
  status       Int
  startDate    DateTime   @map("start_date")
  challenger   Member?    @relation("ArenaChallenger", fields: [challengerId], references: [id])
  creator      Member     @relation("ArenaCreator", fields: [creatorId], references: [id])
  chattings    Chatting[]
  votes        Vote[]

  @@map("arenas")
}

model Chatting {
  id        Int      @id @default(autoincrement())
  memberId  String   @map("member_id")
  arenaId   Int      @map("arena_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  arena     Arena    @relation(fields: [arenaId], references: [id])
  member    Member   @relation(fields: [memberId], references: [id])

  @@map("chattings")
}

model Vote {
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  arenaId  Int    @map("arena_id")
  votedTo  String @map("voted_to")
  arena    Arena  @relation(fields: [arenaId], references: [id])
  member   Member @relation(fields: [memberId], references: [id])

  @@map("votes")
}

model NotificationType {
  id                  Int                  @id @default(autoincrement())
  name                String
  imageUrl            String               @map("image_url")
  notificationRecords NotificationRecord[]

  @@map("notification_types")
}

model NotificationRecord {
  id          Int              @id @default(autoincrement())
  memberId    String           @map("member_id")
  typeId      Int              @map("type_id")
  description String
  createdAt   DateTime         @default(now()) @map("created_at")
  member      Member           @relation(fields: [memberId], references: [id])
  type        NotificationType @relation(fields: [typeId], references: [id])

  @@map("notification_records")
}

model ScorePolicy {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  score        Int
  imageUrl     String        @map("image_url")
  scoreRecords ScoreRecord[]

  @@map("score_policies")
}

model ScoreRecord {
  id        Int         @id @default(autoincrement())
  memberId  String      @map("member_id")
  policyId  Int         @map("policy_id")
  createdAt DateTime    @default(now()) @map("created_at")
  member    Member      @relation(fields: [memberId], references: [id])
  policy    ScorePolicy @relation(fields: [policyId], references: [id])

  @@map("score_records")
}

model Platform {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  gamePlatforms      GamePlatform[]
  preferredPlatforms PreferredPlatform[]

  @@map("platforms")
}

model Genre {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  gameGenres      GameGenre[]
  preferredGenres PreferredGenre[]

  @@map("genres")
}

model Theme {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  gameThemes      GameTheme[]
  preferredThemes PreferredTheme[]

  @@map("themes")
}

model PreferredPlatform {
  id         Int      @id @default(autoincrement())
  memberId   String   @map("member_id")
  platformId Int      @map("platform_id")
  member     Member   @relation(fields: [memberId], references: [id])
  platform   Platform @relation(fields: [platformId], references: [id])

  @@map("preferred_platforms")
}

model PreferredGenre {
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  genreId  Int    @map("genre_id")
  genre    Genre  @relation(fields: [genreId], references: [id])
  member   Member @relation(fields: [memberId], references: [id])

  @@map("preferred_genres")
}

model PreferredTheme {
  id       Int    @id @default(autoincrement())
  memberId String @map("member_id")
  themeId  Int    @map("theme_id")
  member   Member @relation(fields: [memberId], references: [id])
  theme    Theme  @relation(fields: [themeId], references: [id])

  @@map("preferred_themes")
}

model GamePlatform {
  id         Int      @id @default(autoincrement())
  gameId     Int      @map("game_id")
  platformId Int      @map("platform_id")
  game       Game     @relation(fields: [gameId], references: [id])
  platform   Platform @relation(fields: [platformId], references: [id])

  @@map("game_platforms")
}

model GameGenre {
  id      Int   @id @default(autoincrement())
  gameId  Int   @map("game_id")
  genreId Int   @map("genre_id")
  game    Game  @relation(fields: [gameId], references: [id])
  genre   Genre @relation(fields: [genreId], references: [id])

  @@map("game_genres")
}

model GameTheme {
  id      Int   @id @default(autoincrement())
  gameId  Int   @map("game_id")
  themeId Int   @map("theme_id")
  game    Game  @relation(fields: [gameId], references: [id])
  theme   Theme @relation(fields: [themeId], references: [id])

  @@map("game_themes")
}
